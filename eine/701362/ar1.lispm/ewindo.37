;;; This file is part of EINE, the Lisp Machine editor.        -*-LISP-*-
;;; For more information see LISPM2;EINE INFO.

;; This file has functions for handling editor windows,
;; and for selecting buffers in them.

(DECLARE (SETQ RETAIN-VARIABLE-NAMES-SWITCH 'ARGS))
(DECLARE (SETQ OPEN-CODE-MAP-SWITCH T))

(DEFUN ED-COM-TWO-WINDOWS (IGNORE)
    (OR ED-WINDOW-HACKING-OK-P (ED-BARF "You may not hack windows now."))
    (AND (OR (EQ ED-WINDOW ED-TOP-HALF-WINDOW)
	     (EQ ED-WINDOW ED-BOTTOM-HALF-WINDOW))
	 (ED-BARF "You already have two windows -- ED-COM-TWO-WINDOWS"))
    
    (ED-WINDOW-COPY-VIEW ED-WINDOW ED-TOP-HALF-WINDOW)

    (COND ((NULL (ED-WINDOW-BUFFER ED-BOTTOM-HALF-WINDOW))
	   (SETQ ED-W2-BUFFER (ED-CREATE-BUFFER 'W2))
	   (ED-SELECT-BUFFER ED-BOTTOM-HALF-WINDOW ED-W2-BUFFER)))

    (ED-WINDOW-SAVE-BP ED-TOP-HALF-WINDOW)

    (ED-SELECT-WINDOWS ED-BOTTOM-HALF-WINDOW ED-TOP-HALF-WINDOW)
    ED-DIS-SCREEN)

(DEFUN ED-COM-OTHER-WINDOW (IGNORE)
    (OR ED-WINDOW-HACKING-OK-P (ED-BARF "You may not hack windows now."))
    (SETQ ED-MARK-STAYS T)
    (COND ((EQ ED-WINDOW ED-MAIN-WINDOW)
	     (COND ((OR (NOT (BOUNDP 'ED-BOTTOM-HALF-WINDOW))
			(NULL (ED-WINDOW-BUFFER ED-BOTTOM-HALF-WINDOW)))
		    (ED-BARF "There is no other window -- ED-COM-OTHER-WINDOW")))
	     ;; Exchange views, buffers, etc. between main window and bottom half ("other window")
	     (ED-WINDOW-COPY-VIEW ED-MAIN-WINDOW ED-TOP-HALF-WINDOW)
	     (ED-WINDOW-COPY-VIEW ED-BOTTOM-HALF-WINDOW ED-MAIN-WINDOW)
	     (ED-WINDOW-COPY-VIEW ED-TOP-HALF-WINDOW ED-BOTTOM-HALF-WINDOW)
	     (ED-OPEN-BUFFER (ED-WINDOW-BUFFER ED-WINDOW)))
	  (T (SCREEN-SELECT-WINDOW (CAR (LAST SCREEN-ACTIVE-WINDOWS)))))
    ED-DIS-BUFFER)

(DEFUN ED-COM-ONE-WINDOW (IGNORE)
    (OR ED-WINDOW-HACKING-OK-P (ED-BARF "You may not hack windows now."))
    (AND (EQ ED-WINDOW ED-MAIN-WINDOW)
	 (ED-BARF "You are already in one-window mode.  -- ED-COM-ONE-WINDOW"))
    (COND ((MEMQ (ED-WINDOW-SCREEN-WINDOW ED-TOP-HALF-WINDOW) SCREEN-ACTIVE-WINDOWS)
	   (ED-WINDOW-COPY-VIEW ED-TOP-HALF-WINDOW ED-MAIN-WINDOW)))
    (ED-SELECT-WINDOWS ED-MAIN-WINDOW)
    ED-DIS-SCREEN)

;Copy FROM-WINDOW's buffer selection, viewspec, etc. to TO-WINDOW.
(DEFUN ED-WINDOW-COPY-VIEW (FROM-WINDOW TO-WINDOW)
    (ED-SELECT-BUFFER TO-WINDOW (ED-WINDOW-BUFFER FROM-WINDOW))
    (SETF (ED-WINDOW-VIEWSPEC TO-WINDOW)
	  (ED-WINDOW-VIEWSPEC FROM-WINDOW))
    (SETF (ED-WINDOW-VIEWED-BUFFER TO-WINDOW)
	  (ED-WINDOW-VIEWED-BUFFER FROM-WINDOW))
    (SETF (ED-WINDOW-BUFFER-ALIST TO-WINDOW)
	  (ED-WINDOW-BUFFER-ALIST FROM-WINDOW))
    (SETF (ED-WINDOW-TOP-LINE-DISPLAYED TO-WINDOW)
	  (ED-WINDOW-TOP-LINE-DISPLAYED FROM-WINDOW))
    (SETF (ED-WINDOW-BUFFERS-DISPLAYED TO-WINDOW)
	  (ED-WINDOW-BUFFERS-DISPLAYED FROM-WINDOW)))

;Select a given editor window.
(DEFUN ED-SELECT-WINDOW (WINDOW)
    (OR ED-WINDOW-HACKING-OK-P (ED-BARF "You may not hack windows now."))
    (SCREEN-SELECT-WINDOW (ED-WINDOW-SCREEN-WINDOW WINDOW)))

;Select several editor windows, deselecting all other windows.  Does not shade any previously
;selected objects, on the assumption that the whole screen will be cleared
;and redisplayed.
(DEFUN ED-SELECT-WINDOWS (&REST WINDOWS)
    (OR ED-WINDOW-HACKING-OK-P (ED-BARF "You may not hack windows now."))
    (APPLY (FUNCTION SCREEN-SELECT-WINDOWS)
	   (ITER ((STACK W WINDOWS) (LIST-OUT L LIST)) LIST
		 (SEND L (ED-WINDOW-SCREEN-WINDOW (FETCHR W))))))

;This is the handler-function for screen windows which are editor windows.
;Those screen windows are closures on the variable ED-SCREEN-WINDOW-WINDOW of this function.
(DEFUN ED-WINDOW-SCREEN-WINDOW-FUNCTION (OP &REST ARGS &AUX (WINDOW ED-SCREEN-WINDOW-WINDOW)
					    (P (ED-WINDOW-PC-PPR WINDOW)))
    (SELECTQ OP
	 (CONTAINS-POINT-P (ED-WINDOW-CONTAINS-P WINDOW (CAR ARGS) (CADR ARGS)))
	 (DISPLAYING-BUFFER-P (ASSQ (CAR ARGS) (ED-WINDOW-BUFFER-ALIST WINDOW)))
	 (DESELECT (ED-WINDOW-DESELECT WINDOW))
	 (SELECT (ED-WINDOW-SELECT WINDOW))
	 (SHADE (ED-WINDOW-SHADE WINDOW))
	 (OUTLINE (ED-OUTLINE-WINDOW WINDOW TV-ALU-IOR))
	 (UNOUTLINE (ED-OUTLINE-WINDOW WINDOW TV-ALU-ANDCA))
	 (DISPLAY (ED-WINDOW-APPROPRIATE-REDISPLAY WINDOW))
	 (ACTIVATE (SETF (ED-WINDOW-REDISPLAY-DEGREE WINDOW) ED-DIS-SCREEN)
		   (TV-ACTIVATE-PC-PPR P)
		   (ED-SET-REGION-MARKING WINDOW ED-REGION-MARKING-MODE)
		   (ED-WINDOW-RESET-BLINKER WINDOW))
	 (DEACTIVATE (TV-DEACTIVATE-PC-PPR P))
	 (WHO-ARE-YOU (FORMAT-STRING NIL "~A   ~A"
				     (ED-WINDOW-NAME WINDOW)
				     (ED-BUFFER-NAME (ED-WINDOW-BUFFER WINDOW))))
	 ((KILL MOUSE-ENTERS MOUSE-LEAVES) NIL)
	 (OVERLAPS-P (FUNCALL (CAR ARGS) 'OVERLAPS-RECTANGLE-P
			      (PC-PPR-LEFT P)
			      (PC-PPR-TOP P)
			      (PC-PPR-RIGHT P)
			      (PC-PPR-BOTTOM P)))
	 (OVERLAPS-RECTANGLE-P
	  (ED-RECTANGLES-OVERLAP-P
	    (CAR ARGS) (CADR ARGS) (CADDR ARGS) (CADDDR ARGS)
	    (PC-PPR-LEFT P)
	    (PC-PPR-TOP P)
	    (PC-PPR-RIGHT P)
	    (PC-PPR-BOTTOM P)))
	 (CONTAINS-P (FUNCALL (CAR ARGS) 'CONTAINED-IN-RECTANGLE-P
			      (PC-PPR-LEFT P)
			      (PC-PPR-TOP P)
			      (PC-PPR-RIGHT P)
			      (PC-PPR-BOTTOM P)))
	 (CONTAINED-IN-RECTANGLE-P
	  (ED-RECTANGLE-CONTAINS-RECTANGLE-P
	    (CAR ARGS) (CADR ARGS) (CADDR ARGS) (CADDDR ARGS)
	    (PC-PPR-LEFT P)
	    (PC-PPR-TOP P)
	    (PC-PPR-RIGHT P)
	    (PC-PPR-BOTTOM P)))
	 (EDGES (PROG () (RETURN
	    (PC-PPR-LEFT P)
	    (PC-PPR-TOP P)
	    (PC-PPR-RIGHT P)
	    (PC-PPR-BOTTOM P))))
	 (SET-EDGES (ED-REDEFINE-WINDOW WINDOW
			    'LEFT (CAR ARGS) 'TOP (CADR ARGS)
			    'RIGHT (CADDR ARGS) 'BOTTOM (CADDDR ARGS)))
	 (WINDOW WINDOW)
	 (COMMAND (ED-COMMAND-CHARACTER-PROCESS (CAR ARGS)))
	 (OTHERWISE (ERROR "UNRECOGNIZED SCREEN WINDOW OPERATION ON EDITOR WINDOW"
			   (CONS OP (CONS WINDOW ARGS))))))

; Makes WINDOW be the current window, and opens its buffer.
(DEFUN ED-WINDOW-SELECT (WINDOW &AUX BP MUST-CLEAR)
    (COND ((EQ ED-WINDOW WINDOW))
	  (T
	   (TV-SET-BLINKER-VISIBILITY (ED-WINDOW-POINT-BLINKER WINDOW) 'BLINK)
	   (SETQ ED-WINDOW WINDOW)
	   (SETQ ED-REDISPLAY-LOSES T)
	   (ED-OPEN-BUFFER (ED-WINDOW-BUFFER WINDOW))
	   (COND ((AND (SETQ BP (ED-WINDOW-SAVED-BP WINDOW))
		       (EQ (ED-BP-BUFFER BP) (ED-WINDOW-BUFFER WINDOW)))
		  (ED-MOVE-POINT BP)
		  (SETF (ED-LINE-BUFFER-POINTER-LIST (ED-BP-LINE BP))
			(DELQ BP (ED-LINE-BUFFER-POINTER-LIST (ED-BP-LINE BP)))))))))

(DEFUN ED-WINDOW-DESELECT (WINDOW)
    (ED-WINDOW-SAVE-BP WINDOW)
    (ED-WINDOW-RESET-BLINKER WINDOW))

;Reset the point blinker's visibility for a window which is active.
(DEFUN ED-WINDOW-RESET-BLINKER (WINDOW)
    (TV-SET-BLINKER-VISIBILITY (ED-WINDOW-POINT-BLINKER WINDOW)
			       (COND ((EQ (ED-WINDOW-SCREEN-WINDOW WINDOW )
					  SCREEN-SELECTED-WINDOW)
				      'BLINK)
				     ((ED-WINDOW-SAVED-BP WINDOW)
				      (ED-WINDOW-1-A (ED-WINDOW-SAVED-BP WINDOW)
						     WINDOW))
				     (T NIL))))

(DEFUN ED-WINDOW-SAVE-BP (W)
    (SETF (ED-WINDOW-SAVED-BP W)
	  (ED-COPY-BP (ED-BUFFER-POINT (ED-WINDOW-BUFFER W)) 'NORMAL)))

(DEFUN ED-WINDOW-SHADE (W &AUX P)
    (SETQ P (ED-WINDOW-PC-PPR W))
    (TV-OPEN-PC-PPR P 'ED-WINDOW-SHADE-INTERNAL P))

(DEFUN ED-WINDOW-SHADE-INTERNAL (P &AUX (B (PC-PPR-BOTTOM-MARGIN P))
				        (R (PC-PPR-RIGHT-MARGIN P)))
    (DO Y (PC-PPR-TOP-MARGIN P) (+ Y 3) (>= Y B)
      (DO X (+ (PC-PPR-LEFT-MARGIN P) (LOGAND Y 3)) (+ X 3) (>= X R)
	 (AS-2 1 TV-BUFFER X Y))))

;Do the two rectangles A and B overlap?  Each is given as
;the upper left corner co-ordinates followed by the lower left corner.
(DEFUN ED-RECTANGLES-OVERLAP-P (A-X1 A-Y1 A-X2 A-Y2 B-X1 B-Y1 B-X2 B-Y2)
    (NOT (OR (< A-X2 B-X1)
	     (< B-X2 A-X1)
	     (< A-Y2 B-Y1)
	     (< B-Y2 A-Y1))))

;Does the rectangle A contain the rectangle B?  Each is given as
;the upper left corner co-ordinates followed by the lower left corner.
(DEFUN ED-RECTANGLE-CONTAINS-RECTANGLE-P (A-X1 A-Y1 A-X2 A-Y2 B-X1 B-Y1 B-X2 B-Y2)
    (AND (<= A-X1 B-X1)
	 (>= A-X2 B-X2)
	 (<= A-Y1 B-Y1)
	 (>= A-Y2 B-Y2)))

(DEFUN ED-WINDOW-CONTAINS-P (W X Y &AUX (P (ED-WINDOW-PC-PPR W)))
   (NOT (OR (< Y (- (PC-PPR-TOP-MARGIN P) 2))
	    (> Y (+ (PC-PPR-BOTTOM-MARGIN P) 2))
	    (AND X (< X (- (PC-PPR-LEFT-MARGIN P) 2)))
	    (AND X (> X (+ (PC-PPR-RIGHT-MARGIN P) 2))))))


(COMMENT MULTIPLE BUFFER HACKING)

;;; This is used when VISIBLY changing the open buffer: only when the user will see it.
;;; Don't use this if you are changing ed-open-buffer temporarily or for internal
;;; reasons such as mini-buffer stuff.
(DEFUN ED-OPEN-BUFFER (BUFFER &AUX TEM)
    (OR (EQ BUFFER ED-OPEN-BUFFER)
	(SETQ ED-PREVIOUS-OPEN-BUFFER ED-OPEN-BUFFER))
    (SETQ ED-OPEN-BUFFER BUFFER)
    (AND (SETQ TEM (ED-BUFFER-PATHNAME))
	 (SETQ ED-DEFAULT-FILE-NAME (STRING TEM)))
    BUFFER)


; The BUFFER-BLINKER-ALIST contains elements of the form  A = (BP BLINK-FUNCTION VISIBILITY).
; The WINDOW-OTHER-BLINKERS contains elements of the form B = (BP BLINKER VISIBILITY).

(DEFUN ED-SELECT-BUFFER (WINDOW BUFFER &AUX A B TEM BLINKER)
    (SETF (ED-WINDOW-BUFFER WINDOW) BUFFER)
    (OR (ASSQ BUFFER (ED-WINDOW-BUFFER-ALIST WINDOW))
        (PROGN (SETF (ED-WINDOW-VIEWSPEC WINDOW) NIL)
               (SETF (ED-WINDOW-VIEWED-BUFFER WINDOW) BUFFER)
               (SETF (ED-WINDOW-BUFFERS-DISPLAYED WINDOW) NIL)
               (SETF (ED-WINDOW-BUFFER-ALIST WINDOW) (LIST (NCONS BUFFER)))))
    (SETQ TEM (ED-WINDOW-OTHER-BLINKERS WINDOW))
    (DO J TEM (CDR J) (NULL J)
      (TV-SET-BLINKER-VISIBILITY (SECOND (CAR J)) NIL)
      (RPLACA (REST2 (CAR J)) NIL))
    (DO L (ED-BUFFER-BLINKER-ALIST BUFFER) (CDR L) (NULL L)
      (SETQ A (CAR L))
      (AND (THIRD A)
	   (NOT (DO J TEM (CDR J) (NULL J)
		  (SETQ B (CAR J))
		  (COND ((EQ (FIRST A) (FIRST B))		;IF THEY HAVE THE SAME BP
			 (COND ((EQ (SECOND A)
				    (TV-BLINKER-FUNCTION (SECOND B)))
				(TV-SET-BLINKER-VISIBILITY (SECOND B) (THIRD A))
				(RPLACA (REST2 B) (THIRD A))
				(RETURN T))
			       (T
				(SETQ TEM (DELQ J TEM))))))))	;ALLOW ONLY ONE BLINKER ON A BP
	   (SETQ BLINKER (TV-DEFINE-BLINKER (ED-WINDOW-PC-PPR WINDOW)
					    'FUNCTION (SECOND A)
					    'VISIBILITY (THIRD A)))
	   (SETQ TEM (CONS (LIST (FIRST A) BLINKER (THIRD A))
			   TEM))))
    (SETF (ED-WINDOW-OTHER-BLINKERS WINDOW) TEM))

;; (Can't call ED-GET-BUFFER-BY-NAME because IMPOSSIBLE-IS-OK.)
(DEFUN ED-COM-SELECT-BUFFER (CHR)
    (ED-SELECT-BUFFER-READING-NAME "Select buffer:"))

;; Call this on a prompt.  Selects a buffer as the current one and opens it,
;; or doesn't if user quits out.  Returns a redisplay degree.
(DEFUN ED-SELECT-BUFFER-READING-NAME (PROMPT &AUX TEM TEM1 RET)
    (MULTIPLE-VALUE (TEM TEM1)
       (ED-COMPLETING-READ-PROMPT PROMPT ED-BUFFER-MODE-LIST ED-BUFFER-ALIST
                                  ED-COMMAND-STREAM T T ED-DISPLAY-PC-PPR))
    (SETQ ED-REDISPLAY-LOSES T)
    (SETQ ED-MARK-STAYS T)
    (COND ((NULL TEM) (TV-BEEP) ED-DIS-NONE)		;Quit.
	  ((ZEROP TEM) ED-DIS-NONE)			;Over-rubout.
	  ((STRINGP TEM)
	   (ED-SELECT-BUFFER ED-WINDOW
			     (ED-OPEN-BUFFER 
			      (COND ((ZEROP (ARRAY-ACTIVE-LENGTH TEM))
                                     (OR ED-PREVIOUS-OPEN-BUFFER (ED-BARF))
				     ED-PREVIOUS-OPEN-BUFFER)
				    (T (ED-CREATE-BUFFER (INTERN TEM))))))
	   ED-DIS-BUFFER)
	  (T (ED-SELECT-BUFFER ED-WINDOW (ED-OPEN-BUFFER (CDR TEM)))
	     ED-DIS-BUFFER
	     )))

(DEFUN ED-COM-RENAME-BUFFER (CHR &AUX TEM)
    (ED-BIND-MODE-LINE "Rename buffer:" ED-BUFFER-MODE-LIST
	     (TV-SET-CURSORPOS ED-ECHO-PC-PPR 0 0)
	     (SETQ TEM (ED-SIMPLE-READER ED-ECHO-PC-PPR))
	     ;(TV-SET-BLINKER-VISIBILITY MOUSE-BLINKER ED-MOUSE-VISIBILITY)
	     (COND ((NULL TEM) (ED-BARF))
		   ((GET (SETQ TEM (INTERN TEM)) 'ED-BUFFER)
		    (ED-BARF "That name has already been used."))
		   (T (ED-RENAME-BUFFER ED-OPEN-BUFFER TEM))))
    (SETQ ED-REDISPLAY-LOSES T)
    (SETQ ED-MARK-STAYS T)
    ED-DIS-NONE) 
 
(DEFUN ED-COM-LIST-BUFFERS (CHR)
    (TV-CLEAR-PC-PPR ED-DISPLAY-PC-PPR)
    (FORMAT-STRING  ED-DISPLAY-STREAM
                    "~%Buffers in EINE:~%  Buffer name:        File name:~2%")
    (DO L ED-BUFFER-ALIST (CDR L) (NULL L)
      (FORMAT-STRING ED-DISPLAY-STREAM "  ~A  " (CAAR L))
      (DO I (+ 4 (FLATC (CAAR L))) (1+ I) (AND (>= I 30) (= (\ (- I 30) 10) 0))
	  (PRINC '/  ED-DISPLAY-STREAM))
      (PRINC (ED-BUFFER-PATHNAME (CDAR L)) ED-DISPLAY-STREAM)
      (TERPRI ED-DISPLAY-STREAM))
    (SETQ ED-SPECIAL-SCREEN-P T)
    ED-DIS-NONE)
