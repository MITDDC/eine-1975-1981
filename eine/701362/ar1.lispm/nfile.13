;;; This file is part of EINE, the Lisp Machine editor.        -*-LISP-*-
;;; For more information see LISPM2;EINE INFO.

;; This file contains functions for file and other input/output operations.

(DECLARE (SETQ RETAIN-VARIABLE-NAMES-SWITCH 'ARGS))
(DECLARE (SETQ OPEN-CODE-MAP-SWITCH T))
(ENDF HEAD)

(DEFSTRUCT (ED-SECTION ARRAY NAMED-STRUCTURE)
     ED-SECTION-NSS
     ED-SECTION-NAME
     ED-SECTION-BUFFER
     ED-SECTION-FILE
     ED-SECTION-START
     ED-SECTION-SIZE
     )

(DEFSTRUCT (ED-FILE ARRAY NAMED-STRUCTURE)
     ED-FILE-NSS
     ED-FILE-NAME
     ED-FILE-ID
     ED-FILE-BUFFER	   ;Only for FILE type.
     ED-FILE-SECTION-LIST  ;Only for SECTION type.
     )

(DEFSTRUCT (ED-BUFFER (CONSTRUCTOR ED-MAKE-BUFFER)
		      NAMED-STRUCTURE
		      (DEFAULT-POINTER ED-OPEN-BUFFER)
		      ARRAY-LEADER)
	(ED-BUFFER-FILL-POINTER 0)	; The fill-pointer. (Buffer length.)
	(ED-BUFFER-FUNCTION		; The named-structure-function.
	 'ED-BUFFER)
	ED-BUFFER-NAME			; (A symbol.)
	(ED-BUFFER-POINT		; The point.
	 (ED-BP 0 LINE 'NORMAL))
	(ED-BUFFER-MARK			; The mark.
	 (ED-BP 0 LINE 'NORMAL))
	ED-BUFFER-POINT-PDL		; The mark pdl.
	ED-BUFFER-MARK-P		; Is there a mark at the moment?
	ED-BUFFER-PATHNAME		; NIL, or a file-symbol.
	ED-BUFFER-WRITTEN-P		; --FLUSH!!--
	(ED-BUFFER-STREAM		; A buffer stream for this buffer.
	 (ED-MAKE-BUFFER-STREAM (ED-BP 0 LINE 'NORMAL)))
	ED-BUFFER-BLINKER-ALIST		; (BP BLINK-FUNCTION VISIBILITY) list.
        				;  Does not include the point blinker.
	(ED-BUFFER-BOB-BP		; A BP pointing to the beg of buffer.
	 (ED-BP 0 LINE 'NORMAL))
	(ED-BUFFER-EOB-BP		; A BP pointing to the end of buffer.
	 (ED-BP 0 LINE 'MOVES))
	(ED-BUFFER-PLIST		; --FLUSH!!--
	 (NCONS NIL))
	(ED-BUFFER-TYPE NIL)		; One of the symbols NIL, FILE or SECTION.
	ED-BUFFER-CHILDREN		; Subnodes of this node, a la NLS.  A list of buffers.
	ED-BUFFER-FATHER		; Superior of this node (a buffer), or NIL.
	(ED-BUFFER-PACKAGE		; The package of the function(s) in this buffer.
	 PKG-TYPE-IN-PACKAGE)
	)



;; Read a filename from the minibuffer, and return a file symbols for it.
;; PROMPT and DEFAULT-FN2 do the obvious things.
(DEFUN ED-GET-FILE-SYMBOL (PROMPT &OPTIONAL (DEFAULT-FN2 ">"))
    (SETQ NAME (LET ((ED-KILL-RING `(,ED-LAST-FILE-NAME-TYPED-IN
				     ,ED-DEFAULT-FILE-NAME
				     . ,ED-KILL-RING)))
		 (ED-GET-STRING-FROM-MINI-BUFFER PROMPT ED-FILE-NAME-MODE-LIST)))
    (SETQ NAME
	  (COND ((EQUAL NAME "")
		 ED-DEFAULT-FILE-NAME)
		(T (FILE-DEFAULT-FILENAMES (FILE-DEFAULT-FN2 NAME DEFAULT-FN2)))))
    (SETQ ED-LAST-FILE-NAME-TYPED-IN NAME)
    (INTERN NAME PKG-FILE-PACKAGE))

;; Create a new buffer named BUFFER-NAME, and read into it from
;; STREAM, closing STREAM.  Returns the new buffer.
;; (Called by ED-READ-SECTION-OF-FILE and ED-LOAD-WHOLE-FILE.)
(DEFUN ED-READ-IN-BUFFER (STREAM BUFFER-NAME &AUX ED-OPEN-BUFFER)
    (SETQ ED-OPEN-BUFFER (ED-CREATE-BUFFER BUFFER-NAME))
    (ED-INSERT-FILE NIL STREAM)
    ED-OPEN-BUFFER)

(DEFUN ED-INSERT-FILE (FILE &OPTIONAL STREAM)
    (OR STREAM
	(SETQ STREAM (OPEN (STRING FILE) '(READ))))
    (FUNCALL (ED-BUFFER-STREAM) 'INITIALIZE (ED-BUFFER-POINT))
    (STREAM-COPY-UNTIL-EOF STREAM
			   (ED-BUFFER-STREAM)
			   (GET 'ED-LINE 'DEFSTRUCT-SIZE))
    (PROG1 (STRING-APPEND (FILE-COMMAND "ININFO"))
	   (CLOSE STREAM)))

(DEFUN ED-COM-INSERT-FILE (CHR)
    (ED-INSERT-FILE (ED-GET-FILE-SYMBOL "Insert file:"))
    ED-DIS-BUFFER)

;; Given a file symbol, make sure that this file is not being
;; edited in one buffer, and read in its "directory".
(DEFUN ED-ASSURE-FILE-SCANNED (FILE-SYMBOL)
    (AND (GET FILE-SYMBOL 'ED-FILE-BUFFER)
	 (ED-BARF "The file " FILE-SYMBOL
		  " is being edited in the buffer "
		  (ED-BUFFER-NAME (GET FILE-SYMBOL 'ED-FILE-BUFFER))))
    (OR (GET FILE-SYMBOL 'ED-FILE-SECTION-LIST)
	(ED-SCAN-FILE FILE-SYMBOL))
    NIL)

;; Takes a file symbol, and creates its section list.  All ED-SECTION-BUFFERs are
;; initialized to NIL.  It sets up the file symbol's ED-FILE-ID, ED-FILE-TICK,
;; and ED-FILE-SECTION-LIST properties, and adds the file symbol to ED-FILE-LIST.

(DEFUN ED-SCAN-FILE (FILE-SYMBOL &AUX (FILE-STRING (STRING FILE-SYMBOL))
				      (IBASE 10.) TEM ID FILLEN)
  (PKG-BIND (PKG-FIND-FILE-PACKAGE FILE-STRING)
    (FILE-COMMAND-CAREFUL "MAPRD " FILE-STRING)
    (SETQ ID (STRING-APPEND (FILE-COMMAND "MAPINFO"))
	  FILLEN (READ-FROM-STRING (ED-GET-FIELD ID 3)))
    (DO ((STRING (FILE-COMMAND "NEXTDEF 0")
		 (FILE-COMMAND "NEXTDEF " (FORMAT-STRING NIL "~D" POS)))
	 (POS 0)	; Our current position in the file.
	 (SECTION)	; The section structure.
	 (START)	; The START char-pos of this section.
	 (SIZE)		; The SIZE in chars of this section.
	 (NAME)		; The section-symbol.
	 (SLIST NIL))	; The ED-FILE-SECTION-LIST.
	((STRING-EQUAL "FUNCTION NOT FOUND" STRING)
	 (COND ((NOT (= POS FILLEN))
		(PUSH (ED-MAKE-SECTION ED-SECTION-NAME
				            (ED-SECTION-BUFFER-NAME "END-OF" FILE-SYMBOL)
					    ED-SECTION-START POS
					    ED-SECTION-SIZE (- FILLEN POS)
					    ED-SECTION-FILE FILE-SYMBOL)
		      SLIST)))
	 (PUTPROP FILE-SYMBOL (REVERSE SLIST) 'ED-FILE-SECTION-LIST))
      (MULTIPLE-VALUE (START TEM) (READ-FROM-STRING STRING))
      (MULTIPLE-VALUE (SIZE TEM) (READ-FROM-STRING STRING TEM))
      (MULTIPLE-VALUE (NAME TEM) (READ-FROM-STRING STRING TEM))
      (SETQ POS (+ POS SIZE))
      (PUSH (ED-MAKE-SECTION ED-SECTION-NAME  NAME
			     ED-SECTION-START START
			     ED-SECTION-SIZE  SIZE
			     ED-SECTION-FILE  FILE-SYMBOL
			     )
	    SLIST))
    (PUTPROP FILE-SYMBOL ID 'ED-FILE-ID)
    (PUSH FILE-SYMBOL ED-FILE-LIST)
    (FILE-COMMAND "MAPFLS")
    NIL))

(DEFUN ED-COM-EDIT-DEFINITION (CHR &AUX SYMBOL)
    (ED-EDIT-DEFINITION (ED-GET-STRING-FROM-MINI-BUFFER "Name of function or section:")))

;; ED-EDIT-DEFINITION takes a section name, and tries to edit
;; that section.
(DEFUN ED-EDIT-DEFINITION (SECTION &AUX SECTION-LIST)
    (SETQ SECTION (STRING SECTION))

    ;; Let SECTION-LIST be a list of all sections with this name.
    (DO FL ED-FILE-LIST (CDR FL) (NULL FL)
      (DO SL (GET (CAR FL) 'ED-FILE-SECTION-LIST) (CDR SL) (NULL SL)
	(COND ((STRING-EQUAL SECTION (ED-SECTION-NAME (CAR SL)))
	       (PUSH (CAR SL) SECTION-LIST)))))

    (COND ((NULL SECTION-LIST)
	   (LET ((FILE (OR (GET (INTERN SECTION ED-PACKAGE)
				'ED-DEFINING-FILE)
			   (ED-GET-FILE-SYMBOL (FORMAT-STRING NIL "Read ~S from which file? "
							      SECTION)))))
	     (ED-ASSURE-FILE-SCANNED FILE)
	     (DO ((SL (GET FILE 'ED-FILE-SECTION-LIST) (CDR SL)))
		 ((NULL SL)
		  (ED-BARF (FORMAT-STRING NIL "Couldn't find section ~S in file ~A."
					  SECTION (GET-PNAME FILE))))
	       (COND ((STRING-EQUAL SECTION (ED-SECTION-NAME (CAR SL)))
		      (ED-SELECT-SECTION (CAR SL))
		      (RETURN NIL))))))
	  ((NULL (CDR SECTION-LIST))
	   (ED-SELECT-SECTION (CAR SECTION-LIST))
	   (RETURN NIL))
	  (T
	   ;; There are several sections with this name
	   (ED-SELECT-SECTION (CAR SECTION-LIST))	;KLUDGE!   ?????
	   (RETURN NIL))))

;; Given a section, select its buffer as the current buffer.
(DEFUN ED-SELECT-SECTION (SECTION)
    (OR (ED-SECTION-BUFFER SECTION)
	(ED-READ-SECTION SECTION))
    (ED-SELECT-BUFFER ED-WINDOW (ED-OPEN-BUFFER (ED-SECTION-BUFFER SECTION))))

;; Read in a buffer for this section.
(DEFUN ED-READ-SECTION (SECTION &AUX FILE STREAM BUFFER BUFNAME)
    (SETQ FILE (ED-SECTION-FILE SECTION))
    (ED-VERIFY-FILE FILE)
    (AND (ED-SECTION-BUFFER SECTION)	;?????
	 (ERROR "Already read in?? -- ED-READ-SECTION" SECTION))

    ;; Decide on the name of the buffer.
    (SETQ BUFNAME
	  (COND ((ASSOC SECTION ED-BUFFER-ALIST)
		 (ED-SECTION-BUFFER-NAME SECTION FILE))
		(T SECTION)))

    ;; Read the section into a buffer.
    (SETQ STREAM (FILE-MAPPED-OPEN (STRING FILE)))
    (FILE-COMMAND (FORMAT-STRING NIL "MAPSET ~D ~D"
				 (ED-SECTION-START SECTION)
				 (ED-SECTION-SIZE SECTION)))
    (SETQ BUFFER (ED-READ-IN-BUFFER STREAM BUFNAME))
    (FILE-COMMAND "MAPFLS")

    ;; Set up attributes of the buffer.
    (SETF (ED-BUFFER-TICK BUFFER) (ED-TICK))
    (SETF (ED-BUFFER-TYPE BUFFER) 'SECTION)
    (SETF (ED-BUFFER-PATHNAME BUFFER) FILE)
    (SETF (ED-BUFFER-SECTION BUFFER) SECTION)
    BUFFER)


;; Given a section name and a file name (symbol or string), create a new
;; string made to look like  section-fn1-fn2-dev:-sname;
(DEFUN ED-SECTION-BUFFER-NAME (SECTION FILE-NAME &AUX TEM I)
    (SETQ SECTION (STRING SECTION) FILE-NAME (STRING FILE-NAME))
    (SETQ I (STRING-SEARCH " " FILE-NAME (1+ (STRING-SEARCH " " FILE-NAME))))
    (SETQ TEM (STRING-APPEND SECTION "-"
			     (NSUBSTRING FILE-NAME (1+ I) (STRING-LENGTH FILE-NAME))
			     "-" (NSUBSTRING FILE-NAME 0 I)))
    (AS-1 ## - TEM (STRING-SEARCH " " TEM))
    (AS-1 ## - TEM (STRING-SEARCH " " TEM))
    TEM)

;; ???? This sucks.
;; Make sure that nobody has changed this file behind our backs.
(DEFUN ED-VERIFY-FILE (FILE &AUX OUR-ID REAL-ID)
    (COND ((SETQ OUR-ID (GET FILE 'ED-FILE-ID))
	   (FILE-COMMAND "MAPRD " (STRING FILE))
	   (SETQ REAL-ID (STRING-APPEND (FILE-COMMAND "MAPINFO")))
	   (FILE-COMMAND "MAPFLS")
	   (OR (STRING-EQUAL OUR-ID REAL-ID)
	       (ERROR " has been modified on the file computer." FILE)))))



(DEFUN ED-MAKE-BUFFER-FILE-TYPE (BUFFER FILE-SYMBOL ID)
    (SETF (ED-BUFFER-PATHNAME BUFFER) FILE-SYMBOL)
    (SETF (ED-BUFFER-TYPE BUFFER) 'FILE)
    (SETF (ED-BUFFER-PACKAGE ED-OPEN-BUFFER) (PKG-FIND-FILE-PACKAGE (STRING FILE)))
    (SETF (ED-BUFFER-TICK) (ED-TICK))

    (PUTPROP FILE BUFFER 'ED-FILE-BUFFER)
    (PUTPROP FILE ID 'ED-FILE-ID)
    (PUSH FILE ED-FILE-LIST)

    (SETQ ED-DEFAULT-FILE-NAME (STRING FILE-SYMBOL))
    )

(DEFUN ED-COM-READ-FROM-FILE (CHR &AUX FILE NAME)
    (SETQ FILE (ED-GET-FILE-SYMBOL "Read from file:"))
    (AND (MEMQ FILE ED-FILE-LIST)
	 (ED-BARF "The file " (STRING FILE) " is already being edited."))
    (ED-DEACTIVATE-BUFFER ED-OPEN-BUFFER)
    (ED-MAKE-BUFFER-FILE-TYPE ED-OPEN-BUFFER FILE (ED-INSERT-FILE FILE))
    ED-DIS-BUFFER)

(DEFUN ED-COM-FIND-FILE (CHAR &AUX FILE BUFFER)
    (SETQ FILE (ED-GET-FILE-SYMBOL "Find file:"))
    (COND ((MEMQ FILE ED-FILE-LIST)
	   (SETQ BUFFER (GET FILE 'ED-FILE-BUFFER))
	   (OR BUFFER (ED-BARF "That file is being edited in sections."))
	   (ED-SELECT-BUFFER ED-WINDOW (ED-OPEN-BUFFER BUFFER)))
	  (T (SETQ NAME (ED-GET-NEW-BUFFER-NAME (ED-GET-FN1 FILE)))
	     (LET ((TEM (ASSOC NAME ED-BUFFER-ALIST)))
	       (AND TEM (ED-DEACTIVATE-BUFFER (CDR TEM))))
		(ED-SELECT-BUFFER ED-WINDOW (ED-OPEN-BUFFER (ED-CREATE-BUFFER NAME)))
		(ED-MUST-REDISPLAY ED-DIS-BUFFER)	; See note...
		(ED-MAKE-BUFFER-FILE-TYPE ED-OPEN-BUFFER FILE (ED-INSERT-FILE FILE))
		))
    ED-DIS-BUFFER)
;; This is a kludge so that if the ed-insert-file gets a file sys
;; error from ITS, the redisplay will happen anyway.

(DEFUN ED-GET-NEW-BUFFER-NAME (TRY)
    (DO ((TEM))
	((NULL (ASSOC TRY ED-BUFFER-ALIST))
	 TRY)
      (SETQ TEM (ED-GET-STRING-FROM-MINI-BUFFER
       (FORMAT NIL "A buffer named ~S already exists.  What buffer name should I user?" NAME)))
      (AND (EQUAL TEM "") (RETURN TRY))
      (SETQ TRY TEM)))

(DEFUN ED-COM-WRITE-TO-FILE (CHR &OPTIONAL (MSG "Write to file:"))
    (AND (EQ (ED-BUFFER-TYPE) 'SECTION)
	 (ED-BARF "This buffer contains a section of a file."))
    (ED-WRITE-TO-FILE (ED-GET-DEFAULTED-FILE-NAME MSG))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-NONE)

(DEFUN ED-COM-SAVE-BUFFER (CHR &AUX TYPE)
    (SETQ TYPE (ED-BUFFER-TYPE))
    (SELECTQ TYPE
	(NIL     (ED-COM-WRITE-TO-FILE NIL "Save to file:"))
	(FILE    (ED-UPDATE-FILE (ED-BUFFER-PATHNAME)))
	(SECTION (ED-UPDATE-FILE (ED-BUFFER-PATHNAME))))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-NONE)

(DEFUN ED-WRITE-TO-FILE (FILE-SYMBOL &OPTIONAL (BUFFER ED-OPEN-BUFFER)
				     &AUX STREAM (ED-OPEN-BUFFER BUFFER))
    (SETQ STREAM (OPEN (STRING FILE-SYMBOL) '(WRITE)))
    (FUNCALL (ED-BUFFER-STREAM) 'INITIALIZE)
    (STREAM-COPY-UNTIL-EOF (ED-BUFFER-STREAM) STREAM)	   
    (CLOSE STREAM)

    (ED-MAKE-BUFFER-FILE-TYPE ED-OPEN-BUFFER FILE-SYMBOL
			      (STRING-APPEND (FILE-COMMAND "OUTINFO")))
    (ED-ECHO-MESSAGE "Written: ~A" (FILE-COMMAND "OUTRFN"))
    )
