;;; This file is part of EINE, the Lisp Machine editor.        -*-LISP-*-
;;; For more information see LISPM2;EINE INFO.

;; This file contains functions for moving bps.

(DECLARE (SETQ RETAIN-VARIABLE-NAMES-SWITCH 'ARGS))
(DECLARE (SETQ OPEN-CODE-MAP-SWITCH T))

; ED-MOVE-BP takes a buffer pointer, a line number and a char pos, and
;causes the buffer pointer to point there.  The bp is assumed to be permanent
;will be delqed and installed as appropriate.  If there is only one arg, it is
;a bp and the given bp will be moved to there.

(DEFUN ED-MOVE-BP (BP LINE-NUM &OPTIONAL CHAR-POS &AUX LINE NEW-LINE)
       (OR LINE-NUM (ED-BARF))
       (COND ((LISTP LINE-NUM)
	      (SETQ CHAR-POS (ED-BP-CHAR-POS LINE-NUM)
		    LINE-NUM (ED-BP-LINE-NUM LINE-NUM))))
       (COND ((>= LINE-NUM (ED-BUFFER-FILL-POINTER))
	      (ED-BARF LINE-NUM " is not a valid line number -- ED-MOVE-BP")))
       (SETQ LINE (ED-BP-LINE BP)
	     NEW-LINE (AR-1 ED-OPEN-BUFFER LINE-NUM))
       (COND ((> CHAR-POS (ED-LINE-FILL-POINTER NEW-LINE))
	      (ED-BARF CHAR-POS " is not a valid character position --  ED-MOVE-BP"))
	     ((= LINE-NUM (ED-LINE-NUMBER LINE))		; ARE WE ALREADY ON THAT LINE?
	      (SETF (ED-BP-CHAR-POS BP) CHAR-POS))		;   YES, EASY
	     (T
	      (COND ((NEQ (ED-BP-STATUS BP) 'TEMP)
		     (SETF (ED-LINE-BUFFER-POINTER-LIST LINE)
			   (DELQ BP (ED-LINE-BUFFER-POINTER-LIST LINE)))
		     (SETF (ED-LINE-BUFFER-POINTER-LIST NEW-LINE)
			   (CONS BP (ED-LINE-BUFFER-POINTER-LIST NEW-LINE)))))
	      (SETF (ED-BP-LINE BP) NEW-LINE)
	      (SETF (ED-BP-CHAR-POS BP) CHAR-POS)))
       BP)

; The macro ED-MOVE-POINT is in the EDD file.

(DEFUN ED-PERMANIZE-BP (BP)
    (SETF (ED-LINE-BUFFER-POINTER-LIST (ED-BP-LINE BP))
	  (CONS BP (ED-LINE-BUFFER-POINTER-LIST (ED-BP-LINE BP))))
    BP)


; ED-MOVE-BP-FORWARD moves BP forward by NUM characters.
; Returns BP, or NIL if it goes off the end.
(DEFUN ED-MOVE-BP-FORWARD (BP NUM &AUX LINE-NUM CHAR-POS EOB-LINE-NUM EOB-CHAR-POS)
   (SETQ LINE-NUM (ED-BP-LINE-NUM BP))
   (SETQ CHAR-POS (ED-BP-CHAR-POS BP))
   (SETQ EOB-LINE-NUM (1- (ED-BUFFER-FILL-POINTER)))
   (SETQ EOB-CHAR-POS (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER EOB-LINE-NUM)))

   (COND ((ZEROP NUM) BP)
	 ((AND (= LINE-NUM EOB-LINE-NUM)		     ; IF WE START AT THE END
	       (= CHAR-POS EOB-CHAR-POS))
	  NIL)
	 (T
	  (PROG (LINE-LENGTH DEST-CHAR-POS)
	   LOOP (SETQ LINE-LENGTH (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER LINE-NUM)))
		(SETQ DEST-CHAR-POS (+ CHAR-POS NUM))
	        (COND ((<= DEST-CHAR-POS LINE-LENGTH)     ;IF WE CAN DO IT ON THIS LINE
		       (ED-MOVE-BP BP LINE-NUM DEST-CHAR-POS)
		       (RETURN BP)))
		
		(SETQ NUM (- NUM (1+ (- LINE-LENGTH CHAR-POS))))   ;TAKE OFF ONE FOR "NEWLINE"
		
		(SETQ LINE-NUM (1+ LINE-NUM))
		(AND (> LINE-NUM EOB-LINE-NUM)
		     (GO EOB))
		(SETQ CHAR-POS 0)
		(GO LOOP)

	    EOB (ED-MOVE-BP BP EOB-LINE-NUM EOB-CHAR-POS)    ;GOTO END OF BUFFER
	        (RETURN BP)))))

; ED-MOVE-BP-BACKWARD moves BP backward by NUM characters.
; Returns BP, or NIL if it goes off the end.
(DEFUN ED-MOVE-BP-BACKWARD (BP NUM &AUX LINE-NUM CHAR-POS)
   (SETQ LINE-NUM (ED-BP-LINE-NUM BP))
   (SETQ CHAR-POS (ED-BP-CHAR-POS BP))

   (COND ((ZEROP NUM) BP)
	 ((AND (= LINE-NUM 0)				; IF WE START AT THE BEGINNING
	       (= CHAR-POS 0))
	  NIL)
	 (T
	  (PROG (DEST-CHAR-POS)
	   LOOP (SETQ DEST-CHAR-POS (- CHAR-POS NUM))
		(COND ((>= DEST-CHAR-POS 0)		;IF WE CAN DO IT ON THIS LINE
		       (ED-MOVE-BP BP LINE-NUM DEST-CHAR-POS)
		       (RETURN BP)))

		(SETQ NUM (- NUM (1+ CHAR-POS)))	;TAKE OFF ONE FOR "NEWLINE"

		(SETQ LINE-NUM (1- LINE-NUM))
		(AND (< LINE-NUM 0)
		     (GO BOB))				; (BEGINNING OF BUFFER)
		(SETQ CHAR-POS (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER LINE-NUM)))
		(GO LOOP)

	    BOB (ED-MOVE-BP BP 0 0)
	        (RETURN BP)))))

(DEFUN ED-COM-FORWARD (CHR)
    (OR (ED-MOVE-BP-FORWARD (ED-BUFFER-POINT) ED-NUMERIC-ARG)
	(ED-BARF))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BPS)

(DEFUN ED-COM-BACKWARD (CHR)
    (OR (ED-MOVE-BP-BACKWARD (ED-BUFFER-POINT) ED-NUMERIC-ARG)
	(ED-BARF))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BPS)

(DEFUN ED-COM-DOWN (CHR &AUX DEST BUFFER-LENGTH)
    (SETQ DEST (+ (ED-BP-LINE-NUM (ED-BUFFER-POINT)) ED-NUMERIC-ARG)
	  BUFFER-LENGTH (1- (ED-BUFFER-FILL-POINTER)))
    (COND ((> DEST BUFFER-LENGTH)			; ARE WE TRYING TO GO OFF THE END?
	   (COND ((> ED-NUMERIC-ARG 1)			; ARG > 1?
                  (ED-MOVE-POINT BUFFER-LENGTH (ED-LINE-FILL-POINTER 
                                                (AR-1 ED-OPEN-BUFFER BUFFER-LENGTH))))
		 (T					; NO, MAKE NEW LINE.
		  (ED-MOVE-POINT (ED-INSERT-CRS (ED-BUFFER-EOB-BP) 1)))))
	  (T (ED-MOVE-POINT DEST 0)))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BPS)
	   
(DEFUN ED-COM-UP (CHR &AUX DEST)
   (SETQ DEST (- (ED-BP-LINE-NUM (ED-BUFFER-POINT)) ED-NUMERIC-ARG))
   (COND ((MINUSP DEST)
	  (ED-MOVE-POINT 0 0))
	 (T (ED-MOVE-POINT DEST 0)))
   (SETQ ED-MARK-STAYS T)
   ED-DIS-BPS)

(DEFUN ED-COM-DOWN-REAL-LINE (CHR &AUX DEST BUFFER-LENGTH TEM PC-PPR)
    (SETQ DEST (+ (ED-BP-LINE-NUM (ED-BUFFER-POINT)) ED-NUMERIC-ARG)
          BUFFER-LENGTH (1- (ED-BUFFER-FILL-POINTER))
          PC-PPR (ED-WINDOW-PC-PPR ED-WINDOW)
          ED-CURRENT-COMMAND-TYPE 'REAL-MOVE)
    (COND ((> DEST BUFFER-LENGTH)
           (COND ((> ED-NUMERIC-ARG 1)   ;THEN GO TO END OF BUFFER
                  (ED-MOVE-POINT BUFFER-LENGTH (ED-LINE-FILL-POINTER 
                                                (AR-1 ED-OPEN-BUFFER BUFFER-LENGTH))))
                 (T (ED-MOVE-POINT (ED-INSERT-CRS (ED-BUFFER-EOB-BP) 1)))))
	  ((< DEST 0)
	   (ED-MOVE-POINT 0 0))
          (T (SETQ ED-REAL-LINE-GOAL-XPOS
                   (COND (ED-PERMANENT-REAL-LINE-GOAL-XPOS)
                         ((EQ ED-LAST-COMMAND-TYPE 'REAL-MOVE) ED-REAL-LINE-GOAL-XPOS)
                         (T (TV-READ-BLINKER-CURSORPOS (ED-WINDOW-POINT-BLINKER ED-WINDOW)))))
             (MULTIPLE-VALUE (NIL NIL TEM)
                    (TV-COMPUTE-MOTION PC-PPR 0 0 (AR-1 ED-OPEN-BUFFER DEST)
                                       0 NIL NIL ED-REAL-LINE-GOAL-XPOS 0))
             (ED-MOVE-POINT DEST (COND ((NUMBERP TEM) TEM)
                                        (T (ED-LINE-FILL-POINTER
                                            (AR-1 ED-OPEN-BUFFER DEST)))))))
    (SETQ ED-MARK-STAYS T)
     ED-DIS-BPS)

(DEFUN ED-COM-UP-REAL-LINE (CHR)
    ((LAMBDA (ED-NUMERIC-ARG)
	     (ED-COM-DOWN-REAL-LINE CHR))
     (MINUS ED-NUMERIC-ARG)))

(DEFUN ED-COM-SET-GOAL-COLUMN (CHR)
    (SETQ ED-PERMANENT-REAL-LINE-GOAL-XPOS
	  (COND ((> ED-NUMERIC-ARG 1) NIL)
		(T (TV-READ-BLINKER-CURSORPOS (ED-WINDOW-POINT-BLINKER ED-WINDOW)))))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-NONE)

(DEFUN ED-COM-NEXT-SCREEN (CHR &AUX TEM)
    (COND ((= ED-NUMERIC-ARG 0)
	   ((LAMBDA (ED-NUMERIC-ARG-P)
		    (ED-COM-MOVE-TO-SCREEN-EDGE CHR))
	    NIL))
	  ((< ED-NUMERIC-ARG 0)
	   (SETQ TEM (- (ED-LINE-NUMBER (AR-2 ED-WINDOW 0 0))
			(* (MINUS ED-NUMERIC-ARG) (ED-WINDOW-FILL-POINTER ED-WINDOW))))
	   (COND ((< TEM 0)
		  (COND ((ED-BOB-P (ED-BUFFER-POINT)) (ED-BARF))
			(T (ED-MOVE-POINT 0 0))))
		 (T
		  (ED-MOVE-POINT TEM 0)
		  (SETF (ED-WINDOW-TOP-LINE-DISPLAYED ED-WINDOW) TEM))))
	  (T
	   (DO ((I (1- (ED-WINDOW-FILL-POINTER ED-WINDOW)) (1- I)))
	       ((NOT (= -1 (SETQ TEM (AR-2 ED-WINDOW I 0))))))
	   (OR TEM (ED-BARF))
	   (SETQ TEM (+ (ED-LINE-NUMBER TEM)
			(* (1- ED-NUMERIC-ARG) (ED-WINDOW-FILL-POINTER ED-WINDOW))))
	   (AND (>= TEM (ED-BUFFER-FILL-POINTER))
		(ED-BARF))
	   (ED-MOVE-POINT TEM 0)
	   (SETF (ED-WINDOW-TOP-LINE-DISPLAYED ED-WINDOW) TEM)) )
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BPS)

(DEFUN ED-COM-PREVIOUS-SCREEN (CHR)
    ((LAMBDA (ED-NUMERIC-ARG)
	     (ED-COM-NEXT-SCREEN CHR))
     (MINUS ED-NUMERIC-ARG)))


(DEFUN ED-COM-BOL (CHR)
    (ED-MOVE-TO-BOL (ED-BUFFER-POINT))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BPS)

(DEFUN ED-MOVE-TO-BOL (BP)
    (SETF (ED-BP-CHAR-POS BP) 0))

(DEFUN ED-COM-EOL (CHR)
    (ED-MOVE-TO-EOL (ED-BUFFER-POINT))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BPS)

(DEFUN ED-MOVE-TO-EOL (BP)
   (SETF (ED-BP-CHAR-POS BP)
	 (ED-LINE-FILL-POINTER (ED-BP-LINE BP))))

(DEFUN ED-COM-MOVE-TO-SCREEN-EDGE (CHR &AUX TEM)
    (SETQ TEM (ED-WINDOW-NUMERIC-ARG-RASTER
	       (ED-BUFFER-BOB-BP (ED-WINDOW-BUFFER ED-WINDOW))
	       ED-WINDOW))
    (SETQ TEM (// TEM (PC-PPR-LINE-HEIGHT (ED-WINDOW-PC-PPR ED-WINDOW))))
    (SETQ TEM (DO ((I TEM (1- I)))
		  ((NOT (= (AR-2 ED-WINDOW I 0) -1)) I) ))
    (COND ((AR-2 ED-WINDOW TEM 0)
 	   (ED-MOVE-POINT (ED-LINE-NUMBER (AR-2 ED-WINDOW TEM 0)) 0))
	  ((OR (NULL ED-NUMERIC-ARG-P) (>= ED-NUMERIC-ARG 5))
	   (ED-MOVE-POINT (ED-BUFFER-EOB-BP)))
	  (T (ED-MOVE-POINT 0 0)))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BPS)

(DEFUN ED-COM-GOTO-BEGINNING (CHR)	      ;BEGINNING OF BUFFER
   (ED-POINT-PDL-PUSH (ED-BUFFER-POINT))
   (ED-MOVE-POINT 0 0)
   (SETQ ED-MARK-STAYS T)
   ED-DIS-BPS)

(DEFUN ED-COM-MARK-BOB (CHR)
   (ED-MOVE-BP (ED-BUFFER-MARK) 0 0)
   (SETF (ED-BUFFER-MARK-P) T)
   (SETQ ED-MARK-STAYS T)
   ED-DIS-BPS)

(DEFUN ED-COM-GOTO-END (CHR &AUX BUFFER-SIZE)
   (ED-POINT-PDL-PUSH (ED-BUFFER-POINT))
   (SETQ BUFFER-SIZE (ED-BUFFER-FILL-POINTER))
   (ED-MOVE-POINT (1- BUFFER-SIZE)
		  (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER (1- BUFFER-SIZE))))
   (SETQ ED-MARK-STAYS T)
   ED-DIS-BPS)

(DEFUN ED-COM-MARK-EOB (CHR &AUX BUFFER-SIZE)
   (SETQ BUFFER-SIZE (ED-BUFFER-FILL-POINTER))
   (ED-MOVE-BP (ED-BUFFER-MARK) (1- BUFFER-SIZE)
	       (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER (1- BUFFER-SIZE))))
   (SETF (ED-BUFFER-MARK-P) T)
   (SETQ ED-MARK-STAYS T)
   ED-DIS-BPS)


(DEFUN ED-COM-SWAP-POINT-AND-MARK (CHR &AUX LINE-NUM CHAR-POS)
    (SETF (ED-BUFFER-MARK-P) T)
    (SETQ LINE-NUM (ED-BP-LINE-NUM (ED-BUFFER-POINT))
	  CHAR-POS (ED-BP-CHAR-POS (ED-BUFFER-POINT)))
    (ED-MOVE-POINT (ED-BUFFER-MARK))
    (ED-MOVE-BP (ED-BUFFER-MARK) LINE-NUM CHAR-POS)
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BPS)
