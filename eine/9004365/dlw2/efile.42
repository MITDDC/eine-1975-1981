;;; This file is part of EINE, the Lisp Machine editor.        -*-LISP-*-
;;; For more information see LISPM2;EINE INFO.

;; This file contains functions for file and other input/output operations.
;; It deals principally with FILE-type buffers; SECTION-typoe buffers
;; are dealt with in the EDFN file.

(DECLARE (SETQ RETAIN-VARIABLE-NAMES-SWITCH 'ARGS))
(DECLARE (SETQ OPEN-CODE-MAP-SWITCH T))
(ENDF HEAD)

(DEFUN ED-WRITE-TO-FILE (FILE-NAME &OPTIONAL (BUFFER ED-OPEN-BUFFER)
				   &AUX STREAM (ED-OPEN-BUFFER BUFFER))
    (SETQ FILE-NAME (STRING FILE-NAME))
    (OR (ED-BUFFER-TYPE) (SETF (ED-BUFFER-TYPE) 'FILE))
    (OR (EQ (ED-BUFFER-TYPE) 'FILE)
	(ED-ASK-QUESTION
	 (FORMAT-STRING NIL "Do you want to write out ~S even thought it is of type ~S"
			ED-OPEN-BUFFER (ED-BUFFER-TYPE)))
	(ED-BARF))
    (SETQ STREAM (OPEN FILE-NAME '(WRITE)))
    (FUNCALL (ED-BUFFER-STREAM) 'INITIALIZE)
    (ED-SET-DEFAULT-FILE-NAME FILE-NAME)
    (STREAM-COPY-UNTIL-EOF (ED-BUFFER-STREAM) STREAM)	   
    (CLOSE STREAM)
    (PUTPROP (INTERN FILE-NAME) (STRING-APPEND (FILE-COMMAND "OUTINFO")) 'ED-FILE-ID)
    (ED-ECHO-MESSAGE "Written: ~A" (FILE-COMMAND "OUTRFN"))
    )

(DEFUN ED-COM-WRITE-TO-FILE (CHR)
    (ED-WRITE-TO-FILE (ED-GET-FILE-NAME "Write to file:"))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-NONE)

(DEFUN ED-COM-SAVE-BUFFER (CHR &AUX TYPE)
    (SETQ TYPE (ED-BUFFER-TYPE))
    (SELECTQ TYPE
	(NIL     (ED-WRITE-TO-FILE (ED-GET-FILE-NAME "Save to file:")))
	(FILE    (ED-UPDATE-FILE (ED-BUFFER-PATHNAME)))
	(SECTION (ED-UPDATE-FILE (ED-BUFFER-PATHNAME))))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-NONE)

; Create a buffer with that name and read it in from the stream.
; Closes the stream, returns the buffer.
(DEFUN ED-READ-IN-BUFFER (STREAM BUFFER-NAME &AUX ED-OPEN-BUFFER)
    (SETQ ED-OPEN-BUFFER (ED-CREATE-BUFFER BUFFER-NAME))
    (STREAM-COPY-UNTIL-EOF STREAM
			   (ED-BUFFER-STREAM)
			   (ED-MAKE-LINE-ARRAY-LEADER-SIZE))
    (ED-MOVE-POINT 0 0)
    (CLOSE STREAM)
    ED-OPEN-BUFFER)

; Called from ED-COM-READ-FROM-FILE on a string.
(DEFUN ED-READ-FROM-FILE (FILE-NAME &AUX FILE)
    (SETQ FILE (INTERN FILE-NAME))
    (AND (MEMQ FILE ED-FILE-LIST)
	 (ED-BARF "The file " FILE-NAME " is already being edited."))

    (ED-SELECT-BUFFER ED-WINDOW
		      (ED-OPEN-BUFFER (ED-READ-IN-BUFFER (OPEN FILE-NAME '(READ)) NIL)))
    (ED-SET-DEFAULT-FILE-NAME FILE-NAME)
    (SETF (ED-BUFFER-TYPE) 'FILE)
    (PUTPROP FILE ED-OPEN-BUFFER 'ED-FILE-BUFFER)
    (PUSH FILE ED-FILE-LIST))
    
(DEFUN ED-COM-READ-FROM-FILE (CHR)
    (ED-READ-FROM-FILE (ED-GET-FILE-NAME "Read from file:"))
    (SETQ ED-MARK-STAYS T) ;Not that it matters, but...
    ED-DIS-SCREEN)

(DEFUN ED-INSERT-FILE (FILE-NAME &OPTIONAL STREAM)
    (OR STREAM
	(SETQ STREAM (OPEN (STRING FILE-NAME) '(READ))))
    (FUNCALL (ED-BUFFER-STREAM) 'INITIALIZE (ED-BUFFER-POINT))
    (STREAM-COPY-UNTIL-EOF STREAM
			   (ED-BUFFER-STREAM)
			   (ED-MAKE-LINE-ARRAY-LEADER-SIZE))
    (CLOSE STREAM))

(DEFUN ED-COM-INSERT-FILE (CHR)
    (ED-INSERT-FILE (ED-GET-FILE-NAME "Insert file:"))
    ED-DIS-BUFFER)

(DEFUN ED-WRITE-REGION (STREAM &OPTIONAL BP1 BP2)
    (COND ((OR (SYMBOLP STREAM) (STRINGP STREAM))
	   (SETQ STREAM (OPEN (STRING STREAM) '(WRITE)))))
    (MULTIPLE-VALUE (BP1 BP2)
		    (ED-ORDER-BPS (OR BP1 (ED-BUFFER-POINT))
				  (OR BP2 (ED-BUFFER-MARK))))
    (FUNCALL (ED-BUFFER-STREAM) 'INITIALIZE BP1)
    ((LAMBDA (ED-IBP-LIMIT-BP)
	     (STREAM-COPY-UNTIL-EOF (ED-BUFFER-STREAM) STREAM))
     BP2)
    (CLOSE STREAM))

(DEFUN ED-COM-WRITE-REGION (CHR)
    (OR (ED-BUFFER-MARK-P) (ED-BARF "There is no region."))
    (ED-WRITE-REGION (ED-GET-FILE-NAME "Write region to:"))
    ED-DIS-NONE)

;Always returns a string.
(DEFUN ED-GET-FILE-NAME (STRING &OPTIONAL (DEFAULT-FN2 ">") &AUX TEM)
    ((LAMBDA (ED-KILL-RING)
	(SETQ TEM (ED-GET-STRING-FROM-MINI-BUFFER STRING ED-FILE-NAME-MODE-LIST))
	(COND ((ZEROP (STRING-LENGTH TEM))
	       (SETQ ED-LAST-FILE-NAME-TYPED-IN (SETQ TEM ED-DEFAULT-FILE-NAME)))
	      (T (SETQ TEM (FILE-DEFAULT-FN2 TEM DEFAULT-FN2))
		 (SETQ ED-LAST-FILE-NAME-TYPED-IN (FILE-DEFAULT-FILENAMES TEM))))
	TEM)
     (CONS ED-LAST-FILE-NAME-TYPED-IN
	   (CONS ED-DEFAULT-FILE-NAME ED-KILL-RING))))
    
;Always returns a string.
(DEFUN ED-GET-DEFAULTED-FILE-NAME (PROMPT)
       (FILE-DEFAULT-FILENAMES (ED-GET-FILE-NAME PROMPT)))


(COMMENT INPUT/OUTPUT)

; ED-MAKE-BUFFER-STREAM takes a bp and returns a stream.  TYOing will insert at the
;  bp and move it, tyiing will read past it.  This stream supports UNTYO.

(SPECIAL ED-BP ED-UNRCHF)	     ;Locally used SPECIALs.

(DEFUN ED-MAKE-BUFFER-STREAM (ED-BP &AUX ED-UNRCHF)
    (CLOSURE '(ED-BP ED-UNRCHF)
       (FUNCTION
	 (LAMBDA (OP &OPTIONAL ARG1 &AUX TEM TEM1)
	   (SELECTQ OP
	       (WHICH-OPERATIONS '(TYI UNTYI INITIALIZE TYO UNTYO-MARK
                                   UNTYO LINE-IN LINE-OUT STRING-OUT))
	       (TYI
		(COND (ED-UNRCHF
		       (PROG1 ED-UNRCHF (SETQ ED-UNRCHF NIL)))
		      (T
		       (SETQ TEM (LDB %%CH-CHAR (ED-BP-CHAR ED-BP)))
		       (MULTIPLE-VALUE (NIL OP)
				       (*CATCH 'ED-EOB (ED-IBP ED-BP)))
		       (COND ((NULL OP)   ;It threw.
			      (AND ARG1 (ERROR ARG1)))
			     (T TEM)))))

	       (LINE-IN
		(COND (ED-UNRCHF
		       (SETQ ED-UNRCHF NIL)
		       (ED-DPB ED-BP)))
		(COND ((= (SETQ TEM1 (ED-BP-LINE-NUM ED-BP))
                          (1- (ED-BUFFER-FILL-POINTER (ED-LINE-BUFFER (ED-BP-LINE ED-BP)))))
                       NIL)
		      ((AND ED-IBP-LIMIT-BP
			    (EQ (ED-BP-LINE ED-IBP-LIMIT-BP)
				(ED-BP-LINE ED-BP)))
		       NIL)
                      ((AND (= 0 (SETQ TEM (ED-BP-CHAR-POS ED-BP)))
                            (NULL (NUMBERP ARG1)))
                       (PROG1 (ED-BP-LINE ED-BP)
                              (ED-MOVE-BP ED-BP (1+ TEM1) 0)))
                      (T
		       (SETQ TEM (NSUBSTRING (ED-BP-LINE ED-BP) TEM))
                       (ED-MOVE-BP ED-BP (1+ TEM1) 0)
		       (SETQ TEM1 (MAKE-ARRAY DEFAULT-ARRAY-AREA (ARRAY-TYPE TEM)
				       (STRING-LENGTH TEM) NIL ARG1))
		       (COPY-ARRAY-CONTENTS-AND-LEADER TEM TEM1)
                       TEM1)))

	       (UNTYI
		(SETQ ED-UNRCHF ARG1))

	       (INITIALIZE
		(SETQ ED-UNRCHF NIL)
		(ED-MOVE-BP ED-BP (OR ARG1 (ED-BUFFER-BOB-BP))))

	       (TYO
		(COND ((= ARG1 215)
		       (ED-INSERT-CRS-MOVING ED-BP 1))
		      (T
		       (ED-INSERT-CHARS-MOVING ED-BP ARG1))))
	       
	       (LINE-OUT
		(ED-INSERT-LINE-MOVING ED-BP ARG1))

               (STRING-OUT
                (ED-INSERT-CHARS-MOVING ED-BP ARG1))

	       (UNTYO-MARK
		(ED-COPY-BP ED-BP 'TEMP))

	       (UNTYO
		(ED-MOVE-BP ED-BP (ED-DELETE-BETWEEN ARG1 ED-BP)))

	       (OTHERWISE
		(ERROR "Unknown operation to a buffer stream" OP)))))))
				  
(DEFUN ED-KEYBOARD-IO (OP &OPTIONAL ARG1) 
    (SELECTQ OP
	 (WHICH-OPERATIONS '(TYI UNTYI))
	 (TYI
	  (COND (ED-KEYBOARD-IO-UNRCHF
		 (PROG1 ED-KEYBOARD-IO-UNRCHF (SETQ ED-KEYBOARD-IO-UNRCHF NIL)))
		(T (KBD-TYI))))
	 (UNTYI
	  (SETQ ED-KEYBOARD-IO-UNRCHF ARG1))
	 (OTHERWISE
	  (ERROR "Undefined operation -- ED-KEYBOARD-IO" OP))))

;Read a Sexp from the buffer-point stream.  You must do an INITIALIZE on it
;first if you want non-random results.
(DEFUN ED-READ-SEXP-FROM-BUFFER (&OPTIONAL EOF-OPTION)
    (READ EOF-OPTION (ED-BUFFER-STREAM) ))   ;READ WILL CHANGE EVENTUALLY

;Grind X into ED-BUFFER-STREAM.
(DEFUN ED-GRIND-INTO-BUFFER (X)
    (GRIND-TOP-LEVEL X 90. (ED-BUFFER-STREAM) T)
    ED-OPEN-BUFFER)

(DEFUN ED-COM-GRIND-DEFINITION (CHR &AUX SYMBOL TEM)
    (SETQ SYMBOL (INTERN (ED-GET-STRING-FROM-MINI-BUFFER "Name of function: ")))
    (OR (SYMBOLP SYMBOL)
	(ED-BARF "I need a symbol! -- ED-COM-GRIND-DEFINITION"))
    (SETQ TEM (FSYMEVAL SYMBOL))
    (FUNCALL (ED-BUFFER-STREAM) 'INITIALIZE (ED-BUFFER-POINT))
    (COND ((LISTP TEM)
	   (COND ((EQ (CAR TEM) 'LAMBDA)
		  (GRIND-TOP-LEVEL `(DEFUN ,SYMBOL ,@(CDR TEM))
				   90.
				   (ED-BUFFER-STREAM)
				   T))
		 ((EQ (CAR TEM) 'MACRO)
		  (GRIND-TOP-LEVEL `(MACRO ,SYMBOL ,@(CDDR TEM))
				     90.
				     (ED-BUFFER-STREAM)
				     T))
		 (T (ED-BARF SYMBOL " Strangely defined -- ED-COM-GRIND-DEFINITION"))))
	  ((GET SYMBOL 'COMPILED-SEXP)
	   (GRIND-TOP-LEVEL `(DEFUN ,SYMBOL ,@(CDR (GET SYMBOL 'COMPILED-SEXP)))
			    90.
			    (ED-BUFFER-STREAM)
			    T))
	  (T (ED-BARF SYMBOL " Undefined function -- ED-COM-GRIND-DEFINITION")))
    ED-DIS-BUFFER)


(DEFUN ED-COM-GRIND-S-EXPRESSION (CHR &AUX TEM)
    (SETQ TEM (EVAL (ED-READ-FROM-MINI-BUFFER "Lisp form: ")))	;If we had ERRSET...
    (FUNCALL (ED-BUFFER-STREAM) 'INITIALIZE (ED-BUFFER-POINT))
    (GRIND-TOP-LEVEL TEM 90. (ED-BUFFER-STREAM) T)
    ED-DIS-BUFFER)

;; Editor commands for leaving the buffer.

;Extended command EVALUATE BUFFER
(DEFUN ED-COM-EVAL-BUFFER (CHR)
    (ED-EVAL-BUFFER-AUX NIL)
    ED-DIS-NONE)

;Extended command COMPILE BUFFER
(DEFUN ED-COM-EVAL-BUFFER-AND-COMPILE (CHR)
    (ED-EVAL-BUFFER-AUX T)
    ED-DIS-NONE)

;Extended command EVALUATE REGION
(DEFUN ED-COM-EVAL-REGION (CHR)
    (OR (ED-BUFFER-MARK-P) (ED-BARF))
    (ED-EVAL-REGION NIL)
    ED-DIS-NONE)

;Extended command COMPILE REGION
(DEFUN ED-COM-EVAL-REGION-AND-COMPILE (CHR)
    (OR (ED-BUFFER-MARK-P) (ED-BARF))
    (ED-EVAL-REGION T)
    ED-DIS-NONE)

;The contrl-meta-Z command.
(DEFUN ED-COM-EVAL-BUFFER-AND-EXIT (CHR)
    (SETQ ED-EXF-FLAG NIL
	  ED-EXIT-FLAG (FSYMEVAL 'ED-EXF-EVAL-BUFFER)
	  ED-EXIT-PROGRAM-NAME "EVALUATING BUFFER")
    ED-DIS-NONE)

;The meta-Z command.
(DEFUN ED-COM-EVAL-BUFFER-AND-COMPILE-AND-EXIT (CHR)
    (SETQ ED-EXF-FLAG 'COMPILE
	  ED-EXIT-FLAG (FSYMEVAL 'ED-EXF-EVAL-BUFFER)
	  ED-EXIT-PROGRAM-NAME "COMPILING BUFFER")
    ED-DIS-NONE)

;The EXF function for meta-Z and control-meta-Z
(DEFUN ED-EXF-EVAL-BUFFER (&AUX FORM VICTIM EOF)
    (TV-WHO-LINE-UPDATE)
    (ED-EVAL-BUFFER-AUX (EQ ED-EXF-FLAG 'COMPILE))
    (COND ((EQ ED-EXF-FLAG 'COMPILE)
	   "Buffer has been compiled, back to LISP")
	  (T
	   "Buffer has been evaluated, back to LISP")))

;Eval or compile the buffer from BEG to END, or POINT to MARK.
(DEFUN ED-EVAL-REGION (COMPILE-P &OPTIONAL BEG END)
    (MULTIPLE-VALUE (BEG END)
		    (ED-ORDER-BPS (OR BEG (ED-BUFFER-POINT))
				  (OR END (ED-BUFFER-MARK))))
    ((LAMBDA (ED-IBP-LIMIT-BP)
	     (ED-EVAL-BUFFER-AUX COMPILE-P BEG))
     END))

(DEFUN ED-EVAL-BUFFER-AUX (COMPILE-P &OPTIONAL BEG &AUX FORM EOF
                                     (OPEN-CODE-MAP-SWITCH OPEN-CODE-MAP-SWITCH)
                                     SAVE-MACROS-FOR-SENDING-OVER-SWITCH)
    (SETQ EOF (NCONS NIL))
    (FUNCALL (ED-BUFFER-STREAM) 'INITIALIZE BEG)
    (PKG-BIND (ED-BUFFER-PACKAGE ED-OPEN-BUFFER)
      (DO NIL
	  (NIL)
	  (SETQ FORM (ED-READ-SEXP-FROM-BUFFER EOF))
	  (AND (EQ FORM EOF) (RETURN T))
	  (COND (COMPILE-P (COMPILE-DRIVER FORM (FUNCTION ED-COMPILE-BUFFER-FORM) NIL))
		(T (ED-RECORD-DEFUN FORM ED-OPEN-BUFFER)
		   (EVAL-PRINT FORM)))))
      (AND COMPILE-P (MAPC 'EVAL SPECIAL-UNDO-LIST)))

;Functional to be passed to COMPILE-DRIVER.
(DEFUN ED-COMPILE-BUFFER-FORM (FORM TYPE)
    (SELECTQ TYPE
        ((DECLARE) (EVAL FORM))
        ((RANDOM SPECIAL MACRO) (EVAL-PRINT FORM))
        (DEFUN (ED-RECORD-DEFUN FORM ED-OPEN-BUFFER)
	       (EVAL-PRINT FORM)
               (COMPILE (CADR FORM)))))

;When the DEFUN in FORM is evalled from the random anonymous buffer BUFFER,
;remember that that function lives in that buffer.
(DEFUN ED-RECORD-DEFUN (FORM BUFFER)
    (AND (GET (ED-BUFFER-NAME BUFFER) 'ED-ANONYMOUS)
	 (PROGN (REMPROP (ED-BUFFER-NAME BUFFER) 'ED-ANONYMOUS)
		(ED-RENAME-BUFFER BUFFER (CADR (DEFUN-COMPATIBILITY FORM))))))

;Set the default file name of EINE as a whole and of the current buffer.
(DEFUN ED-SET-DEFAULT-FILE-NAME (FILE-NAME)
    (SETF (ED-BUFFER-PATHNAME)
	  (INTERN (SETQ ED-DEFAULT-FILE-NAME (FILE-DEFAULT-FN2 (STRING FILE-NAME) ">")))))