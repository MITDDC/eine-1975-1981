;;; This file is part of EINE, the Lisp Machine editor.        -*-LISP-*-
;;; For more information see LISPM2;EINE INFO.

;; This file contains functions for hacking blank space, indentation,
;;    upper/lower case, and comments.

(DECLARE (SETQ RETAIN-VARIABLE-NAMES-SWITCH 'ARGS))
(DECLARE (SETQ OPEN-CODE-MAP-SWITCH T))

;This returns the amound of indentation that you want.
(DEFUN ED-INDENT-FOR-LISP (BP &AUX LINE-NUM BP1 BP2 BP3 TEM WINP)
  (SETQ LINE-NUM (ED-BP-LINE-NUM BP))
  (COND ((ZEROP LINE-NUM) 0)
	(T (SETQ TEM (AR-1 ED-OPEN-BUFFER (1- LINE-NUM)))
	   ((LAMBDA (ED-IBP-LIMIT-BP)
	      (MULTIPLE-VALUE (BP1 WINP)
			      (ED-BACKWARD-SEXP-BP ED-IBP-LIMIT-BP 1))
	      (COND ((NOT WINP) 0)
		    (T ((LAMBDA (ED-DBP-LIMIT-BP)
			  (MULTIPLE-VALUE (BP3 WINP)
					  (ED-BACKWARD-LIST-BP BP1 1 1))
			  (COND ((NOT WINP)
				 (ED-STRING-INDENTATION (ED-BP-LINE BP1)))
				(T (SETQ BP1 BP3)
				   (COND ((AND (NEQ (AR-1 ED-LIST-SYNTAX-TABLE
							  (LDB %%CH-CHAR
								(ED-BP-CHAR-BEFORE BP1)))
						    ED-LIST-SINGLE-QUOTE)
					       (PROG ()
						 (SETQ BP2 (ED-COPY-BP BP1 'TEMP))
						 (ED-IBP BP2)
						 (MULTIPLE-VALUE (BP2 WINP)
								 (ED-FORWARD-SEXP-BP BP2 1))
						 (OR WINP (RETURN NIL))
						 (MULTIPLE-VALUE (BP2 WINP)
								 (ED-FORWARD-SEXP-BP BP2 1))
						 (OR WINP (RETURN NIL))
						 (SETQ BP2 (ED-BACKWARD-SEXP-BP BP2 1))
						 (RETURN T)))
					  (ED-BP-INDENTATION BP2))
					 (T
					  (1+ (ED-BP-INDENTATION BP1)))))))
			(ED-BP 0 (ED-BP-LINE BP1) 'TEMP)
			))))
	    (ED-BP (ED-LINE-FILL-POINTER TEM) TEM 'TEMP)
	    ))))

; Returns the number of SPACEs needed to produce the amount of indentation
;    this string has.
(DEFUN ED-STRING-INDENTATION (STRING &AUX LIMIT X TEM PC-PPR FONT)
    (SETQ PC-PPR (ED-WINDOW-PC-PPR ED-WINDOW))
    (SETQ LIMIT (ED-BP-CHAR-POS (ED-FORWARD-OVER-BLANK (ED-BP 0 STRING 'TEMP))))
    (TV-SET-FONT PC-PPR (SETQ FONT (AR-1 (PC-PPR-FONT-MAP PC-PPR)
					 ED-CURRENT-DEFAULT-FONT)))
    (MULTIPLE-VALUE (X NIL TEM)
		    (TV-COMPUTE-MOTION PC-PPR	  ;PC-PPR
				       0	  ;X
				       0	  ;Y
				       STRING	  ;STRING
				       0	  ;START
				       LIMIT	  ;STOP
				       ))
;    (OR (= TEM LIMIT)
;	(ERROR "ED-STRING-INDENTATION bomb out" (CONS TEM LIMIT)))
    (// X (COND ((SETQ TEM (FONT-CHAR-WIDTH-TABLE FONT)) (AR-1 TEM 40))
		(T (FONT-CHAR-WIDTH FONT)))))

; Returns the number of SPACEs needed to produce the amount of indentation
;   to reach this BP, starting at the beginning of its line.
(DEFUN ED-BP-INDENTATION (BP &OPTIONAL (PC-PPR (ED-WINDOW-PC-PPR ED-WINDOW))
			     &AUX TEM FONT)
    (TV-SET-FONT PC-PPR (SETQ FONT (AR-1 (PC-PPR-FONT-MAP PC-PPR)
					 ED-CURRENT-DEFAULT-FONT)))
    (// (TV-COMPUTE-MOTION PC-PPR		  ;PC-PPR
			   0			  ;X
			   0			  ;Y
			   (ED-BP-LINE BP)	  ;STRING
			   0			  ;START
			   (ED-BP-CHAR-POS BP)	  ;STOP
			   )
	(COND ((SETQ TEM (FONT-CHAR-WIDTH-TABLE FONT)) (AR-1 TEM 40))
		(T (FONT-CHAR-WIDTH FONT)))))

; Returns the number of spaces needed to indent for COLUMN columns (i.e. pixels)
;   in this PC-PPR.
(DEFUN ED-COLUMN-INDENTATION (COLUMN &OPTIONAL (PC-PPR (ED-WINDOW-PC-PPR ED-WINDOW))
				     &AUX TEM FONT)
    (SETQ FONT (AR-1 (PC-PPR-FONT-MAP PC-PPR) ED-CURRENT-DEFAULT-FONT))
    (// COLUMN
	(COND ((SETQ TEM (FONT-CHAR-WIDTH-TABLE FONT)) (AR-1 TEM 40))
		(T (FONT-CHAR-WIDTH FONT)))))

(DEFUN ED-INDENT-LINE (BP INDENTATION &AUX BP1)
    (SETQ BP1 (ED-BP 0 (ED-BP-LINE BP) 'TEMP))
    (ED-DELETE-BLANK-FORWARD BP1)
    (DO I 0 (1+ I) (>= I INDENTATION)
      (ED-INSERT-CHARS BP1 (DPB ED-CURRENT-DEFAULT-FONT %%CH-FONT 40)))
    )

(DEFUN ED-COM-INDENT-FOR-LISP (CHR &AUX I LIM TEM)
    (DO J 0 (1+ J) (>= J ED-NUMERIC-ARG)
      (SETQ I (ED-INDENT-FOR-LISP (ED-BUFFER-POINT)))
      (ED-INDENT-LINE (ED-BUFFER-POINT) I)
      (COND ((NOT (= ED-NUMERIC-ARG 1))
	     (SETQ TEM (1+ (ED-BP-LINE-NUM (ED-BUFFER-POINT))))
	     (AND (>= TEM (ED-BUFFER-FILL-POINTER))
		  (RETURN NIL))
	     (ED-MOVE-BP (ED-BUFFER-POINT) TEM 0))))
    (COND ((AND (= ED-NUMERIC-ARG 1)
		(< (ED-BP-CHAR-POS (ED-BUFFER-POINT)) I))
	   (ED-MOVE-POINT (ED-BP-LINE-NUM (ED-BUFFER-POINT)) I)))
    ED-DIS-BPS)

(DEFUN ED-COM-INDENT-NEW-LINE (CHR)
    (ED-COM-INSERT-CRS CHR)
    ((LAMBDA (ED-NUMERIC-ARG)
	     (ED-COM-INDENT-FOR-LISP CHR))
     1))

(DEFUN ED-COM-INDENT-SEXP (CHR &AUX BP LIM)
    (SETQ BP (ED-FORWARD-SEXP-BP (ED-BUFFER-POINT) 1))
    (SETQ LIM (ED-BP-LINE-NUM BP))
    (DO I (ED-BP-LINE-NUM (ED-BUFFER-POINT)) (1+ I) (> I LIM)
      (ED-MOVE-BP BP I 0)
      (ED-INDENT-LINE BP (ED-INDENT-FOR-LISP BP)))
    ED-DIS-BUFFER)

;*******************************
;***** BLANK SPACE HACKING *****
;*******************************

(COMMENT BLANK SPACE COMMANDS)

(DEFUN ED-FORWARD-OVER-BLANK (BP)
   (DO NIL ((NOT (MEMQ (LDB %%CH-CHAR (ED-BP-CHAR BP)) ED-BLANK-LIST)))
     (ED-IBP BP))
   BP)

(DEFUN ED-BACKWARD-OVER-BLANK (BP)
   (DO NIL ((NOT (MEMQ (LDB %%CH-CHAR (ED-BP-CHAR-BEFORE BP)) ED-BLANK-LIST)))
     (ED-DBP BP))
   BP)

(DEFUN ED-DELETE-BLANK-AROUND (BP)
   (ED-MOVE-BP BP (ED-BACKWARD-OVER-BLANK BP))
   (ED-DELETE-BLANK-FORWARD BP))

(DEFUN ED-DELETE-BLANK-FORWARD (BP)
   (ED-DELETE-BETWEEN BP (ED-FORWARD-OVER-BLANK (ED-COPY-BP BP 'TEMP))))

(DEFUN ED-DELETE-BLANK-BACKWARD (BP)
   (ED-DELETE-BETWEEN BP (ED-BACKWARD-OVER-BLANK (ED-COPY-BP BP 'TEMP))))

(DEFUN ED-STRING-BLANK-P (STRING &AUX LIM)
   (COND ((NUMBERP STRING)
	  (MEMQ (LDB %%CH-CHAR STRING) ED-BLANK-LIST))
	 (T
	  (SETQ LIM (STRING-LENGTH STRING))
	  (DO ((I 0 (1+ I)))
	      ((>= I LIM) T)
	      (OR (MEMQ (LDB %%CH-CHAR (AR-1 STRING I)) ED-BLANK-LIST)
		  (RETURN NIL))))))

(DEFUN ED-COM-DELETE-BLANK-LINES (CHR &AUX TEM TEM1 LINE LIM)
    (SETQ LINE (ED-BP-LINE (ED-BUFFER-POINT)))
    (SETQ LIM (ED-BUFFER-FILL-POINTER ED-OPEN-BUFFER))
    (COND ((ED-STRING-BLANK-P LINE)
	   (SETQ TEM		        ; Move backwards over blank lines.
		 (DO ((I (ED-LINE-NUMBER LINE) (1- I)))
		     ((<= I 0) 0)
		   (OR (ED-STRING-BLANK-P (AR-1 ED-OPEN-BUFFER I))
		       (RETURN (1+ I)))))
	   (ED-MOVE-POINT TEM 0)
	   (SETQ TEM1			; Move forward over more blank lines.
		 (DO ((I (ED-LINE-NUMBER LINE) (1+ I)))
		     ((>= I LIM) (1- LIM))
		   (OR (ED-STRING-BLANK-P (AR-1 ED-OPEN-BUFFER I))
		       (RETURN (1- I)))))
	   (AND (= TEM TEM1) (SETQ TEM1 (1+ TEM1)))
	   (ED-MOVE-POINT (ED-DELETE-BETWEEN (ED-BUFFER-POINT)
					     (ED-BP 0 (AR-1 ED-OPEN-BUFFER TEM1) 'TEMP))))
	  (T
	   (SETQ TEM1 (ED-BACKWARD-OVER-BLANK
		       (ED-BP (ED-LINE-FILL-POINTER LINE) LINE 'TEMP)))
	   (SETQ TEM
		 (DO ((I (1+ (ED-LINE-NUMBER LINE)) (1+ I)))
		     ((>= I LIM) (1- LIM))
		   (OR (ED-STRING-BLANK-P (AR-1 ED-OPEN-BUFFER I))
		       (RETURN (1- I)))))
	   (SETQ TEM (AR-1 ED-OPEN-BUFFER TEM))
	   (ED-DELETE-BETWEEN TEM1 (ED-BP (ED-LINE-FILL-POINTER TEM) TEM 'TEMP))))
    ED-DIS-BUFFER)

;************************************
;***** UPPER/LOWER CASE HACKING *****
;************************************

(COMMENT UPPER/LOWER CASE COMMANDS)

(DEFUN ED-UPPERCASE-BETWEEN (BP1 BP2 &AUX BP TEM)
    (MULTIPLE-VALUE (BP1 BP2)
		    (ED-ORDER-BPS BP1 BP2))
    (SETQ BP (ED-COPY-BP BP1 'TEMP))
    (DO NIL ((ED-BP-EQUAL BP BP2) NIL)
      (ED-UPPERCASE-CHAR BP)
      (ED-IBP BP))
    BP2)

(DEFUN ED-UPPERCASE-CHAR (BP &AUX TEM)
    (SETQ TEM (ED-BP-CHAR BP))
    (AND (>= (LDB %%CH-CHAR TEM) 141)
	 (<= (LDB %%CH-CHAR TEM) 172)
	 (PROGN (ED-MUNG (ED-BP-LINE BP))
			 (ED-BP-CHAR-SET BP (- TEM 40)))))

(DEFUN ED-LOWERCASE-BETWEEN (BP1 BP2 &AUX BP TEM)
    (MULTIPLE-VALUE (BP1 BP2)
		    (ED-ORDER-BPS BP1 BP2))
    (SETQ BP (ED-COPY-BP BP1 'TEMP))
    (DO NIL ((ED-BP-EQUAL BP BP2) NIL)
      (ED-LOWERCASE-CHAR BP)
      (ED-IBP BP))
    BP2)

(DEFUN ED-LOWERCASE-CHAR (BP &AUX TEM)
    (SETQ TEM (ED-BP-CHAR BP))
    (AND (>= (LDB %%CH-CHAR TEM) 101)
	 (<= (LDB %%CH-CHAR TEM) 132)
	 (PROGN (ED-MUNG (ED-BP-LINE BP))
		(ED-BP-CHAR-SET BP (+ TEM 40)))))

(DEFUN ED-COM-UPPERCASE-REGION (CHR)
    (OR (ED-BUFFER-MARK-P) (ED-BARF))
    (ED-UPPERCASE-BETWEEN (ED-BUFFER-POINT) (ED-BUFFER-MARK))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BUFFER)

(DEFUN ED-COM-LOWERCASE-REGION (CHR)
    (OR (ED-BUFFER-MARK-P) (ED-BARF))
    (ED-LOWERCASE-BETWEEN (ED-BUFFER-POINT) (ED-BUFFER-MARK))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BUFFER)

(DEFUN ED-COM-UPPERCASE-WORD (CHR &AUX TEM)
    (SETQ TEM (ED-FORWARD-WORD-BP (ED-BUFFER-POINT) ED-NUMERIC-ARG))
    (ED-UPPERCASE-BETWEEN (ED-BUFFER-POINT) TEM)
    (ED-MOVE-POINT TEM)
    ED-DIS-BUFFER)

(DEFUN ED-COM-LOWERCASE-WORD (CHR &AUX TEM)
    (SETQ TEM (ED-FORWARD-WORD-BP (ED-BUFFER-POINT) ED-NUMERIC-ARG))
    (ED-LOWERCASE-BETWEEN (ED-BUFFER-POINT) TEM)
    (ED-MOVE-POINT TEM)
    ED-DIS-BUFFER)

(DEFUN ED-COM-UPPERCASE-INITIAL (CHR &AUX TEM)
    (SETQ TEM (ED-FORWARD-WORD-BP (ED-BUFFER-POINT) ED-NUMERIC-ARG))
    (ED-LOWERCASE-BETWEEN (ED-BUFFER-POINT) TEM)
    (ED-MOVE-POINT TEM)
    (DO I 0 (1+ I) (>= I ED-NUMERIC-ARG)
      (SETQ TEM (ED-BACKWARD-WORD-BP TEM 1))
      (ED-UPPERCASE-CHAR TEM))
    ED-DIS-BUFFER)

(DEFUN ED-COM-DELETE-HORIZONTAL-SPACE (CHR)
    (ED-DELETE-BLANK-AROUND (ED-BUFFER-POINT))
    ED-DIS-BUFFER)

(DEFUN ED-COM-BACK-TO-INDENTATION (CHR)
    (SETF (ED-BP-CHAR-POS (ED-BUFFER-POINT)) 0)
    (ED-FORWARD-OVER-BLANK (ED-BUFFER-POINT))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BPS)


;; TAB TO TAB STOP stuff.

; A "tab stop buffer" has two lines: one to indicate characters to fill
;with, and the second to indicate where the tab stops are.  In the second line
;colons and periods are the only significant characters.  Everything else
;is ignored.  If there is a :, fill with spaces, else with contents of 
;the first line.  I dont think this can work reasonably with variable
;width fonts very well, so the initial version, at least, will assume
;that you are using only one fixed width font.
(DEFUN ED-CREATE-TAB-BUFFER ()
    (ED-BUFFER-COPY ED-PROTOTYPE-TAB-BUFFER 
		    (STRING-APPEND "TAB-STOP-" (ED-GENERATE-BUFFER-NAME))))

(DEFUN ED-COM-CREATE-TAB-BUFFER (CHR)
    (ED-SELECT-BUFFER ED-WINDOW
		      (ED-OPEN-BUFFER 
		       (SETQ ED-CURRENT-TAB-BUFFER (ED-CREATE-TAB-BUFFER))))
    (SETQ ED-REDISPLAY-LOSES T)
    ED-DIS-BUFFER)

(DEFUN ED-COM-SELECT-TAB-BUFFER (CHR)
    (SETQ ED-CURRENT-TAB-BUFFER (ED-GET-BUFFER-BY-NAME))
    ED-DIS-NONE)

(DEFUN ED-COM-EDIT-TAB-BUFFER (CHR)
    (ED-SELECT-BUFFER ED-WINDOW (ED-OPEN-BUFFER ED-CURRENT-TAB-BUFFER))
    ED-DIS-BUFFER)

;BP should be a BP into the open buffer.
(DEFUN ED-TAB-TO-TAB-STOP (BP TAB-BUFFER &AUX CHAR-POS L2 LL2 SUBSTR GOAL)
    (SETQ CHAR-POS (ED-BP-CHAR-POS BP)
	  L2 (AR-1 TAB-BUFFER 1)
	  LL2 (ED-LINE-FILL-POINTER L2))
    (COND ((>= CHAR-POS LL2))
          ((SETQ GOAL (STRING-SEARCH-SET '(## : ## .) L2 (1+ CHAR-POS)))
	   (SETQ SUBSTR
		 (LET ((DEFAULT-ARRAY-AREA ED-TEMP-AREA))
		      (NSUBSTRING (COND ((CHAR-EQUAL (AR-1 L2 GOAL) ## :) ED-SPACES-STRING)
					(T (AR-1 TAB-BUFFER 0)))
				  CHAR-POS
				  GOAL)))
	   (ED-INSERT-CHARS-MOVING BP SUBSTR))))

(DEFUN ED-COM-TAB-TO-TAB-STOP (CHR)
    (ED-TAB-TO-TAB-STOP (ED-BUFFER-POINT) ED-CURRENT-TAB-BUFFER)
    ED-DIS-BUFFER)

(DEFUN ED-INITIALIZE-TAB-BUFFERS ( &AUX ED-OPEN-BUFFER)
    (AND (BOUNDP 'ED-PROTOTYPE-TAB-BUFFER)
	 ED-PROTOTYPE-TAB-BUFFER
	 (ED-KILL-BUFFER ED-PROTOTYPE-TAB-BUFFER))
    (SETQ ED-PROTOTYPE-TAB-BUFFER
	  (SETQ ED-OPEN-BUFFER (ED-CREATE-BUFFER 'PROTOTYPE-TAB-BUFFER 2)))
    (ED-INSERT-CHARS (ED-BUFFER-POINT)
		     "                                                                                          
       :       :       :       :       :       :       :       :       :       :       :       :")
    (SETQ ED-CURRENT-TAB-BUFFER (ED-CREATE-TAB-BUFFER))
    (DELQ (ASSQ 'PROTOTYPE-TAB-BUFFER ED-BUFFER-ALIST) ED-BUFFER-ALIST)
    NIL)

;************************************
;***** COMMENT HACKING COMMANDS *****
;************************************

;(DEFUN ED-COM-INDENT-FOR-COMMENT (CHR &AUX I LINE-NUM LIM BP)
;    (SETQ LINE-NUM (ED-BP-LINE-NUM (ED-BUFFER-POINT))
;	  LIM (ED-BUFFER-FILL-POINTER ED-OPEN-BUFFER)
;	  BP (ED-COPY-BP (ED-BUFFER-POINT) 'TEMP))
;    (DO N 0 (1+ N) (>= N ED-NUMERIC-ARG)
;      (SETQ I (STRING-SEARCH ED-COMMENT-STRING LINE-NUM))
;      (COND (I (ED-MOVE-BP BP LINE-NUM I))
;	    ((NOT ED-NUMERIC-ARG-P)
;	     (ED-INSERT-CHARS (ED-MOVE-TO-EOL BP) ED-COMMENT-STRING))
;	    (T (GO EXITLOOP)))
;      (ED-DELETE-BLANK-BACKWARD BP)
