;;; This file is part of EINE, the Lisp Machine editor.        -*-LISP-*-
;;; For more information see LISPM2;EINE INFO.

(DECLARE (SETQ RETAIN-VARIABLE-NAMES-SWITCH 'ARGS))
(DECLARE (SETQ OPEN-CODE-MAP-SWITCH T))

; If a function leaves ED-EXIT-FLAG set, then the editor loop will be exited.
;   The numeric arg will be used in generally the same way as in TECO macro packages.
;   Naming conventions:  all editor command functions should begin with ED-COM-,
;   and other "mode" flags should be named ED-FS-mumble, maybe.
; ED is the main user entry to the editor.  It takes one arg and tries to do
;   the right thing.  It is usually good for editing an interpreted function,
;   but it knows about other things too.

(DEFUN ED (&OPTIONAL VICTIM  &AUX TEM FCTN)
   (ED-ENTER)
   (SETQ TEM (ED-SELECT-BUFFER-CLEVERLY VICTIM))
   (COND ((STRINGP TEM) (ERROR TEM VICTIM))
	 (T (ED-OPEN-BUFFER TEM)))
   (ED-SELECT-BUFFER ED-MAIN-WINDOW ED-OPEN-BUFFER)
   (ED-SELECT-BUFFER ED-MINI-BUFFER-WINDOW ED-MINI-BUFFER)
   (ED-SELECT-WINDOWS ED-MAIN-WINDOW)
	;Top level will take care of blinker visibility.
   (ED-TOP-LEVEL))

(DEFUN ED-ENTER ()
   (OR (BOUNDP 'ED-RANDOM-AREA)		;INITIALIZE, IF NOT YET
       (ED-INITIALIZE))
   (TV-DEACTIVATE-PC-PPR CONSOLE-IO-PC-PPR)
   (TV-ACTIVATE-PC-PPR ED-ECHO-PC-PPR)
   (SETQ ED-SAVED-STANDARD-OUTPUT STANDARD-OUTPUT 
	 ED-SAVED-STANDARD-INPUT STANDARD-INPUT 
	 ED-SAVED-ERROR-OUTPUT ERROR-OUTPUT)
   (SETQ ED-CONSOLE-IO-PC-PPR-SAVED CONSOLE-IO-PC-PPR) ;SO EDITING FROM PRINT-BUG WORKS.
   (SETQ ED-CURRENT-DEFAULT-FONT 0))

(DEFUN EDVAL (SYMBOL &AUX BUFNAME TEM)
   (ED-ENTER)
   (COND ((NOT (SYMBOLP SYMBOL))
	  (ERROR "Argument must be a symbol." SYMBOL))
	 ((NOT (BOUNDP SYMBOL))
          (ERROR " is not bound." SYMBOL)))
   (SETQ BUFNAME (INTERN (FORMAT-STRING NIL "~A-VALUE" (GET-PNAME SYMBOL))))
   (COND ((SETQ TEM (GET BUFNAME 'ED-BUFFER))
	  (ED-OPEN-BUFFER TEM))
	 (T (ED-OPEN-BUFFER (ED-CREATE-BUFFER BUFNAME))
	    (ED-GRIND-INTO-BUFFER `(SETQ ,SYMBOL ',(SYMEVAL SYMBOL)))))

   (ED-SELECT-BUFFER ED-MAIN-WINDOW ED-OPEN-BUFFER)
   (ED-SELECT-BUFFER ED-MINI-BUFFER-WINDOW ED-MINI-BUFFER)
   (ED-SELECT-WINDOWS ED-MAIN-WINDOW)
	;Top level will take care of blinker visibility.
   (ED-TOP-LEVEL))

(DEFUN EDPROP (SYMBOL PROPNAME &AUX BUFNAME TEM)
   (ED-ENTER)
   (COND ((NOT (SYMBOLP SYMBOL))
	  (ERROR "First arg must be a symbol -- EDPROP"))
	 ((NOT (SYMBOLP PROPNAME))
	  (ERROR "Property name must be a symbol -- EDPROP")))
   (SETQ BUFNAME (INTERN (FORMAT-STRING NIL "~A-~A-PROPERTY"
					(GET-PNAME SYMBOL) (GET-PNAME PROPNAME))))
   (COND ((SETQ TEM (GET BUFNAME 'ED-BUFFER))
	  (ED-OPEN-BUFFER TEM))
	 (T (ED-OPEN-BUFFER (ED-CREATE-BUFFER BUFNAME))
	    (ED-GRIND-INTO-BUFFER `(PUTPROP ',SYMBOL ',(GET SYMBOL PROPNAME) ',PROPNAME))))

   (ED-SELECT-BUFFER ED-MAIN-WINDOW ED-OPEN-BUFFER)
   (ED-SELECT-BUFFER ED-MINI-BUFFER-WINDOW ED-MINI-BUFFER)
   (ED-SELECT-WINDOWS ED-MAIN-WINDOW)
	;Top level will take care of blinker visibility.
   (ED-TOP-LEVEL))


;; Given anything, tries to figure out something useful to do with it.
;; Returns either a buffer, or a string explaining why it is confused.
;; The function is mostly used for the ED function.

;; Currently the ED-OLD-FUNCTION thing is not being used, maybe put it
;; back in in a more reasonable way sometime.
(DEFUN ED-SELECT-BUFFER-CLEVERLY (X &AUX TEM (ED-OPEN-BUFFER ED-OPEN-BUFFER))
    (COND ((NULL X) (OR ED-OPEN-BUFFER
			(ED-CREATE-BUFFER)))
	  ((EQ X T) (ED-CREATE-BUFFER))
	  ((LISTP X)
	   (SETQ ED-OPEN-BUFFER (ED-CREATE-BUFFER))
	   (ED-GRIND-INTO-BUFFER X)
	   (ED-MOVE-POINT 0 0)
	   ED-OPEN-BUFFER)
	  ((STRINGP X) (ED-SELECT-BUFFER-CLEVERLY (INTERN X)))
	  ((EQ (TYPEP X) 'ED-BUFFER) X)
	  ((NOT (SYMBOLP X))
	   (QUOTE "I don't know how to edit that."))
	  ((SETQ TEM (GET X 'ED-BUFFER)) TEM)
          ((SETQ TEM (GET X 'ED-DEFINING-FILE-NAME))
           (COND ((NULL (ED-READ-FUNCTION-FROM-FILE X TEM))
                  "Couldn't find it even though it was in tags table.")
                 (T ED-OPEN-BUFFER)))
	  ((NOT (FBOUNDP X))
	   (COND ((AND (BOUNDP X)
		       (OR (LISTP (SETQ TEM (SYMEVAL X)))
			   (NUMBERP TEM)
			   (SYMBOLP TEM)
			   (STRINGP TEM)))
		  (SETQ ED-OPEN-BUFFER
			(ED-CREATE-BUFFER (INTERN
					   (FORMAT-STRING NIL "~S-VALUE" X))))
		  (ED-GRIND-INTO-BUFFER `(SETQ ,X ',(SYMEVAL X)))
		  (ED-MOVE-POINT 0 0)
		  ED-OPEN-BUFFER)
		 (T
		  (SETQ ED-OPEN-BUFFER (ED-CREATE-BUFFER X))
		  (ED-INSERT-CHARS-MOVING (ED-BUFFER-POINT) "(DEFUN ")
		  (ED-INSERT-CHARS-MOVING (ED-BUFFER-POINT) (GET-PNAME X))
		  (ED-INSERT-CHARS-MOVING (ED-BUFFER-POINT) " (" )
		  ED-OPEN-BUFFER)))
	  ((LISTP (SETQ TEM (FSYMEVAL X)))
	   (ED-INSERT-INTERPRETED-CODE X TEM (ED-CREATE-BUFFER X)))
	  ((SUBRP TEM)
	   (SETQ TEM (GET X 'COMPILED-SEXP))
	   (COND ((NULL TEM)
		  "The original s-expression for this compiled function was not saved.")
		 (T (ED-INSERT-INTERPRETED-CODE X TEM (ED-CREATE-BUFFER X)))))
	  (T ("I don't know how to edit that."))))

;; Take the contents of a function cell which is DTP-LIST, and a buffer,
;; and put the corresponding test into the buffer.  Returns the buffer, not a bp!
(DEFUN ED-INSERT-INTERPRETED-CODE (FNAME CODE BUFFER &AUX (ED-OPEN-BUFFER BUFFER))
    (SELECTQ (CAR CODE)
	     (LAMBDA
	      (ED-GRIND-INTO-BUFFER `(DEFUN ,FNAME ,@(CDR CODE))))
	     (MACRO 
	      (ED-GRIND-INTO-BUFFER `(MACRO ,FNAME ,@(CDDR CODE))))
	     (OTHERWISE 
	      (ERROR "Strange function cell contents" CODE)))
    (ED-MOVE-POINT 0 0)
    ED-OPEN-BUFFER)

; All top-level user-advertised entries work by calling this.  At the time
;    ED-TOP-LEVEL is called, the caller should have set up the open buffer
;    and the window environment.  All of these "top level" bindings should
;    be reset by ED-RECOVER.

(DEFUN ED-TOP-LEVEL ( &AUX (ED-INTERACTIVE-P T))
  (ED-PRE-RECOVER)
  (SETQ ED-EXIT-PROGRAM-NAME "EXITING EDITOR")
  (LET ((CONSOLE-IO-PC-PPR ED-DEBUG-PC-PPR)
	(FILE-ERROR 'ED-FILE-ERROR)
	(TV-WHO-LINE-PROGRAM-NAME "EDITOR"))
    (TV-CLEAR-SCREEN)
    (ED-COMPLETE-REDISPLAY NIL)
    (ED-COMMAND-LOOP 'ED-TOP-LEVEL))
  (ED-RECOVER)
  (TV-CLEAR-PC-PPR CONSOLE-IO-PC-PPR)
  ((LAMBDA (TV-WHO-LINE-PROGRAM-NAME)
	   (FUNCALL ED-EXIT-FLAG))
   ED-EXIT-PROGRAM-NAME))

(DEFUN ED-COMMAND-LOOP (CATCH-TAG &AUX FUNCTION VAL)
    (ED-COMMAND-RESET)
    (SETQ ED-EXIT-FLAG NIL)
    (SETQ ED-CURRENT-COMMAND-TYPE NIL)
    (*CATCH 'ED-EXIT-EOF			;(see below)
      (DO ()
	  (ED-EXIT-FLAG NIL)
	(*CATCH CATCH-TAG				;This one is for ED-COM-BEEP
	 (*CATCH 'ED-COMMAND-LOOP		;This one is for ED-BARF
	  (PROGN
	   (TV-DEACTIVATE-PC-PPR ED-ECHO-PC-PPR)

	   (COND ((NOT (NULL ED-REDISPLAY-LOSES))
		  (SETQ ED-REDISPLAY-LOSES NIL)			
		  (ED-UPDATE-MODE-LINE)
		  (ED-RESET-BLINKER-VISIBILITY)))

	   (ED-RESET-TEMP-AREA)
	   
	   (DO ()
	       (())
	     (SETQ ED-LAST-COMMAND-CHAR (FUNCALL ED-COMMAND-STREAM 'TYI))
	     (OR ED-LAST-COMMAND-CHAR (*THROW 'ED-EXIT-EOF NIL))
	     (SETQ FUNCTION (ED-COMMAND-LOOKUP ED-LAST-COMMAND-CHAR))
	     (SETQ VAL (ED-COMMAND-EXECUTE FUNCTION ED-LAST-COMMAND-CHAR))
	     (COND ((NEQ VAL 'ED-SPECIAL)
		    (RETURN NIL))))

	   (COND ((NULL ED-OPEN-BUFFER)
		  (ED-MUST-REDISPLAY ED-DIS-SCREEN)
		  (ED-SELECT-BUFFER-READING-NAME
		   "You have killed the current buffer.  Select new buffer:")))

	   (SETQ ED-LAST-COMMAND-TYPE ED-CURRENT-COMMAND-TYPE
		 ED-CURRENT-COMMAND-TYPE NIL)

	   (OR ED-MARK-STAYS (SETF (ED-BUFFER-MARK-P) NIL))
	   (ED-COMMAND-RESET)
	   (OR (NUMBERP VAL)
	       (ED-BARF "Illegal returned arg " VAL
 	                " from realtime command " FUNCTION "."))
	   (ED-MUST-REDISPLAY VAL)
	   (COND (ED-SPECIAL-SCREEN-P
		  (SETQ ED-SPECIAL-SCREEN-P NIL)
		  (ED-MUST-REDISPLAY ED-DIS-SCREEN)
		  (AND (ED-WAIT-FOR-SPACE)
		       (ED-DO-APPROPRIATE-REDISPLAY)))
		 (T (ED-DO-APPROPRIATE-REDISPLAY)))
	   )))))  ; PROGN, *CATCH, *CATCH, DO, *CATCH
   ED-EXIT-FLAG)

(DEFUN ED-COM-BEEP (CHR)
    (TV-BEEP)
    (AND ED-NUMERIC-ARG-P
	(SETQ ED-MARK-STAYS T))
    ED-DIS-BPS)

(DEFUN ED-COM-MINI-BUFFER-BEEP (CHR)
    (OR (EQ ED-OPEN-BUFFER ED-MINI-BUFFER)
	(ERROR "You are being screwed - ED-COM-MINI-BUFFER-BEEP" T))
    (TV-BEEP)
    (COND ((ED-BP-EQUAL (ED-BUFFER-BOB-BP) (ED-BUFFER-EOB-BP))
	   (ED-OUTLINE-WINDOW ED-WINDOW TV-ALU-ANDCA)
	   (SETQ ED-REDISPLAY-LOSES T)
	   (*THROW 'ED-TOP-LEVEL T))
	  (T
	   (ED-DELETE-BETWEEN (ED-BUFFER-BOB-BP) (ED-BUFFER-EOB-BP))
	   ED-DIS-BUFFER)))

(DEFUN ED-COM-PREFIX-BEEP (CHR)
    (TV-BEEP)
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BPS)

(DEFUN ED-BARF (&REST &EVAL X &AUX TEM PC-PPR)
   (COND (ED-INTERACTIVE-P
	  (SETQ ED-CURRENT-COMMAND-TYPE NIL)
	  (TV-DEACTIVATE-PC-PPR ED-ECHO-PC-PPR)
	  (ED-COMMAND-RESET)
	  (COND ((AND (BOUNDP '43VXMS) ED-BARFOLA-FLAG)
		 (SETQ PC-PPR (ED-WINDOW-PC-PPR ED-MAIN-WINDOW))
		 (SETQ TEM (PC-PPR-CHAR-ALUF PC-PPR))
		 (SETF (PC-PPR-CHAR-ALUF PC-PPR) TV-ALU-XOR)
		 (TV-SET-CURSORPOS PC-PPR 240 240)
		 (TV-STRING-OUT PC-PPR "247ERROR240")))
	  (OR ED-DEBUG-P (TV-HOME ED-DEBUG-PC-PPR))
	  (DO L X (CDR L) (NULL L)
	    (PRINC (CAR L) ED-DEBUG-STREAM))
	  (TV-CRLF ED-DEBUG-PC-PPR)
	  (COND ((AND ED-ZOWIE-FLAG (FBOUNDP 'ZOWIE))
		 (ZOWIE))
		(T 
		 (TV-BEEP)))
	  (COND ((AND (BOUNDP '43VXMS) ED-BARFOLA-FLAG)
		 (TV-SET-CURSORPOS PC-PPR 240 240)
		 (TV-STRING-OUT PC-PPR "247ERROR240")
		 (SETF (PC-PPR-CHAR-ALUF PC-PPR) TEM)))
	  (SETQ ED-REDISPLAY-LOSES T)
	  (OR ED-DEBUG-P (SETQ ED-SPECIAL-SCREEN-P T))
	  (*THROW 'ED-COMMAND-LOOP 0))
	 (T					  ;SOMEONE USING EDITOR FUNCTIONS HAS LOST
	  (DO L X (CDR L) (NULL L)
	    (PRINC (CAR L)))
	  (TERPRI)
	  (BREAK EDITOR-LOSSAGE T))))

(DEFUN ED-FILE-ERROR (X &OPTIONAL (Y 'ERROR))
    (ED-BARF "File error: " Y X))


;ED-COMMAND-RESET resets the special variables used by ED and associated functions

(DEFUN ED-COMMAND-RESET NIL
   (LOCAL-MAPC '(LAMBDA (PAIR) (SET (CAR PAIR) (CDR PAIR)))
	       ED-RESET-LIST))
; The realtime edit commands invoked from the keyboard are kept in an
;array called ED-COMMAND-DISPATCH-TABLE which is initialized from the
;list ED-INITIAL-COMMAND-DISPATCH-TABLE.  The array is two dimensional,
;4 by 220.  The first dimension is the meta-control bits, and the
;second is the charcter typed in the standard LISP machine character
;set (see LMDOC;CHAR >).  The mouse commands are kept in another array
;called ED-MOUSE-DISPATCH-TABLE, which is three dimensional:  The first
;index is the region on the screen, the second the number of times the button
;was pushed minus 1, and the third the button number.
;	The ED-COMMAND-LOOKUP function takes a character dispatch table
;and a mouse dispatch table (both are optional and default to the
;global values mentioned above), and returns the function to call.
;It does not check for error conditions: it might return NIL or an unbound
;symbol.

(DEFUN ED-COMMAND-LOOKUP (CHAR &OPTIONAL (KBD-ARRAY ED-COMMAND-DISPATCH-TABLE)
			                 (MOUSE-ARRAY ED-MOUSE-DISPATCH-TABLE) &AUX TEM)
    (SETQ TEM
	  (COND ((BITTEST CHAR 2000)			;If a mouse button was pushed
		 (AR-3 MOUSE-ARRAY (LDB 0603 CHAR) (MIN (LDB 0303 CHAR) 2) (LDB 0003 CHAR)))
		(T (AR-2 KBD-ARRAY (LDB 1002 CHAR) (LDB 0010 CHAR)))))
    (DO ()
	((NLISTP TEM))
      (SETQ TEM (AR-2 KBD-ARRAY (FIRST TEM) (SECOND TEM))))
    TEM)

(DEFUN ED-COMMAND-STORE (FUNCTION CHAR &OPTIONAL (KBD-ARRAY ED-COMMAND-DISPATCH-TABLE)
			      (MOUSE-ARRAY ED-MOUSE-DISPATCH-TABLE))
    (COND ((BITTEST CHAR 2000)
	   (AS-3 FUNCTION MOUSE-ARRAY (LDB 0603 CHAR) (MIN (LDB 1010 CHAR) 2) (LDB 0003 CHAR)))
	  (T (AS-2 FUNCTION KBD-ARRAY (LDB 1001 CHAR) (LDB 0010 CHAR)))))

; ED-COMMAND-EXECUTE takes a function, and executes it.
(DEFUN ED-COMMAND-EXECUTE (FUNCTION CHAR &AUX VAL)
    (COND ((NULL FUNCTION)
	   (TYO-PRETTY CHAR ED-DEBUG-STREAM)
	   (ED-BARF " Undefined command character -- ED-COMMAND-EXECUTE"))
	  ((AND (SYMBOLP FUNCTION)
		(NOT (FBOUNDP FUNCTION)))
	   (ED-BARF FUNCTION " Undefined function -- ED-COMMAND-EXECUTE")))
    (FUNCALL FUNCTION 0))

(DEFUN ED-DO-APPROPRIATE-REDISPLAY ()
    (COND ((>= ED-REDISPLAY-DEGREE ED-DIS-SCREEN)
	   (ED-COMPLETE-REDISPLAY NIL))
	  ((>= ED-REDISPLAY-DEGREE ED-DIS-BUFFER)
	   (ED-WINDOW-MUNDANE-REDISPLAY))
	  ((>= ED-REDISPLAY-DEGREE ED-DIS-BPS)
	   (ED-WINDOW-MUNDANE-REDISPLAY))
	  ((>= ED-REDISPLAY-DEGREE ED-DIS-NONE)
	   (ED-WINDOW-MINIMAL-REDISPLAY))
	  )
    (SETQ ED-REDISPLAY-DEGREE 0))

(COMMENT RECURSIVE EDITING)

; Recursive invocation of editor command level, used primarily for
; the mini-buffer.

(DEFUN ED-RECURSE (BUFFER WINDOW &AUX DEGREE)
    (LET ((ED-WINDOW WINDOW)
	  (ED-OPEN-BUFFER BUFFER)
	  (ED-WINDOWS-DISPLAYED (LIST WINDOW))
	  (ED-WINDOW-HACKING-OK-P NIL)
	  (ED-REDISPLAY-DEGREE ED-REDISPLAY-DEGREE)
	  (ED-REDISPLAY-DEGREE-THIS-LEVEL ED-REDISPLAY-DEGREE))
	 (BIND (AP-LEADER ED-WINDOW 1) NIL)		;ED-WINDOW-BLIND, TEMPORARY HACK.
	 (SETQ ED-REDISPLAY-LOSES T)
	 (ED-WINDOW-REDISPLAY (ED-BUFFER-POINT) WINDOW)
	 (ED-OUTLINE-WINDOW WINDOW)
	 (ED-COMMAND-LOOP 'ED-RECURSE-LEVEL)
	 (SETQ DEGREE ED-REDISPLAY-DEGREE-THIS-LEVEL)
	 )
    (ED-MUST-REDISPLAY DEGREE)
    (ED-OUTLINE-WINDOW WINDOW TV-ALU-ANDCA)
    (SETQ ED-REDISPLAY-LOSES T)
    (ED-RESET-BLINKER-VISIBILITY)
    (PROG1 ED-EXIT-FLAG (SETQ ED-EXIT-FLAG NIL)))

(DEFUN ED-GET-STRING-FROM-MINI-BUFFER (STRING &OPTIONAL (MODE-LINE ED-RANDOM-MODE-LIST)
					      VERBATIM-P RET)
    (BIND (AP-2 ED-COMMAND-DISPATCH-TABLE 0 33) 'ED-GET-STRING-EXIT)
    (BIND (AP-2 ED-COMMAND-DISPATCH-TABLE 0 215) 'ED-GET-STRING-EXIT)
    (BIND (AP-2 ED-COMMAND-DISPATCH-TABLE 1 107) 'ED-COM-MINI-BUFFER-BEEP)
    (BIND (AP-2 ED-COMMAND-DISPATCH-TABLE 1 132) NIL)
    (BIND (AP-2 ED-COMMAND-DISPATCH-TABLE 2 132) NIL)
    (BIND (AP-2 ED-COMMAND-DISPATCH-TABLE 3 132) NIL)
    (ED-WIPE-BUFFER ED-MINI-BUFFER)
    (ED-BIND-MODE-LINE STRING MODE-LINE
	      (SETQ ED-REDISPLAY-LOSES T)
	      (SETQ RET (ED-RECURSE ED-MINI-BUFFER ED-MINI-BUFFER-WINDOW)))
    (SETQ ED-REDISPLAY-LOSES T)
    (COND (VERBATIM-P RET)
	  (T (STRING-UPCASE (STRING-TRIM ED-BLANK-LIST RET)))))

(DEFUN ED-GET-STRING-EXIT (CHR)
    (SETF (ED-WINDOW-BLIND ED-WINDOW) T)
    (SETQ ED-REDISPLAY-LOSES T)
    (SETQ ED-EXIT-FLAG (ED-COPY-STRING (AR-1 ED-OPEN-BUFFER 0)))
    ED-DIS-NONE)

(DEFUN ED-READ-FROM-MINI-BUFFER (MODE)
    (BIND (AP-2 ED-COMMAND-DISPATCH-TABLE 1 107) 'ED-COM-MINI-BUFFER-BEEP)
    (BIND (AP-2 ED-COMMAND-DISPATCH-TABLE 1 215) 'ED-READ-EXIT)
    (BIND (AP-2 ED-COMMAND-DISPATCH-TABLE 1 132) NIL)
    (BIND (AP-2 ED-COMMAND-DISPATCH-TABLE 2 132) NIL)
    (BIND (AP-2 ED-COMMAND-DISPATCH-TABLE 3 132) NIL)
    (ED-WIPE-BUFFER ED-MINI-BUFFER)
    (SETQ ED-REDISPLAY-LOSES T)
    (ED-BIND-MODE-LINE MODE '(ED-RANDOM-MODE " (terminate with Control-Return):")
		       (ED-RECURSE ED-MINI-BUFFER ED-MINI-BUFFER-WINDOW)))

(DEFUN ED-READ-EXIT (CHR)
    (SETF (ED-WINDOW-BLIND ED-WINDOW) T)
    (SETQ ED-REDISPLAY-LOSES T)
    (FUNCALL (ED-BUFFER-STREAM) 'INITIALIZE)
    (SETQ ED-EXIT-FLAG
	  (ED-READ-SEXP-FROM-BUFFER))
    ED-DIS-NONE)

(DEFUN ED-COPY-STRING (STRING &AUX LEN RET)
     (COND ((NUMBERP STRING) STRING)
	   (T (SETQ LEN (ARRAY-ACTIVE-LENGTH STRING))
	      (SETQ RET (MAKE-ARRAY DEFAULT-ARRAY-AREA 'ART-STRING LEN))
	      (DO I 0 (1+ I) (= I LEN)
		  (AS-1 (AR-1 STRING I) RET I))
	      RET)))
; How do numeric arguments to ED-COM- functions work?
; If there was no arg at all, ED-NUMERIC-ARG-P is NIL and ED-NUMERIC-ARG is 1.
; If user just typed ^-, then ED-NUMERIC-ARG-P is NIL and ED-NUMERIC-ARG is -1.
; If numeric arg commands were typed, ED-NUMERIC-ARG-P is T and ED-NUMERIC-ARG is the number.
; Note that ^- does not togle negativeness, it turns it on.

(DEFUN ED-COM-QUADRUPLE-NUMERIC-ARG (CHR)
    (SETQ ED-NUMERIC-ARG (* ED-NUMERIC-ARG 4))
    (SETQ ED-NUMERIC-ARG-P T)
    (SETQ ED-CURRENT-COMMAND-TYPE ED-LAST-COMMAND-TYPE)
    (SETQ ED-MARK-STAYS T)
    'ED-SPECIAL)

(DEFUN ED-COM-NUMBERS (CHR &AUX FLAG)
    (COND ((< ED-NUMERIC-ARG 0)
	   (SETQ FLAG T)
	   (SETQ ED-NUMERIC-ARG (MINUS ED-NUMERIC-ARG))))
    (SETQ ED-LAST-COMMAND-CHAR (LOGAND 77 ED-LAST-COMMAND-CHAR))
    (COND (ED-NUMERIC-ARG-P
	   (SETQ ED-NUMERIC-ARG (+ (* 10. ED-NUMERIC-ARG)
				   (- ED-LAST-COMMAND-CHAR 60)))) ;FIX WHEN READTABLE FIXED???
	  (T
	   (SETQ ED-NUMERIC-ARG (- ED-LAST-COMMAND-CHAR 60))))
    (SETQ ED-NUMERIC-ARG-P T)
    (SETQ ED-CURRENT-COMMAND-TYPE ED-LAST-COMMAND-TYPE)
    (AND FLAG (SETQ ED-NUMERIC-ARG (MINUS ED-NUMERIC-ARG)))
    (SETQ ED-MARK-STAYS T)
    'ED-SPECIAL)

(DEFUN ED-COM-NEGATE-NUMERIC-ARG (CHR)
   (SETQ ED-NUMERIC-ARG (MINUS (ABS ED-NUMERIC-ARG)))
   (SETQ ED-MARK-STAYS T)
   'ED-SPECIAL)

