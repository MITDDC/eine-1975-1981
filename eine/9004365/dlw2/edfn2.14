;;; This file is part of EINE, the Lisp Machine editor.       -*-LISP-*-
;;; For more information see LISPM2;EINE INFO.

;;; Version 3 of EDFN.           12/1/77 DLW

(DECLARE (SETQ RETAIN-VARIABLE-NAMES-SWITCH 'ARGS))
(DECLARE (SETQ OPEN-CODE-MAP-SWITCH T))
(ENDF HEAD)

;; Given a file symbol, make sure that this file is not being
;; edited in one buffer, and read in its "directory".
(DEFUN ED-ASSURE-FILE-SCANNED (FILE-SYMBOL)
    (AND (GET FILE-SYMBOL 'ED-FILE-BUFFER)
	 (ED-BARF "The file " FILE-SYMBOL
		  "is being edited in the buffer" (GET FILE-SYMBOL 'ED-FILE-BUFFER)))
    (OR (GET FILE-SYMBOL 'ED-FILE-SECTION-ALIST)
	(ED-SCAN-FILE FILE-SYMBOL)))

(DECLARE (SPECIAL IBASE))

;; For every section of the file, set up its ED-RANGE and ED-DEFINING-FILE-NAME,
;; and set up the ED-FILE-SECTION-ALIST of the file, with all buffer names
;; as NIL.  It also sets up the file symbol's initial ED-FILE-ID property,
;; and adds it to ED-FILE-LIST.
(DEFUN ED-SCAN-FILE (FILE-SYMBOL &AUX (IBASE 10.))
    (FILE-COMMAND-CAREFUL "MAPRD " (GET-PNAME FILE-SYMBOL))
    (DO ((STRING (FILE-COMMAND "NEXTDEF 0")
		 (FILE-COMMAND "NEXTDEF " (FORMAT-STRING NIL "~D" POS)))
	 (POS 0)	; Our current position in the file.
	 (START)	; The START char-pos of this section.
	 (SIZE)		; The SIZE in chars of this section.
	 (NAME)		; The section-symbol.
	 (SLIST NIL))	; The ED-FILE-SECTION-LIST.
	((STRING-EQUAL "FUNCTION NOT FOUND" STRING)
	 (PUTPROP FILE-SYMBOL ALIST 'ED-FILE-SECTION-LIST))
      (MULTIPLE-VALUE (START TEM) (READ-FROM-STRING STRING))
      (MULTIPLE-VALUE (SIZE TEM) (READ-FROM-STRING STRING TEM))
      (MULTIPLE-VALUE (NAME TEM) (READ-FROM-STRING STRING TEM))
      (SETQ POS (+ POS SIZE))
      (AND (GET NAME 'ED-RANGE)	;If NAME is already someone's section-symbol.
	   (SETQ NAME (ED-SECTION-BUFFER-NAME NAME FILE-SYMBOL)))
      (PUTPROP NAME (LIST START SIZE) 'ED-RANGE)
      (PUTPROP NAME FILE-SYMBOL 'ED-FILE)
      (PUSH NAME ALIST))
    (PUTPROP FILE-SYMBOL (STRING-APPEND (FILE-COMMAND "MAPINFO")) 'ED-FILE-ID)
    (PUSH FILE-SYMBOL ED-FILE-LIST)
    (FILE-COMMAND "MAPFLS")
    NIL)

;; Given a section name and a file name (symbol or string), create a new
;; section-symbol made to look like  section-fn1-fn2-dev:-sname;
(DEFUN ED-SECTION-BUFFER-NAME (SECTION FILE-NAME &AUX TEM I)
    (SETQ SECTION (STRING SECTION) FILE-NAME (STRING FILE-NAME))
    (SETQ I (STRING-SEARCH " " FILE-NAME (1+ (STRING-SEARCH " " FILE-NAME))))
    (SETQ TEM (STRING-APPEND SECTION "-"
			     (NSUBSTRING FILE-NAME (1+ I) (STRING-LENGTH FILE-NAME))
			     "-" (NSUBSTRING FILE-NAME 0 I)))
    (AS-1 ## - TEM (STRING-SEARCH " " TEM))
    (AS-1 ## - TEM (STRING-SEARCH " " TEM))
    (INTERN TEM))))

(DEFUN ED-COM-EDIT-DEFINITION (CHR &AUX SYMBOL)
    (ED-EDIT-DEFINITION (INTERN (ED-GET-STRING-FROM-MINI-BUFFER
				 "Name of function or section:"))))

;ED-EDIT-DEFINITION, given a symbol, tries its utmost to select a buffer
;containing that symbol's function definition,
;either by finding an existing one (made by a previous use of this function)
;or by reading the definition from the PDP-10 into a new buffer.

;The first argument is interpreted as a section-symbol.
(DEFUN ED-EDIT-DEFINITION (SECTION &OPTIONAL FILE-NAME &AUX TEM)
  (PROG ()
    (OR (SYMBOLP SECTION)
	(ED-BARF "I need a symbol! -- ED-EDIT-DEFINITION"))

    ;; If the symbol is a buffer name, just select it.
    (COND ((SETQ TEM (GET SECTION 'ED-BUFFER))
	   (ED-SELECT-BUFFER ED-WINDOW (ED-OPEN-BUFFER TEM))
	   (RETURN ED-DIS-BUFFER)))

    ;; Then it has not been read in.  If we have not read the directory of
    ;; the file which the user is thinking of, figure out which file that is
    ;; and read it in, hoping that this section will be found.
    (COND ((NULL (GET SECTION 'ED-FILE))
	   (SETQ FILE-NAME (OR FILE-NAME
			       (GET SECTION 'ED-DEFINING-FILE-NAME)
			       (INTERN
				(ED-GET-FILE-NAME
				 (FORMAT-STRING NIL "Read ~A from which file? "
						FUNCTION)))))
	   (ED-ASSURE-FILE-SCANNED FILE-NAME)))

    (COND ((SETQ TEM (GET SECTION 'ED-FILE))
	   (ED-SELECT-BUFFER ED-WINDOW (ED-OPEN-BUFFER (ED-READ-SECTION-OF-FILE SECTION TEM)))
	   (RETURN ED-DIS-BUFFER))
	  (T (ED-BARF (FORMAT-STRING NIL "Couldn't find section ~S in file ~S."
				     SECTION
				     FILE-NAME))))
    ))

;; Read in a given section of a file.  The first arg must be a section-symbol.
(DEFUN ED-READ-SECTION-OF-FILE (SECTION FILE &AUX STREAM INFO RANGE)
    (ED-VERIFY-FILE FILE)
    (OR (SETQ RANGE (GET SECTION 'ED-RANGE))
	(ERROR " is not a section-symbol." SECTION))
    (SETQ STREAM (FILE-MAPPED-OPEN FILE))
    (FILE-COMMAND (FORMAT-STRING NIL "MAPSET ~D ~D" (FIRST RANGE) (SECOND RANGE)))
    (ED-READ-FROM-FILE FILE STREAM SECTION)
    (FILE-COMMAND "MAPFLS")
    (PUTPROP SECTION ED-TICK 'ED-TICK)
    ED-OPEN-BUFFER)

;; Make sure that nobody has changed this file behind our backs.
(DEFUN ED-VERIFY-FILE (FILE &AUX OUR-ID REAL-ID)
    (COND ((SETQ OUR-ID (GET FILE 'ED-FILE-ID))
	   (FILE-COMMAND "MAPRD " (STRING FILE))
	   (SETQ REAL-ID (FILE-COMMAND "MAPINFO"))
	   (FILE-COMMAND "MAPFLS")
	   (OR (STRING-EQUAL OUR-ID REAL-ID)
	       (ERROR " has been modified on the file computer." FILE)))))
;==============================
(DEFUN ED-EVAL-FILE-HEAD (FILE-ATOM)
  (PROG (STREAM)
    (AND (GET FILE-ATOM 'ED-HEAD-EVALLED) (RETURN NIL))
    (SETQ STREAM (FILE-MAPPED-OPEN FILE-ATOM))
    (OR (EQUAL (FILE-COMMAND "FINDDEF HEAD")
	       "FUNCTION NOT FOUND")
	(DO ((EOF (NCONS NIL)) (FORM))
	    ((EQ EOF (SETQ FORM (READ EOF STREAM))))
	    (COND ((AND (LISTP FORM) (EQ (CAR FORM) 'DECLARE))
		   (MAPC (FUNCTION EVAL) (CDR FORM)))
		  (T (EVAL FORM)))))
    (FILE-COMMAND "MAPFLS")
    (PUTPROP FILE-ATOM ED-TICK 'ED-HEAD-EVALLED)))

;;; PRINT THE LIST OF FILES, OR A FILE'S LIST OF FUNCTIONS.

(DEFUN ED-PRINT-FILE-SECTION-ALIST (FILE-NAME
				    &OPTIONAL (STREAM STANDARD-OUTPUT)
				    &AUX SECTION-ALIST FILE-ATOM)
       (SETQ FILE-ATOM (INTERN FILE-NAME))
       (COND ((NULL (SETQ SECTION-ALIST (GET FILE-ATOM 'ED-FILE-SECTION-ALIST)))
	      (FORMAT-STRING STREAM "No functions have been read in from the file ~A"
			     FILE-NAME)
	      (TERPRI STREAM))
	     (T
	      (SETQ SECTION-ALIST			;Put sections in alphabetical order.
		    (SORTCAR (APPEND SECTION-ALIST NIL) 'ALPHALESSP))
              (SETQ SECTION-ALIST			;Now put special sections at front.
                    (SORT SECTION-ALIST
                          (FUNCTION (LAMBDA (X Y)
                               (AND (MEMQ (CAR X) ED-SPECIAL-SECTION-LIST)
                                    (NOT (MEMQ (CAR Y) ED-SPECIAL-SECTION-LIST)))))))
              (COND ((ED-FILE-MUNGED-P FILE-ATOM)
                     (FORMAT-STRING STREAM "From file ~A, these functions need updating:~%"
                                    FILE-NAME)
                     (ED-PRINT-LIST-WITH-COMMAS
                         (MAPCAN (FUNCTION (LAMBDA (DESC)
                                    (AND (ED-BUFFER-MUNGED-P (GET (CDR DESC) 'ED-BUFFER))
                                         (NCONS (CAR DESC)))))
                                 SECTION-ALIST)
                          STREAM))
                    ((FORMAT-STRING STREAM "File ~A needs no updating." FILE-NAME))) 
              (TERPRI STREAM)
              (COND ((NOT (ED-FILE-TOTALLY-MUNGED-P FILE-ATOM))
                     (FORMAT-STRING STREAM "These functions are present, unmodified:~%")
                     (ED-PRINT-LIST-WITH-COMMAS
                         (MAPCAN (FUNCTION (LAMBDA (DESC)
                                    (AND (NOT (ED-BUFFER-MUNGED-P (GET (CDR DESC) 'ED-BUFFER)))
					 (NCONS (CAR DESC)))))
                                 SECTION-ALIST)
                           STREAM)
                     (TERPRI STREAM)))
              )))

(DEFUN ED-COM-PRINT-FILE-SECTION-ALIST (IGNORE &AUX (STANDARD-OUTPUT ED-DEBUG-STREAM)
					      FILE-NAME)
       (SETQ FILE-NAME (ED-GET-DEFAULTED-FILE-NAME "List functions in file: "))
       (TV-CLEAR-PC-PPR ED-DEBUG-PC-PPR)
       (ED-PRINT-FILE-SECTION-ALIST FILE-NAME)
       ED-DIS-BUFFER)

(DEFUN ED-COM-PRINT-FILE-LIST (IGNORE &AUX (FIRSTFILE T)
                                      (STANDARD-OUTPUT ED-ECHO-STREAM))
       (TV-CLEAR-PC-PPR ED-ECHO-PC-PPR)
       (PRINC "Functions are being edited from these files:")
       (TERPRI)
       (ED-PRINT-LIST-WITH-COMMAS ED-FILE-LIST)
       (TERPRI)
       ED-DIS-NONE)

;;; FORGET A FILE, OR A FUNCTION.

(DEFUN ED-COM-KILL-BUFFER (IGNORE &AUX TEM)
    (SETQ TEM (ED-COMPLETING-READ-PROMPT  "Buffer to kill (RETURN to kill current buffer): "
					  ED-BUFFER-MODE-LIST ED-BUFFER-ALIST
					  ED-COMMAND-STREAM T T))
    (COND ((MEMQ TEM '(0 NIL)) (ED-BARF))
	  ((STRINGP TEM)
	   (COND ((ZEROP (STRING-LENGTH TEM)) (ED-KILL-BUFFER ED-OPEN-BUFFER))
		 (T (ED-BARF))))
	  (T (ED-KILL-BUFFER (CDR TEM))))
    ED-DIS-NONE)

;If it was read in from a file, update the EDFN data base.
;This takes either a buffer or a buffer name.
(DEFUN ED-KILL-BUFFER (BUFFER &AUX BUFFER-NAME FILE-SYM SECTION-ALIST TEM)
    (AND (SYMBOLP BUFFER) (SETQ BUFFER (GET BUFFER 'ED-BUFFER)))
    (SETQ BUFFER-NAME (ED-BUFFER-NAME BUFFER))
    (AND (EQ BUFFER ED-OPEN-BUFFER) (SETQ ED-OPEN-BUFFER NIL))
    (AND (EQ BUFFER ED-PREVIOUS-OPEN-BUFFER)
	 (SETQ ED-PREVIOUS-OPEN-BUFFER
	       (COND (ED-BUFFER-ALIST (CDAR ED-BUFFER-ALIST))
		     (T ED-OPEN-BUFFER))))
    (COND ((SETQ FILE-SYM (GET BUFFER-NAME 'ED-READ-IN-FILE))
	   (SETQ SECTION-ALIST (GET FILE-SYM 'ED-FILE-SECTION-ALIST))
	   (PUTPROP FILE-SYM
		    (DELQ (RASSOC BUFFER-NAME SECTION-ALIST) SECTION-ALIST)
		    'ED-FILE-SECTION-ALIST)))
    (AND (SETQ TEM (ASSQ BUFFER-NAME ED-BUFFER-ALIST))
	 (SETQ ED-BUFFER-ALIST (DELQ TEM ED-BUFFER-ALIST)))
    (MAPC '(LAMBDA (X) (REMPROP BUFFER-NAME X))
	  ED-BUFFER-NAME-PROPERTIES)	  
    )

(DEFUN ED-COM-REVERT-BUFFER (IGNORE)
    (ED-REVERT-BUFFER (ED-GET-BUFFER-BY-NAME "Buffer to revert:"))
    ED-DIS-BUFFER)

;Kill a buffer and read the function back in again.
;This takes either a buffer or a buffer name.
(DEFUN ED-REVERT-BUFFER (BUFFER &AUX FILE-ATOM)
    (AND (SYMBOLP BUFFER) (SETQ BUFFER (GET BUFFER 'ED-BUFFER)))
    (SETQ FILE-ATOM (GET BUFFER 'ED-READ-IN-FILE))
    (ED-KILL-BUFFER BUFFER)
    (ED-EDIT-DEFINITION BUFFER FILE-ATOM))

(DEFUN ED-COM-KILL-ALL-BUFFERS (IGNORE)
    (AND (ED-CONFIRM "Do you really want to kill all buffers?")
	 (ED-KILL-ALL-BUFFERS))
    ED-DIS-SCREEN)

(DEFUN ED-KILL-ALL-BUFFERS ()
    (MAPC '(LAMBDA (X) (ED-KILL-BUFFER (CDR X))) ED-BUFFER-ALIST))

(DEFUN ED-COM-FORGET-ALL-FILES (IGNORE)
    (AND (ED-CONFIRM "Do you really want to forget all files?")
	 (ED-FORGET-ALL-FILES))
    ED-DIS-SCREEN)

(DEFUN ED-FORGET-ALL-FILES ()
    (MAPC 'ED-FORGET-FILE ED-FILE-LIST))

(DEFUN ED-COM-FORGET-FILE (IGNORE)
       (ED-FORGET-FILE (ED-GET-DEFAULTED-FILE-NAME "File to forget: ")))

;Forget that we read in any functions from the specified file.
(DEFUN ED-FORGET-FILE (FILE-NAME &AUX FILE-ATOM (OLD-OPEN-BUFFER ED-OPEN-BUFFER))
       (SETQ FILE-ATOM (COND ((SYMBOLP FILE-NAME) FILE-NAME)
			     (T (INTERN FILE-NAME))))
       (DO ((DESCS (GET FILE-ATOM 'ED-FILE-SECTION-ALIST) (CDR DESCS))
	    (FN))
	   ((NULL DESCS))
	 (ED-KILL-BUFFER (CDAR DESCS)))
       (REMPROP FILE-ATOM 'ED-FILE-SECTION-ALIST)
       (REMPROP FILE-ATOM 'ED-HEAD-EVALLED)
       (SETQ ED-FILE-LIST (DELQ FILE-ATOM ED-FILE-LIST))
       (COND ((EQ OLD-OPEN-BUFFER ED-OPEN-BUFFER) ED-DIS-NONE)
	     (T ED-DIS-BUFFER)))

(DEFUN ED-BUFFER-MUNGED-P (BUFFER &AUX TICK)
    (AND (SYMBOLP BUFFER) (SETQ BUFFER (GET BUFFER 'ED-BUFFER)))
    (SETQ TICK (GET (ED-BUFFER-NAME BUFFER) 'ED-TICK))
    (OR (NULL TICK)
	(< TICK (ED-BUFFER-MUNGED BUFFER))))

;Does any function in the specified file need to be updated to the PDP10?
(DEFUN ED-FILE-MUNGED-P (FILE-ATOM)
    (SOME (MAPCAR (FUNCTION CDR) (GET FILE-ATOM 'ED-FILE-SECTION-ALIST))
	  'ED-BUFFER-MUNGED-P))

;Does EVERY function in the specified file need to be updated to the PDP10?
(DEFUN ED-FILE-TOTALLY-MUNGED-P (FILE-ATOM)
    (EVERY (MAPCAR (FUNCTION CDR) (GET FILE-ATOM 'ED-FILE-SECTION-ALIST))
	   'ED-BUFFER-MUNGED-P))

;;; UPDATING FILES

(DEFUN ED-COM-UPDATE-FILE (IGNORE &AUX FILE-ATOM)
       (SETQ FILE-ATOM (INTERN (ED-GET-DEFAULTED-FILE-NAME "File to update: ")))
       (COND ((ED-FILE-MUNGED-P FILE-ATOM)
	      (ED-UPDATE-FILE FILE-ATOM))
	     (T
              (FORMAT-STRING STANDARD-OUTPUT
			     "There is nothing to update in file ~A~%"
			     FILE-ATOM)
              ED-DIS-NONE)))

;Given an atom on ED-FILE-LIST, update the file by writing back the
;definitions of such functions in the file as need it.
;A function "needs it" if its definition has been modified since last read or written in file.

(DEFUN ED-UPDATE-FILE (FILE-ATOM &AUX OLD-FNS NEW-FNS TEM INPOS INSIZE
				 BUFFER-NAME RANGE NEWBEG
				 (ED-OUTPOS 0) STREAM OLD-ID NEW-ID USER-NOTIFIED)
   (PROG ()
      ;;OLD-FNS gets a list of all buffer names for sections read from the file,
      ;;NEW-FNS gets a list of buffer names for sections newly added to the file.
      (DO ((TEM (GET FILE-ATOM 'ED-FILE-SECTION-ALIST) (CDR TEM)))
	  ((NULL TEM))
	  (COND ((GET (CDAR TEM) 'ED-RANGE)
		 (PUSH (CDAR TEM) OLD-FNS)
		 (AND (EQ (CAR TEM) 'HEAD) (REMPROP FILE-ATOM 'ED-HEAD-EVALLED)))
		(T (PUSH (CDAR TEM) NEW-FNS))))
      ;;Sort the OLD-FNS by their positions in the file. 
      (SETQ OLD-FNS
	    (SORT OLD-FNS
		  (FUNCTION (LAMBDA (DESC1 DESC2)
		       (< (CAR (GET DESC1 'ED-RANGE)) (CAR (GET DESC2 'ED-RANGE)))))))
      ;; Now load the old file and start writing the new.
      (FILE-COMMAND-CAREFUL "MAPRD " (GET-PNAME FILE-ATOM))
      (SETQ STREAM (OPEN (GET-PNAME FILE-ATOM) '(WRITE))
	    OLD-ID (STRING-APPEND (FILE-COMMAND "MAPINFO"))
	    INSIZE (ED-FILE-ID-EXTRACT-SIZE OLD-ID)
	    INPOS 0
	    RANGE NIL)

   NEXT

      ;; Here to handle the next buffer name from OLD-FNS.
      ;; RANGE holds the (start size) of the previous buffer.
      (OR OLD-FNS (GO END))
      (SETQ BUFFER-NAME (CAR OLD-FNS) OLD-FNS (CDR OLD-FNS))
      (OR (EQUAL RANGE (GET BUFFER-NAME 'ED-RANGE))
	  (PROGN (SETQ RANGE (GET BUFFER-NAME 'ED-RANGE))
      ;; Copy the stuff from the old file to the new, up to next old function we have.
		 (SETQ TEM (CAR RANGE))
		 (ED-MAPOUT INPOS TEM)))
      ;; Skip pointer in old file past what we copied, and also
      ;; past the old definition of our old file.
      (SETQ INPOS (+ TEM (SECOND RANGE)))
      (SETQ NEWBEG ED-OUTPOS)
      ;; Write out the updated definition of the old file, if function has been changed.
      (COND ((ED-BUFFER-MUNGED-P BUFFER-NAME)
	     (ED-WRITE-BACK-BUFFER BUFFER-NAME STREAM OLD-ID))
      ;;; Otherwise just copy out the definition in the old file.
	    (T (ED-MAPOUT TEM INPOS)
      ;;; Do realize that the function's position in the file has changed.
	       (PUTPROP BUFFER-NAME (LIST NEWBEG (- ED-OUTPOS NEWBEG)) 'ED-NEW-RANGE)))

      (GO NEXT)

   END

      ;; After the last OLD-FN, copy out the rest of the old file, followed by the new fns.
      (ED-MAPOUT INPOS INSIZE)
      (DO ((NEW-FNS NEW-FNS (CDR NEW-FNS)))
	  ((NULL NEW-FNS))
	  (ED-WRITE-BACK-BUFFER (CAR NEW-FNS) STREAM OLD-ID))
      (CLOSE STREAM)

      ;; Now read the new file's file-id (must wait till now since now size is known)
      ;; and put it into the descriptors of all the functions just updated.
      (SETQ NEW-ID (STRING-APPEND (FILE-COMMAND "OUTINFO")))
      (DO ((DESCS (GET FILE-ATOM 'ED-FILE-SECTION-ALIST) (CDR DESCS))
	   (TEM) (BUFFER-NAME))
	  ((NULL DESCS))
	  (SETQ BUFFER-NAME (CDAR DESCS))
	  (PUTPROP BUFFER-NAME NEW-ID 'ED-FILE-ID)
	  (SETQ TEM (GET BUFFER-NAME 'ED-NEW-RANGE))
	  (PUTPROP BUFFER-NAME TEM 'ED-RANGE)
	  (PUTPROP BUFFER-NAME ED-TICK 'ED-TICK)
	  (REMPROP BUFFER-NAME 'ED-NEW-RANGE))
      (FILE-COMMAND "MAPFLS")
      (SETQ ED-TICK (1+ ED-TICK))
      (RETURN ED-DIS-NONE)))

;Given a FILE-ID "version date time size", extract the size, and convert to a number.
(DEFUN ED-FILE-ID-EXTRACT-SIZE (ID &AUX POS (IBASE 10.))
       (SETQ POS (STRING-SEARCH " " ID))
       (SETQ POS (STRING-SEARCH " " ID (1+ POS)))
       (SETQ POS (STRING-SEARCH " " ID (1+ POS)))
       (READ-FROM-STRING (NSUBSTRING ID (1+ POS) (STRING-LENGTH ID))))

;Write the range <start> - <end> of the mapped file to the output file.
;Update the variable ED-OUTPOS, the output file character address, for that text.
(DEFUN ED-MAPOUT (START END)
      (OR (= START END) 			;Unless next old fn is very next thing,
	  (FILE-COMMAND-CAREFUL "MAPOUT "	;copy out everything up to there.
			(FORMAT-STRING NIL "~D ~D"
				       START (- END START))))
      (SETQ ED-OUTPOS (+ ED-OUTPOS (- END START))))

;Given a function-descriptor (fn buffer range file-id),
;write the function definition to STREAM, and update <range> to correspond
;to the position and size of the definition in the new file.
;Also takes a the <file-id>'s of the files being read and written
;in the variables OLD-ID and NEW-ID.
;ED-USER-NOTIFIED is T if the user already knows that the
;copy on disk was updated in the meantime, and has said to proceed.
(DEFUN ED-WRITE-BACK-BUFFER (BUFFER-NAME STREAM OLD-ID
					 &AUX ED-OPEN-BUFFER TEM-BP NEW-ID
					 NEWBEG NEWEND (IBASE 10.))
      (OR (NULL (SETQ NEW-ID (GET BUFFER-NAME 'ED-FILE-ID)))
	  (STRING-EQUAL OLD-ID NEW-ID)
	  ED-USER-NOTIFIED
	  (PROGN (SETQ ED-USER-NOTIFIED T)
		 (FORMAT-STRING STANDARD-OUTPUT
				"~%File on disk has changed since function ~A was read in"
				BUFFER-NAME)
		 (BREAK T)))
      (SETQ ED-OPEN-BUFFER (GET BUFFER-NAME 'ED-BUFFER))
      (SETQ TEM-BP (ED-COPY-BP (ED-BUFFER-POINT) 'TEMP))
      (FUNCALL (ED-BUFFER-STREAM) 'INITIALIZE)
      (SETQ NEWBEG ED-OUTPOS)
      (STREAM-COPY-UNTIL-EOF (ED-BUFFER-STREAM) STREAM)	   
      (FUNCALL STREAM 'FINISH)
      (SETQ ED-OUTPOS (FUNCALL STREAM 'READ-POINTER))
      (PUTPROP BUFFER-NAME
	       (LIST NEWBEG (- ED-OUTPOS NEWBEG))
	       'ED-NEW-RANGE)
      (ED-MOVE-POINT TEM-BP))

(DEFUN ED-COM-UPDATE-ALL-FILES (CHR &AUX FILE-SYMBOL)
    (TV-ACTIVATE-PC-PPR ED-DISPLAY-PC-PPR)
    (TV-HOME ED-DISPLAY-PC-PPR)
    (DO L ED-FILE-LIST (CDR L) (NULL L)
      (SETQ FILE-SYMBOL (CAR L))
      (COND ((ED-FILE-MUNGED-P FILE-SYMBOL)
	     (TV-CLEAR-EOL ED-DISPLAY-PC-PPR)
	     (FORMAT-STRING ED-DISPLAY-STREAM "Update file ~A ? " (GET-PNAME FILE-SYMBOL))
	     (COND ((YES-OR-NO-P)
		    (FORMAT-STRING ED-DISPLAY-STREAM "Yes.~%")
		    (ED-UPDATE-FILE FILE-SYMBOL))
		   (T (FORMAT-STRING ED-DISPLAY-STREAM "No.~%"))))))
    (TV-DEACTIVATE-PC-PPR ED-DISPLAY-PC-PPR)
    (SETQ ED-SPECIAL-SCREEN-P T)
    ED-DIS-NONE)

;;; Read in the entire contents of a file, splitting it into buffers.
;;; Of course, those regions which were already read in are not read in again,
;;; to avoid clobbering any changes.

(DEFUN ED-COM-LOAD-WHOLE-FILE (IGNORE)
       (ED-LOAD-WHOLE-FILE (INTERN (ED-GET-DEFAULTED-FILE-NAME "File to load: "))))

(DEFUN ED-LOAD-WHOLE-FILE (FILE-ATOM &AUX I1 I2 TEM FILE-ID SECTION-ALIST STREAM FILE-NAME
				     SECTION (INPOS 0) RANGE SIZE BUFFER (IBASE 10.))


   (PROG ()
       (SETQ SECTION-ALIST (GET FILE-ATOM 'ED-FILE-SECTION-ALIST))
       (SETQ STREAM (FILE-MAPPED-OPEN (GET-PNAME FILE-ATOM)))
       (SETQ FILE-ID (STRING-APPEND (FILE-COMMAND "MAPINFO")))
       (SETQ FILE-NAME (GET-PNAME FILE-ATOM))

       NEXT

       ;; Find the next definition after what we already read in.
       (SETQ TEM (FILE-COMMAND (FORMAT-STRING NIL "NEXTDEF ~D" INPOS)))
       (AND (STRING-EQUAL TEM "FUNCTION NOT FOUND")
	    (RETURN (PROGN (ED-SELECT-BUFFER ED-WINDOW ED-OPEN-BUFFER)
			   (FILE-COMMAND "MAPFLS")
			   ED-DIS-NONE)))		;Exit if there are no more defns left.
       ;; Extract the function name and range in file from what was returned.
       (SETQ I1 (STRING-SEARCH " " TEM)
	     I2 (STRING-SEARCH " " TEM (1+ I1))
	     SECTION (INTERN (STRING-UPCASE (NSUBSTRING TEM (1+ I2)
							 (STRING-LENGTH TEM)))))
       (OR (= INPOS (READ-FROM-STRING (NSUBSTRING TEM 0 I1)))
	   (BREAK "NEXTDEF LOSES"))
       (SETQ RANGE (LIST INPOS
			 (SETQ SIZE (READ-FROM-STRING (NSUBSTRING TEM (1+ I1) I2)))))
       (SETQ INPOS (+ SIZE INPOS))
       ;; If we don't already have that section read in, read it in.
       (OR (ASSQ SECTION SECTION-ALIST)
	   (DO ((ED-OPEN-BUFFER ED-OPEN-BUFFER)) ()
	       (ED-READ-FROM-FILE FILE-NAME STREAM (ED-SECTION-BUFFER-NAME SECTION FILE-NAME))
	       (ED-ADD-SECTION-TO-FILE SECTION ED-OPEN-BUFFER FILE-NAME RANGE FILE-ID)))

       (GO NEXT)))
