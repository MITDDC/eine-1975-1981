;;; This file is part of EINE, the Lisp Machine editor.        -*-LISP-*-
;;; For more information see LISPM2;EINE INFO.

;; This file contains functions for deleting, inserting, killing, saving, and 
;;    yanking text, and relocation bps.

(DECLARE (SETQ RETAIN-VARIABLE-NAMES-SWITCH 'ARGS))
(DECLARE (SETQ OPEN-CODE-MAP-SWITCH T))


; The top-level deletion function is ED-DELETE-CHARS which takes a buffer pointer
;   and a number of chars to delete.  It opens the line, stores the changes, etc.
; Returns NIL if there aren't that many characters to delete.
(DEFUN ED-DELETE-CHARS (BP NUM &AUX BP1)
    (COND ((SETQ BP1 (ED-MOVE-BP-FORWARD (ED-COPY-BP BP 'TEMP) NUM))
	   (ED-DELETE-BETWEEN BP BP1))
	  (T NIL)))

(DEFUN ED-DELETE-BETWEEN (BP1 BP2 &AUX LINE-NUM1 LINE-NUM2 LINE)
   (MULTIPLE-VALUE (BP1 BP2)
		   (ED-ORDER-BPS BP1 BP2))
   (SETQ LINE-NUM1 (ED-BP-LINE-NUM BP1))
   (SETQ LINE-NUM2 (ED-BP-LINE-NUM BP2))
   (COND ((= LINE-NUM1 LINE-NUM2)
	  (ED-DELETE-WITHIN-LINE (ED-BP-LINE BP1) (ED-BP-CHAR-POS BP1) (ED-BP-CHAR-POS BP2))
	  (ED-MOVE-BP BP2 BP1))
	 (T
	  (SETQ LINE (AR-1 ED-OPEN-BUFFER LINE-NUM2))
	  (ED-DELETE-WITHIN-LINE LINE 0 (ED-BP-CHAR-POS BP2))
	  (SETQ LINE (AR-1 ED-OPEN-BUFFER LINE-NUM1))
	  (ED-TRUNCATE-LINE LINE-NUM1 (ED-BP-CHAR-POS BP1))
	  (DO I (1+ LINE-NUM1) (1+ I) (>= I LINE-NUM2)
	    (LOCAL-MAPC (FUNCTION (LAMBDA (BP)
					  (ED-MOVE-BP BP BP1)))
			(ED-LINE-BUFFER-POINTER-LIST (AR-1 ED-OPEN-BUFFER I))))
	  (ED-GLUE-LINE (ED-BP-LINE BP2) LINE-NUM1)
	  (ED-TAKE-ROOM-FROM-BUFFER LINE-NUM1 (- LINE-NUM2 LINE-NUM1))))
   BP1)

(DEFUN ED-DELETE-WITHIN-LINE (LINE CHAR-POS REAL-END &AUX LINE-LENGTH NUMBER)
       (SETQ NUMBER (- REAL-END CHAR-POS))
       (SETQ LINE-LENGTH (ED-LINE-FILL-POINTER LINE))
       (DO ((FROM REAL-END (1+ FROM))
	    (TO CHAR-POS (1+ TO)))
	   ((>= FROM LINE-LENGTH) T)
	   (AS-1 (AR-1 LINE FROM) LINE TO))
       (SETF (ED-LINE-FILL-POINTER LINE) (- (ED-LINE-FILL-POINTER LINE) NUMBER))
       (ED-MUNG LINE)
       (ED-NOTE-LINE-CHANGE 'DELETE LINE CHAR-POS NUMBER))


; THIS COMMENT IS OBSOLETE!!!  (BUT CLOSE).
; RELOCATE buffer pointers:  when inserting and deleting, buffer pointers
; must get updated in order to stay correct.  Fortunately, due to the new data 
; structures, only the open line's buffer pointers need be hacked.
; ED-NOTE-LINE-CHANGE takes as its first arg the type of change which was
; made, either INSERT or DELETE.  The second is the position of the change,
; and the third the number of characters inserted or deleted.


(DEFUN ED-NOTE-LINE-CHANGE (TYPE LINE POSITION AMOUNT &AUX CHAR-POS)
       (LOCAL-MAPC
	(FUNCTION (LAMBDA (BP)
			  (SETQ CHAR-POS (ED-BP-CHAR-POS BP))
			  (COND ((EQ TYPE 'INSERT)
				 (AND (OR (> CHAR-POS POSITION)
					  (AND (= CHAR-POS POSITION)
					       (EQ (ED-BP-STATUS BP) 'MOVES)))
				      (SETQ CHAR-POS (+ CHAR-POS AMOUNT))))
				((EQ TYPE 'DELETE)
				 (COND ((< CHAR-POS POSITION))	;DO NOTHING
				       ((< CHAR-POS (+ AMOUNT POSITION))  ;IT WAS DELETED
					(SETQ CHAR-POS POSITION))
				       (T
					(SETQ CHAR-POS (- CHAR-POS AMOUNT)))))
				(T (ED-BARF "Unknown line change " TYPE
					    " -- ED-NOTE-LINE-CHANGE")))
			  (SETF (ED-BP-CHAR-POS BP) CHAR-POS)))
	(ED-LINE-BUFFER-POINTER-LIST LINE)))

(DEFUN ED-TAKE-ROOM-FROM-BUFFER (LINE-NUM ROOM &AUX (LIM (ED-BUFFER-FILL-POINTER)) TEM)
    (COND ((> ROOM 0)
	   (DO ((FROM (1+ (+ LINE-NUM ROOM)) (1+ FROM))
		(TO (1+ LINE-NUM) (1+ TO)))
	       ((>= FROM LIM) NIL)
	    (SETQ TEM (AR-1 ED-OPEN-BUFFER FROM))
	    (ED-INSERT-LINE-INTO-OPEN-BUFFER TEM TO))
	   (SETF (ED-BUFFER-FILL-POINTER) (- LIM ROOM)))))

; ED-TRUNCATE-LINE deletes off the end of a line.  The first arg is the
; the LINE-NUM of the victim, and the second arg is the
; CHAR-POS after which to truncate.

(DEFUN ED-TRUNCATE-LINE (LINE-NUM CHAR-POS &AUX LEN LINE)
    (SETQ LINE (AR-1 ED-OPEN-BUFFER LINE-NUM))
    (SETQ LEN (ED-LINE-FILL-POINTER LINE))
    (COND ((> CHAR-POS LEN)
	   (ED-BARF "Truncate past end of line " LINE-NUM " --- ED-TRUNCATE-LINE"))
	  (T 
	   (SETF (ED-LINE-FILL-POINTER LINE) CHAR-POS)
	   (ED-MUNG LINE)
	   (ED-NOTE-LINE-CHANGE 'DELETE LINE CHAR-POS (- LEN CHAR-POS))
	   (ED-BP 0 LINE 'TEMP))))


; ED-GLUE-LINE is the opposite of ED-BREAK-LINE; it takes as its first argument
; a line, which it glues onto the end of the open line.  There is an optional
; second arg, which is a line-number to open before the gluing.  The buffer pointers
; are all changed to be correct.  The glued line is of course useless, so
; it should be flushed.  the new open line is returned.
; CALLED BY ED-DELETE-BETWEEN.


(DEFUN ED-GLUE-LINE (LINE LINE1-NUM &AUX LINE1 OLD-BP-LIST BP-LIST LENGTH)
       (SETQ LINE1 (AR-1 ED-OPEN-BUFFER LINE1-NUM))
       (SETQ LENGTH (ED-LINE-FILL-POINTER LINE1))
       (SETQ LINE1 (ED-FILL-LINE LINE1 LINE))
       (SETQ BP-LIST (ED-LINE-BUFFER-POINTER-LIST LINE1))
       (SETQ OLD-BP-LIST (ED-LINE-BUFFER-POINTER-LIST LINE))
       (LOCAL-MAPC
	(FUNCTION (LAMBDA (BP)
			  (SETF (ED-BP-LINE BP) LINE1)
			  (SETF (ED-BP-CHAR-POS BP) (+ LENGTH (ED-BP-CHAR-POS BP)))
			  (SETQ BP-LIST (CONS BP BP-LIST))))
	OLD-BP-LIST)
       (SETF (ED-LINE-BUFFER-POINTER-LIST LINE1) BP-LIST)
       (SETF (ED-LINE-BUFFER-POINTER-LIST LINE) NIL)	;PROBABLY SUPERFLUOUS, BUT...
       LINE1)

; Delete the entire buffer, by truncating all lines to 0.
(DEFUN ED-WIPE-BUFFER (ED-OPEN-BUFFER &AUX LIM)
    (SETQ LIM (ED-BUFFER-FILL-POINTER ED-OPEN-BUFFER))
    (DO I 0 (1+ I) (>= I LIM)
	(ED-TRUNCATE-LINE I 0))
    ED-OPEN-BUFFER)

(COMMENT INSERTION)

; Insertion functions:  The top level insertion function is ED-INSERT-CHARS
;   which takes a buffer pointer and a string to insert.  It hands the work off
;   to either ED-INSERT-CR-FREE-STRING or ED-INSERT-CR-FULL-STRING, both of
;   which are suitably toplevel (open lines and hack open-line-changes).
;   ED-INSERT-STRING-IN-OPEN-LINE is a primitive which does the actual
;   insertion; it must be passed a CR free string, which it will insert in the
;   open line; it never closes nor opens any lines.

(DEFUN ED-INSERT-CHARS (BP STRING)
       (COND 
	((AND (NUMBERP STRING) (CHAR-EQUAL STRING 215))
	 (ED-INSERT-CRS BP 1))
	((ED-STRING-MEMQ 215 STRING)
	 (ED-INSERT-CR-FULL-STRING BP STRING))
	(T
	 (ED-INSERT-CR-FREE-STRING BP STRING))))

; An alternative top level function (which, in fact, calls ED-INSERT-CHARS)
; is ED-INSERT-CHARS-MOVING, which is the same but moving the buffer pointer
; (i.e., it clobbers the buffer pointer to point at the end of the inserted
; text.)  This is the type of insertion used in TECO.

(DEFUN ED-INSERT-CHARS-MOVING (BP STRING)
       (ED-MOVE-BP BP (ED-INSERT-CHARS BP STRING)))

(DEFUN ED-INSERT-CR-FREE-STRING (BP STRING &AUX RETURNED-BP CHAR-POS LINE-LENGTH
				                STRING-LEN GAP-START TEM LINE 16BIT-P)
    (SETQ LINE (ED-BP-LINE BP))
    (SETQ CHAR-POS (ED-BP-CHAR-POS BP))
    (ED-MUNG LINE)
    (SETQ LINE-LENGTH (ED-LINE-FILL-POINTER LINE))
    (SETQ STRING-LEN (STRING-LENGTH STRING))
    (SETQ RETURNED-BP
	  (COND ((> CHAR-POS LINE-LENGTH)
		 (ED-BARF "Insert beyond end of line -- ED-INSERT-STRING-IN-OPEN-LINE "
			  CHAR-POS)
		 (SETQ TEM (- CHAR-POS LINE-LENGTH))		; NUMBER OF BLANKS NEEDED
		 (SETQ LINE (ED-ASSURE-ROOM-IN-LINE LINE (+ TEM STRING-LEN)))
							        ;*****THAT IS A SLIGHT CROCK...
		 (DO I 0 (1+ I) (>= I TEM)
		   (ARRAY-PUSH LINE (DPB ED-CURRENT-DEFAULT-FONT %%CH-FONT 40)))
		 (SETQ LINE (ED-FILL-LINE LINE STRING))
		 (ED-BP (ED-LINE-FILL-POINTER LINE) LINE 'TEMP))	;RETURNED BP
		
		((= CHAR-POS LINE-LENGTH)
		 (SETQ LINE (ED-FILL-LINE LINE STRING))
		 (ED-BP (ED-LINE-FILL-POINTER LINE) LINE 'TEMP))	;RETURNED BP
		(T (SETQ LINE (ED-ASSURE-ROOM-IN-LINE LINE STRING-LEN))
		   (SETQ 16BIT-P (EQ (ARRAY-TYPE LINE) 'ART-16B))
		   (DO ((FROM (1- LINE-LENGTH) (1- FROM))
			(TO (1- (+ LINE-LENGTH STRING-LEN)) (1- TO)))
		       ((< FROM CHAR-POS) NIL)
		     (AS-1 (AR-1 LINE FROM) LINE TO))
		   (COND ((NUMBERP STRING)
			  (AND (>= STRING 400)
			       (NOT 16BIT-P)
			       (SETQ LINE (ED-EXPAND-LINE LINE NIL 'ART-16B)))
			  (AS-1 STRING LINE CHAR-POS))
			 (T (DO ((I CHAR-POS (1+ I))
				 (J 0 (1+ J)))
				((>= J STRING-LEN) NIL)
			      (AND (>= (SETQ TEM (AR-1 STRING J)) 400)
				   (NOT 16BIT-P)
				   (SETQ 16BIT-P T LINE (ED-EXPAND-LINE LINE NIL 'ART-16B)))
			      (AS-1 TEM LINE I))))
		   (SETF (ED-LINE-FILL-POINTER LINE)
			 (+ (ED-LINE-FILL-POINTER LINE) STRING-LEN))
		   (ED-BP (+ CHAR-POS STRING-LEN) LINE 'TEMP))))
    (ED-NOTE-LINE-CHANGE 'INSERT LINE CHAR-POS STRING-LEN)
    RETURNED-BP)


(DEFUN ED-INSERT-CR-FULL-STRING (BP STRING &AUX		;STRING MAY NOT BE A FIXNUM
				    LINE-NUM CHAR-POS TEM)
       (SETQ LINE-NUM (ED-BP-LINE-NUM BP))
       (SETQ CHAR-POS (ED-BP-CHAR-POS BP))
       (SETQ TEM (ED-COUNT-CHARS 215 STRING))
       (ED-MAKE-ROOM-IN-BUFFER LINE-NUM TEM)
       (ED-NEW-BREAK-LINE BP (+ LINE-NUM TEM))
;       (ED-INSERT-LINE-INTO-OPEN-BUFFER
;	(ED-BREAK-LINE CHAR-POS LINE-NUM)
;	(+ LINE-NUM TEM))
       (DO ((LINE-NUM LINE-NUM (1+ LINE-NUM))
	    (CHAR-POS CHAR-POS 0)
	    (FROM 0 (1+ TO))
	    (TO (ED-STRING-MEMQ 215 STRING)
		(ED-STRING-MEMQ 215 STRING (1+ TO))))
	   ((NULL TO)
	       (ED-INSERT-CR-FREE-STRING
		(ED-BP CHAR-POS
			    (AR-1 ED-OPEN-BUFFER LINE-NUM)
			    'TEMP)			; THIS IS WHAT WE RETURN
		(NSUBSTRING STRING FROM  (STRING-LENGTH STRING) ED-RANDOM-AREA)))

	 (ED-INSERT-CR-FREE-STRING (ED-BP CHAR-POS (AR-1 ED-OPEN-BUFFER LINE-NUM) 'TEMP)
				   (NSUBSTRING STRING FROM TO ED-RANDOM-AREA))))

;Among the reasons this doesn't work is that ED-ADD-LINE-TO-BUFFER has been flushed.
;(DEFUN ED-CONVERT-STRING-TO-BUFFER (STRING &AUX OLD-BUFFER TEM SIZE ED-OPEN-BUFFER)
;       (SETQ ED-OPEN-BUFFER (ED-CREATE-BUFFER))		; OPEN THE NEW BUFFER
;       (SETQ TEM (ED-STRING-MEMQ 215 STRING))
;       (COND ((NULL TEM)				; IF NO CR'S, EASY
;	      (ED-INSERT-CR-FREE-STRING (ED-BUFFER-POINT) STRING)
;	      (SETQ SIZE 1))
;	     ((NUMBERP STRING)				; THE CHARACTER 215 (NEWLINE)
;	      (ED-ADD-LINE-TO-BUFFER 'ART-STRING)
;	      (SETQ SIZE 2))
;	     (T (ED-INSERT-CR-FREE-STRING		; PUT IN THE FIRST LINE
;		 (ED-BUFFER-POINT) (ED-SUBSTRING STRING 0 TEM))
;		(DO ((S (ED-SUBSTRING STRING (1+ TEM) (ED-STRING-LENGTH STRING))
;			(ED-SUBSTRING S (1+ CRLOC) (ED-STRING-LENGTH S)))
;		     (I 1 (1+ I))			; S IS SUCCESIVE SUBSTRINGS, I THE
;		     (CRLOC))				; INDEX INTO THE BUFFER
;		    ((NULL (SETQ CRLOC (ED-STRING-MEMQ 215 S)))
;		     (ED-INSERT-LINE-INTO-OPEN-BUFFER
;		      (ED-FILL-LINE (ED-CREATE-LINE 'ART-STRING) S)
;		      I)
;		     (SETQ SIZE (1+ SIZE)))
;							
;		    (ED-INSERT-LINE-INTO-OPEN-BUFFER	; NOW, THE DO BODY:
;		     (ED-FILL-LINE (ED-CREATE-LINE 'ART-STRING) (ED-SUBSTRING S 0 CRLOC))
;		     I)
;		    (SETQ SIZE (1+ SIZE)))))
;       (SETF (ED-BUFFER-FILL-POINTER) SIZE)
;       ED-OPEN-BUFFER)					; AND RETURN THE BUFFER

; More insertion functions.

; ED-INSERT-LINE-INTO-OPEN-BUFFER is used to put lines into the open buffer;
; it makes sure the ED-LINE-NUMBER is set up right too.  The first arg
; is the line to be inserted, and the second arg is the index into the
; open buffer.

(DEFUN ED-INSERT-LINE-INTO-OPEN-BUFFER (LINE WHERE)
   (SETF (ED-LINE-BUFFER LINE) ED-OPEN-BUFFER)
   (SETF (ED-LINE-NUMBER LINE) WHERE)
   (AS-1 LINE ED-OPEN-BUFFER WHERE))

; ED-MAKE-ROOM-IN-BUFFER opens up some space in the buffer, keeping
; the LINE-NUMBERS straight.  The first arg is the LINE-NUM of the last unmoved line,
; the second is the number of lines the caller wants opened.
; Be careful, it closes the open line.
; Also, any bp's of type NORMAL pointing at the beginning of the line
; after LINE-NUM are not relocated by this!  Use ED-PULL-BACK-BPS for that.

(DEFUN ED-MAKE-ROOM-IN-BUFFER (LINE-NUM ROOM &AUX LIM TEM LENGTH)
       (COND ((> ROOM 0)
	      (SETQ LENGTH (ED-BUFFER-FILL-POINTER))
	      (AND (> (+ LENGTH ROOM) (ARRAY-LENGTH ED-OPEN-BUFFER))
		   (ADJUST-ARRAY-SIZE ED-OPEN-BUFFER (PLUS LENGTH ROOM 40)))
	      (DO ((FROM (1- LENGTH) (1- FROM))
		   (TO (1- (+ LENGTH ROOM)) (1- TO)))
		  ((<= FROM LINE-NUM) NIL)
		(SETQ TEM (AR-1 ED-OPEN-BUFFER FROM))
		(ED-INSERT-LINE-INTO-OPEN-BUFFER TEM TO))
	      (SETQ LIM (+ LINE-NUM ROOM))
	      (DO I (1+ LINE-NUM) (1+ I) (> I LIM)
		  (AS-1 NIL ED-OPEN-BUFFER I))
	      (SETF (ED-BUFFER-FILL-POINTER) (+ (ED-BUFFER-FILL-POINTER) ROOM)))))

;After doing (ED-MAKE-ROOM-IN-BUFFER (1- LINE-NUM) ROOM), and inserting
;LINE in the buffer at LINE-NUM (and others following it),
;you must do (ED-PULL-BACK-BPS LINE (+ LINE-NUM ROOM))
;so that any bp's pointing at the beginning of the line which was moved down
;stay at the same line number (ie, point at LINE).
(DECLARE (SPECIAL ED-BPLIST))

(DEFUN ED-PULL-BACK-BPS (LINE OLD-LINE-NUM
			      &AUX (OLD-LINE (AR-1 ED-OPEN-BUFFER OLD-LINE-NUM))
			           ED-BPLIST BPNEW)
       (SETQ ED-BPLIST (ED-LINE-BUFFER-POINTER-LIST OLD-LINE))
       (SETQ BPNEW NIL)
       (DO ((BPTAIL ED-BPLIST (CDR BPTAIL)))
	   ((NULL BPTAIL))
	   (COND ((AND (ZEROP (CADAR BPTAIL)) (EQ (CADDAR BPTAIL) 'NORMAL))
		  (RPLACA (CAR BPTAIL) LINE)
		  (SETQ BPNEW (CONS (CAR BPTAIL) BPNEW)))))
       (COND (BPNEW (MAPC (FUNCTION (LAMBDA (BP)
			    (SETQ ED-BPLIST (DELQ BP ED-BPLIST))))
			  BPNEW)
		    (SETF (ED-LINE-BUFFER-POINTER-LIST OLD-LINE) ED-BPLIST)
		    (SETF (ED-LINE-BUFFER-POINTER-LIST LINE)
			  (NCONC BPNEW (ED-LINE-BUFFER-POINTER-LIST LINE))))))

;See below.
(DEFUN ED-INSERT-LINE-MOVING (BP LINE)
    (ED-MOVE-BP BP (ED-INSERT-LINE BP LINE)))

;Given a line, inserts it in the buffer at the BP followed by a CR.
;If the BP is at the beginning of a line it actually inserts the given
;line; otherwise, it copies the text.
(DEFUN ED-INSERT-LINE (BP LINE &AUX (LINE-NUM (ED-BP-LINE-NUM BP)))
    (COND ((AND (ZEROP (ED-BP-CHAR-POS BP))
                (ARRAY-HAS-LEADER-P LINE))
	   (ED-MAKE-ROOM-IN-BUFFER (1- LINE-NUM) 1)
           (SETF (ED-LINE-MUNGED LINE) ED-TICK)
           (SETF (ED-LINE-BUFFER-POINTER-LIST LINE) NIL)
	   (ED-INSERT-LINE-INTO-OPEN-BUFFER LINE LINE-NUM)
	   (ED-PULL-BACK-BPS LINE (1+ LINE-NUM))
	   (ED-BP 0 (AR-1 ED-OPEN-BUFFER (1+ LINE-NUM)) 'TEMP))
	  (T (ED-INSERT-CRS (ED-INSERT-CHARS BP LINE) 1))))

; ED-INSERT-BUFFER inserts a buffer into the open buffer.  The first arg
; is a buffer-pointer into the open buffer indicating where the new buffer should be
; inserted, and the second is the buffer to insert.   This is useful
; for inserting CR-FULL strings, and the equivalent of yanking a Q-register
; in TECO.  Any buffer pointers into the buffer stay put and are not transferred
; to the open buffer.  It returnd a buffer pointer to the end of the inserted text.

(DEFUN ED-INSERT-BUFFER (BP BUFFER &AUX BUFFER-LENGTH LINE-NUM CHAR-POS RETURNED-BP)
       (SETQ BUFFER-LENGTH (ED-BUFFER-FILL-POINTER BUFFER))
       (COND ((= BUFFER-LENGTH 0)			;NOTHING TO BE DONE.
	      BP)
	     ((= BUFFER-LENGTH 1)			;SIMPLE STRING INSERTION.
	      (ED-INSERT-CR-FREE-STRING BP (AR-1 BUFFER 0)))
	     (T 
	      ; This is the difficult case; the line must have its end broken, and glued
	      ; onto the last line being inserted.
	      (SETQ LINE-NUM (ED-BP-LINE-NUM BP))
	      (SETQ CHAR-POS (ED-BP-CHAR-POS BP))
	      (ED-MAKE-ROOM-IN-BUFFER			;MAKE ROOM FOR THE NEW LINES
	       LINE-NUM (1- BUFFER-LENGTH))		; {THIS MUST BE DONE BEFORE 
							; HACKING WHICH LINE IS OPEN}

	      (ED-NEW-BREAK-LINE BP (1- (+ LINE-NUM BUFFER-LENGTH)))
;	      (ED-INSERT-LINE-INTO-OPEN-BUFFER		;SPLIT THIS LINE
;	       (ED-BREAK-LINE CHAR-POS)
;	       (1- (+ LINE-NUM BUFFER-LENGTH)))		;THE LAST OF THE NEW LINES
	      (ED-INSERT-CR-FREE-STRING			;THE FIRST LINE IN THE BUFFER
	       (ED-BP (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER LINE-NUM))
			   (AR-1 ED-OPEN-BUFFER LINE-NUM)
			   'TEMP)
	       (AR-1 BUFFER 0))
	      
	      (SETQ RETURNED-BP
		    (ED-INSERT-CR-FREE-STRING		;THE LAST LINE IN THE BUFFER
		     (ED-BP 0 (AR-1 ED-OPEN-BUFFER (1- (+ LINE-NUM BUFFER-LENGTH))) 'TEMP)
		     (AR-1 BUFFER (1- BUFFER-LENGTH))))
	      (DO ((I (1+ LINE-NUM) (1+ I))		;INDEX INTO OPEN BUFFER
		   (J 1 (1+ J)))			;INDEX INTO BUFFER TO BE INSERTED
		  ((>= J (1- BUFFER-LENGTH)))
		  (ED-INSERT-LINE-INTO-OPEN-BUFFER
		   (ED-LINE-COPY (AR-1 BUFFER J))
		   I))
	      RETURNED-BP)
	      ))

(DEFUN ED-INSERT-THING (BP THING)
    (COND ((STRINGP THING)
	   (ED-INSERT-CHARS BP THING))
	  (T
	   (ED-INSERT-BUFFER BP THING))))

; Yet more insertion functions.

(DEFUN ED-NEW-BREAK-LINE (BP B-LINE-NUM &AUX A-BP-LIST B-BP-LIST A-LINE B-LINE CHAR-POS TEM)
    (SETQ CHAR-POS (ED-BP-CHAR-POS BP))
    (SETQ A-LINE (ED-BP-LINE BP))
    (SETQ TEM (ED-LINE-FILL-POINTER A-LINE))
    (SETQ B-LINE (ED-CREATE-LINE
		  (ARRAY-TYPE A-LINE)
		  (MAX 100. (+ 10 (- TEM CHAR-POS)))))		;Allow a small fudge factor.
    (COPY-ARRAY-CONTENTS (NSUBSTRING A-LINE CHAR-POS TEM ED-RANDOM-AREA) B-LINE)
    (SETF (ED-LINE-FILL-POINTER B-LINE) (- TEM CHAR-POS))
    (SETF (ED-LINE-FILL-POINTER A-LINE) CHAR-POS)
    (OR (= CHAR-POS TEM) (ED-MUNG A-LINE)) ;DONT MUNG IF THERE WAS NO CHANGE. THIS IS IMPORTANT
    (ED-MUNG B-LINE)			   ;  BECAUSE OF CR AT EOL.

    (SETQ A-BP-LIST (ED-LINE-BUFFER-POINTER-LIST A-LINE)
	  B-BP-LIST NIL)
    (DO L A-BP-LIST (CDR L) (NULL L)
      (SETQ BP (CAR L))
      (COND ((OR (> (ED-BP-CHAR-POS BP) CHAR-POS)
		 (AND (= (ED-BP-CHAR-POS BP) CHAR-POS)
		      (EQ (ED-BP-STATUS BP) 'MOVES)))
	     (SETQ A-BP-LIST (DELQ BP A-BP-LIST 1))
	     (SETF (ED-BP-LINE BP) B-LINE)
	     (SETF (ED-BP-CHAR-POS BP) (- (ED-BP-CHAR-POS BP) CHAR-POS))
	     (SETQ B-BP-LIST (CONS BP B-BP-LIST)))))
    (SETF (ED-LINE-BUFFER-POINTER-LIST A-LINE) A-BP-LIST)
    (SETF (ED-LINE-BUFFER-POINTER-LIST B-LINE) B-BP-LIST)

    (ED-INSERT-LINE-INTO-OPEN-BUFFER B-LINE B-LINE-NUM)
    T)

(DEFUN ED-INSERT-CRS-MOVING (BP NUMBER)
   (ED-MOVE-BP BP (ED-INSERT-CRS BP NUMBER)))

(DEFUN ED-INSERT-CRS (BP NUMBER &AUX LINE-NUM TEM)
  (SETQ LINE-NUM (ED-BP-LINE-NUM BP))
  (SETQ TEM (+ LINE-NUM NUMBER))
  (ED-MAKE-ROOM-IN-BUFFER LINE-NUM NUMBER)
  (ED-NEW-BREAK-LINE BP TEM)
;  (ED-INSERT-LINE-INTO-OPEN-BUFFER
;   (ED-BREAK-LINE (ED-BP-CHAR-POS BP) LINE-NUM)
;   TEM)
  (DO I (1+ LINE-NUM) (1+ I) (>= I TEM)
     (ED-INSERT-LINE-INTO-OPEN-BUFFER (ED-CREATE-LINE 'ART-STRING) I))
  (ED-BP 0 (AR-1 ED-OPEN-BUFFER TEM) 'TEMP))



; ED-INSERT-BETWEEN takes three buffer pointers.  The first two denote
; the region of a buffer which is the source, and the stuff between 
; these is inserted at the third bp.  Note that the first two bps must
; be in the same buffer, but the third need not be and in general isn't.
; This does a SAVE, not a KILL.  (SAVE + DELETE = KILL).
; It has no effect on the openedness of buffer.

(DEFUN ED-INSERT-BETWEEN (BP1 BP2 BP3 &AUX BUFFER1 BUFFER3 (ED-OPEN-BUFFER NIL) TEM TEM-LINE
			      LINE-NUM1 LINE-NUM2 LINE-NUM3 CHAR-POS1 CHAR-POS2 CHAR-POS3
			      LINE1 LINE2 LINE3 BP-LIST OLD-BP-LIST)
    (MULTIPLE-VALUE (BP1 BP2)
		    (ED-ORDER-BPS BP1 BP2))
    (SETQ LINE1 (ED-BP-LINE BP1) LINE2 (ED-BP-LINE BP2) LINE3 (ED-BP-LINE BP3)
	  LINE-NUM1 (ED-LINE-NUMBER LINE1) LINE-NUM2 (ED-LINE-NUMBER LINE2)
	  LINE-NUM3 (ED-LINE-NUMBER LINE3) CHAR-POS1 (ED-BP-CHAR-POS BP1)
	  CHAR-POS2 (ED-BP-CHAR-POS BP2) CHAR-POS3 (ED-BP-CHAR-POS BP3))
    (SETQ BUFFER1 (ED-LINE-BUFFER LINE1)
	  BUFFER3 (ED-LINE-BUFFER LINE3))
    (OR (EQ BUFFER1 (ED-LINE-BUFFER LINE2))
	(ED-BARF "Different buffers for first two args -- ED-INSERT-BETWEEN"))
    (AND (EQ BUFFER1 BUFFER3)
	 (ED-BP-< BP1 BP3)
	 (ED-BP-< BP3 BP2)
	 (ED-BARF "Never ending -- ED-INSERT-BETWEEN"))
    (SETQ ED-OPEN-BUFFER BUFFER3)
    (SETQ TEM (- LINE-NUM2 LINE-NUM1))
    (COND ((= TEM 0)
	   (ED-INSERT-CHARS BP3 (NSUBSTRING LINE1 CHAR-POS1 CHAR-POS2 ED-RANDOM-AREA)))
	  (T
	   (ED-MAKE-ROOM-IN-BUFFER LINE-NUM3 TEM)

	   (SETQ TEM-LINE
		 (ED-CREATE-LINE (ARRAY-TYPE LINE2)
				 (+ CHAR-POS2 (- (ED-LINE-FILL-POINTER LINE3) CHAR-POS3))))
	   (COPY-ARRAY-CONTENTS (NSUBSTRING LINE2 0 CHAR-POS2 ED-RANDOM-AREA) TEM-LINE)
	   (SETF (ED-LINE-FILL-POINTER TEM-LINE) CHAR-POS2)
	   (ED-INSERT-LINE-INTO-OPEN-BUFFER
	    (SETQ TEM-LINE
		  (ED-FILL-LINE
		   TEM-LINE
		   (NSUBSTRING LINE3 CHAR-POS3 (ED-LINE-FILL-POINTER LINE3) ED-RANDOM-AREA)))
	    (+ LINE-NUM3 TEM))
	   (SETQ BP-LIST NIL OLD-BP-LIST (ED-LINE-BUFFER-POINTER-LIST LINE3))
	   (DO L OLD-BP-LIST (CDR L) (NULL L)
	       (COND ((OR (> (ED-BP-CHAR-POS (CAR L)) CHAR-POS3)
			  (AND (= (ED-BP-CHAR-POS (CAR L)) CHAR-POS3)
			       (EQ (ED-BP-STATUS (CAR L)) 'MOVES)))
		      (SETQ OLD-BP-LIST (DELQ (CAR L) OLD-BP-LIST))
		      (SETF (ED-BP-LINE (CAR L)) TEM-LINE)
		      (SETF (ED-BP-CHAR-POS (CAR L)) (+ (- (ED-BP-CHAR-POS (CAR L)) CHAR-POS3)
						     CHAR-POS2))
		      (SETQ BP-LIST (CONS (CAR L) BP-LIST)))))
	   (SETF (ED-LINE-BUFFER-POINTER-LIST TEM-LINE) BP-LIST)

	   (ED-TRUNCATE-LINE LINE-NUM3 CHAR-POS3)
	   (SETQ LINE3
		 (ED-FILL-LINE
		  LINE3
		  (NSUBSTRING LINE1 CHAR-POS1 (ED-LINE-FILL-POINTER LINE1) ED-RANDOM-AREA)))
	   (ED-INSERT-LINE-INTO-OPEN-BUFFER LINE3 LINE-NUM3)

	   (DO ((I (1+ LINE-NUM3) (1+ I))
		(J (1+ LINE-NUM1) (1+ J)))
	       ((= J LINE-NUM2) NIL)
	     (ED-INSERT-LINE-INTO-OPEN-BUFFER (ED-LINE-COPY (AR-1 BUFFER1 J)) I))
	   (ED-BP CHAR-POS2 TEM-LINE 'TEMP))))

;This is haired up so that if a character is typed at the end of
;   a physical line, it will simply output that character and do no other redisplay.

(DEFUN ED-COM-SELF-INSERT (CHR &AUX CHAR TEM LINE PC-PPR BLINKER XPOS YPOS NYPOS)
    (SETQ CHAR ED-LAST-COMMAND-CHAR) ;No special reason for this...
    (SETQ CHAR (DPB ED-CURRENT-DEFAULT-FONT %%CH-FONT CHAR))  ;INSERT FONT CODE IN HIGH BYTE
    (COND ((> ED-NUMERIC-ARG 1)
	   (DO I 0 (1+ I) (= I ED-NUMERIC-ARG)
	     (ED-INSERT-CHARS-MOVING (ED-BUFFER-POINT) CHAR))
	   ED-DIS-BUFFER)
	  (T
	   (SETQ LINE (ED-BP-LINE (ED-BUFFER-POINT)))
	   (ED-INSERT-CHARS-MOVING (ED-BUFFER-POINT) CHAR)
	   (COND ((AND (= (ED-BP-CHAR-POS (ED-BUFFER-POINT))	;Only at end of line
			  (STRING-LENGTH LINE))
		       (<= (DO ((W ED-WINDOWS-DISPLAYED (CDR W))	;Not in two window mode
			       (I 0))
			      ((NULL W) I)
			      (AND (EQ ED-OPEN-BUFFER (ED-WINDOW-BUFFER (CAR W)))
				   (SETQ I (1+ I))))
			   1))
		  (SETQ PC-PPR (ED-WINDOW-PC-PPR ED-WINDOW) 
			BLINKER (ED-WINDOW-POINT-BLINKER ED-WINDOW))
		  (MULTIPLE-VALUE (XPOS YPOS)
				  (TV-READ-BLINKER-CURSORPOS BLINKER))
		  (TV-SET-CURSORPOS PC-PPR XPOS YPOS)
		  (TV-SET-FONT PC-PPR (AR-1 (PC-PPR-FONT-MAP PC-PPR) (LSH CHAR -8)))
		  (TV-TYO PC-PPR (LOGAND 377 CHAR))
		  (MULTIPLE-VALUE (XPOS NYPOS)
				  (TV-READ-CURSORPOS PC-PPR))
		  (COND ((= YPOS NYPOS)
			 (ED-WINDOW-4 ED-WINDOW XPOS NYPOS)
			 (ED-WINDOW-5 (ED-BUFFER-POINT ED-OPEN-BUFFER)
				      (ED-BUFFER-MARK ED-OPEN-BUFFER)
				      ED-WINDOW
				      (ED-BUFFER-MARK-P ED-OPEN-BUFFER))
			 (SETF (ED-WINDOW-UNMUNGED ED-WINDOW) ED-TICK)
			 ED-DIS-NONE)
			(T (SETF (ED-LINE-MUNGED LINE) ED-TICK)
			   ED-DIS-BUFFER)))
		 (T ED-DIS-BUFFER)))))

(DEFUN ED-COM-INSERT-CRS (CHR &AUX SIZ LINE-NUM)
    (SETQ SIZ (ED-BUFFER-FILL-POINTER ED-OPEN-BUFFER))
    (SETQ LINE-NUM (ED-BP-LINE-NUM (ED-BUFFER-POINT)))
    (COND ((AND (= (ED-BP-CHAR-POS (ED-BUFFER-POINT))
		   (STRING-LENGTH (ED-BP-LINE (ED-BUFFER-POINT))))
	        (= 1 ED-NUMERIC-ARG)
		(NOT (= LINE-NUM (1- SIZ)))
		(ED-STRING-BLANK-P (AR-1 ED-OPEN-BUFFER (1+ LINE-NUM))))
	   (ED-MOVE-POINT (ED-TRUNCATE-LINE (1+ LINE-NUM) 0)))
	  (T 
	   (ED-INSERT-CRS-MOVING (ED-BUFFER-POINT) ED-NUMERIC-ARG)))
    ED-DIS-BUFFER)

(DEFUN ED-COM-MAKE-ROOM (CHR)
    (ED-INSERT-CRS (ED-BUFFER-POINT) ED-NUMERIC-ARG)
     ED-DIS-BUFFER)

(DEFUN ED-COM-SPLIT-LINE (CHR &AUX IND BP)
    (ED-FORWARD-OVER-BLANK (ED-BUFFER-POINT))
    (SETQ IND (ED-BP-INDENTATION (ED-BUFFER-POINT)))
    (SETQ BP (ED-INSERT-CRS (ED-BUFFER-POINT) (MAX ED-NUMERIC-ARG 1)))
    (ED-INDENT-LINE BP IND)
    ED-DIS-BUFFER)
 
(DEFUN ED-COM-DELETE-INDENTATION (CHR &AUX LINE-NUM LINE)
    (SETQ LINE-NUM (ED-BP-LINE-NUM (ED-BUFFER-POINT)))
    (COND ((AND (> ED-NUMERIC-ARG 1)
		(< LINE-NUM (ED-BUFFER-FILL-POINTER)))
           (SETQ LINE-NUM (1+ LINE-NUM))))
    (ED-MOVE-POINT LINE-NUM 0)
    (ED-DELETE-BLANK-FORWARD (ED-BUFFER-POINT))
    (AND (> LINE-NUM 0)
         (SETQ LINE (AR-1 ED-OPEN-BUFFER (1- LINE-NUM)))
	 (ED-DELETE-BETWEEN (ED-BUFFER-POINT)
			    (ED-BP (ED-LINE-FILL-POINTER LINE) LINE 'TEMP)))
    ED-DIS-BUFFER)

(DEFUN ED-COM-DELETE-FORWARD (CHR)
    (OR (ED-DELETE-CHARS (ED-BUFFER-POINT) ED-NUMERIC-ARG)
	(ED-BARF))
    ED-DIS-BUFFER)

(DEFUN ED-COM-RUBOUT (CHR)
  (ED-DELETE-BETWEEN (ED-COPY-BP (ED-BUFFER-POINT) 'TEMP)
                     (OR (ED-MOVE-BP-BACKWARD (ED-BUFFER-POINT) ED-NUMERIC-ARG)
			 (ED-BARF))
  ED-DIS-BUFFER)

;Copy the region between the BPs into a new buffer, and save it on the kill ring.
;Returns the newly created buffer.
(DEFUN ED-SAVE-BETWEEN (BP1 BP2 &AUX BUFFER)
    (MULTIPLE-VALUE (BP1 BP2) (ED-ORDER-BPS BP1 BP2))
    (SETQ BUFFER
	  (ED-CREATE-BUFFER T
			    (MAX (+ 3 (- (ED-BP-LINE-NUM BP2)
					 (ED-BP-LINE-NUM BP1)))
				 100)))
    (ED-INSERT-BETWEEN BP1 BP2 (ED-BUFFER-POINT BUFFER))
    (ED-KILL-RING-PUSH BUFFER)
    BUFFER)

(DEFUN ED-KILL-BETWEEN (BP1 BP2 FORWARDP &AUX BUFFER BP3)
    (MULTIPLE-VALUE (BP1 BP2) (ED-ORDER-BPS BP1 BP2))
    (COND ((AND ED-INTERACTIVE-P
		(EQ ED-LAST-COMMAND-TYPE 'KILL))
	   (OR ED-KILL-RING (ED-BARF "No kill ring after kill command???? -- ED-KILL-BETWEEN"))
	   (SETQ BUFFER (CAR ED-KILL-RING))
	   (SETQ BP3 (ED-BUFFER-POINT BUFFER))
	   ((LAMBDA (ED-OPEN-BUFFER)
		    (ED-MOVE-POINT (COND (FORWARDP (ED-BUFFER-EOB-BP))
					 (T (ED-BUFFER-BOB-BP)))))
	    BUFFER))
	  (T
	   (SETQ BUFFER
		 (ED-CREATE-BUFFER T
				   (MAX (+ 3 (- (ED-BP-LINE-NUM BP2)
						(ED-BP-LINE-NUM BP1)))
					100)))
	   (SETQ BP3 (ED-BUFFER-POINT BUFFER))
	   ))
    (ED-INSERT-BETWEEN BP1 BP2 BP3)
    (OR (EQ BUFFER (CAR ED-KILL-RING))
	(ED-KILL-RING-PUSH BUFFER))
    (ED-MOVE-POINT (ED-DELETE-BETWEEN BP1 BP2)))

(DEFUN ED-COM-KILL (CHR &AUX LINE-NUM CHAR-POS LINE)
   (COND ((ED-EOB-P (ED-BUFFER-POINT))
	  (ED-BARF "Kill off end of buffer --- ED-COM-KILL")
	  ED-DIS-BPS)
	 (T
	  (SETQ ED-CURRENT-COMMAND-TYPE 'KILL)
	  (SETQ LINE-NUM (ED-BP-LINE-NUM (ED-BUFFER-POINT)))
	  (SETQ CHAR-POS (ED-BP-CHAR-POS (ED-BUFFER-POINT)))
	  (SETQ LINE (ED-BP-LINE (ED-BUFFER-POINT)))
	  (COND ((NULL ED-NUMERIC-ARG-P)
		 (COND ((= CHAR-POS (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER LINE-NUM)))
			(ED-KILL-BETWEEN (ED-BUFFER-POINT)
				      (ED-BP 0 (AR-1 ED-OPEN-BUFFER (1+ LINE-NUM)) 'TEMP)
				      T))
		       (T
			(ED-KILL-BETWEEN (ED-BUFFER-POINT)
					 (ED-BP (ED-LINE-FILL-POINTER LINE) LINE 'TEMP)
					 T))))
		(T
		 (SETQ LINE-NUM (+ LINE-NUM ED-NUMERIC-ARG))
		 (SETQ CHAR-POS 0)
		 (COND ((< LINE-NUM 0)
			(SETQ LINE-NUM 0))
		       ((>= LINE-NUM (ED-BUFFER-FILL-POINTER))
			(SETQ LINE-NUM (1- (ED-BUFFER-FILL-POINTER)))
			(SETQ CHAR-POS (ED-LINE-FILL-POINTER
					(AR-1 ED-OPEN-BUFFER LINE-NUM)))))
		 (ED-KILL-BETWEEN (ED-BUFFER-POINT)
				  (ED-BP CHAR-POS (AR-1 ED-OPEN-BUFFER LINE-NUM) 'TEMP)
				  T)))
	  ED-DIS-BUFFER)))


(DEFUN ED-COM-SAVE-REGION (CHR)
    (OR (ED-BUFFER-MARK-P) (ED-BARF))
    (ED-SAVE-BETWEEN (ED-BUFFER-POINT) (ED-BUFFER-MARK))
    ED-DIS-NONE)

(DEFUN ED-COM-KILL-REGION (CHR &AUX TEM TEM1)		;TEMP!
    (OR (ED-BUFFER-MARK-P) (ED-BARF))
    (SETQ ED-CURRENT-COMMAND-TYPE 'KILL)
    (ED-KILL-BETWEEN (ED-BUFFER-POINT) (ED-BUFFER-MARK)
		     (ED-BP-< (ED-BUFFER-POINT) (ED-BUFFER-MARK)))
    ED-DIS-BUFFER)

(DEFUN ED-COM-APPEND-NEXT-KILL (CHR)
    (SETQ ED-CURRENT-COMMAND-TYPE 'KILL)
    (SETQ ED-MARK-STAYS T)
    ED-DIS-NONE)

(DEFUN ED-COM-YANK (CHR)
    (OR ED-KILL-RING (ED-BARF))
    (AND (> ED-NUMERIC-ARG (LENGTH ED-KILL-RING)) (ED-BARF))
    (SETQ ED-CURRENT-COMMAND-TYPE 'YANK)
    (ED-MOVE-BP (ED-BUFFER-MARK) (ED-BUFFER-POINT))
    (ED-MOVE-POINT (ED-INSERT-THING (ED-BUFFER-POINT)
				    (NTH (1- ED-NUMERIC-ARG) ED-KILL-RING)))
    (SETF (ED-BUFFER-MARK-P) T)
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BUFFER)


(DEFUN ED-COM-YANK-POP (CHR)
    (OR (ED-BUFFER-MARK-P) (ED-BARF))
    (OR (EQ ED-LAST-COMMAND-TYPE 'YANK) (ED-BARF))
    (SETQ ED-CURRENT-COMMAND-TYPE 'YANK)
    (ED-DELETE-BETWEEN (ED-BUFFER-POINT) (ED-BUFFER-MARK))
    (ED-KILL-RING-POP)
    (ED-MOVE-POINT (ED-INSERT-THING (ED-BUFFER-POINT) (CAR ED-KILL-RING)))
    (SETQ ED-MARK-STAYS T)
    ED-DIS-BUFFER)

