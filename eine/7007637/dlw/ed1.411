


; REDISPLAY 2!! EACH LINE HAS ED-LINE-DISPLAYED WHICH SAYS IF IT IS ON THE SCREEN 
;   CORRECTLY.  MUNGERS SHOULD SET TO NIL, REDIAPLAYERS SHOULD SET TO T.
;   ALL CHANGES HAVE THE STRING NEWDISPLAY IN THEIR COMMENTS, TO MAKE IT
;   EASY TO FIND THEM.

;CURRENTLY WE DO NOT USE GRINDEF'S UNTYO HACK.

; IN THIS FILE THERE ARE NUMBER SIGNS (#) AT THE PLACE TO PUT IN NEW EDITING
; FUNCTIONS, AND ATSIGNS (@) AT THE PLACE TO PUT IN NEW ED-COM FUNCTIONS.
; AND DOLLAR SIGNS ($) AT PLACE IN ED1 LIST FOR NAMES OF NEW FUNCTIONS.

((LAMBDA (^W ^Q)
    (TERPRI)
    (PRINC '|ONLY WORKS ON REAL MACHINE!!|))
 NIL
 NIL)


(SETQ ED1 '( (SET-DEFAULT-MACRO-COMPILE)
	     (SPECIAL-PROCESSING (SEND-MACROS-OVER))
	     ED-BP-LINE-NUM-SET ED-BP-SET ED-BOB-P ED-EOB-P
                       ED-DEBUG-IO ED-KEYBOARD-IO ED-RECOVER 
	     ED-CREATE-BUFFER ED-CREATE-LINE ED-CREATE-WINDOW
	     ED-OPEN-BUFFER ED-CLOSE-OPEN-BUFFER ED-OPEN-LINE
	                    ED-CLOSE-OPEN-LINE 
	     ED-LINE-COPY ED-EXPAND-LINE (MACRO-COMPILE ED-BARF)
	     ED-STRING-LENGTH ED-STRING-MEMQ ED-FILL-LINE
	               ED-ASSURE-ROOM-IN-LINE ED-COUNT-CHARS ED-SUBSTRING
	     ED-DELETE-CHARS ED-DELETE-CHARS-WITHIN-OPEN-LINE
	               ED-DELETE-BETWEEN 
	               ED-NOTE-LINE-CHANGE ED-TAKE-ROOM-FROM-BUFFER
		       ED-TRUNCATE-LINE ED-GLUE-LINE
	     ED-INSERT-CHARS ED-INSERT-CHARS-MOVING ED-INSERT-CR-FREE-STRING
	               ED-INSERT-STRING-IN-OPEN-LINE ED-INSERT-CR-FULL-STRING
		       ED-CONVERT-STRING-TO-BUFFER ED-INSERT-LINE-INTO-OPEN-BUFFER
		       ED-ADD-LINE-TO-BUFFER ED-MAKE-ROOM-IN-BUFFER
		       ED-INSERT-BUFFER ED-BREAK-LINE
		       ED-INSERT-CRS ED-INSERT-CRS-MOVING
	     ED-MOVE-BP ED-MOVE-BP-FROM-BP
	     ED-CHAR-SEARCH (MACRO-COMPILE ED-CHARS-SEARCH)
	     ED-WINDOW-UPDATE-1 ED-WINDOW-UPDATE ED-OUTPUT-LINE ED-#-PLINES
	                ED-DISPLAY-CURSORPOS ED-CLEAN-WIPE ED-CLEAR-WINDOW ED-CLEAR-LINE
	     ED ED-COMMAND-RESET ED-COMMAND-GET ED-COMMAND-EXECUTE ED-COMMAND-INTERPRET 
	     ED-BUFFER-IO ED-READ-SEXP-FROM-BUFFER ED-GRINDEF-FCTN-INTO-BUFFER

	     V V-LINE V-BPL V-BP-P (MACRO-COMPILE LOC) SHOW I
	     (BOUNDP Q-BOUNDP) BITTEST ARRAY-DISPLACED-P ARRAY-INDEXED-P 

	     ED-COM-FORWARD ED-COM-BACKWARD ED-COM-DOWN ED-COM-UP ED-COM-BOL ED-COM-EOL
	                ED-COM-SELF-INSERT ED-COM-INSERT-CRS ED-COM-COMPLETE-REDISPLAY
			ED-COM-QUIT ED-COM-BEEP ED-COM-DELETE-FORWARD ED-COM-KILL
			ED-COM-RUBOUT ED-COM-QUADRUPLE-NUMERIC-ARG ED-COM-BOB ED-COM-EOB
			ED-SET-UP-DISPATCH-TABLE ED-COM-MAKE-ROOM ED-COM-FORWARD-WORD
			ED-COM-MARK-BOB ED-COM-MARK-EOB ED-COM-BACKWARD-WORD 
			ED-COM-KILL-REGION ED-COM-SET-POP-MARK 
	       
             ED-INITIALIZE (MACRO-COMPILE EVAL-PRINT) ED-IBP ED-FORWARD-WORD-BP ED-BP-CHAR 
	     ED-SETUP-OTHER-INITIAL-TABLES ED-SETUP-INITIAL-COMMAND-DISPATCH-TABLE
	     ED-SETUP-TABLE ED-BACKWARD-WORD-BP ED-BP-CHAR-BEFORE ED-DBP 
	     ED-ORDER-BPS ED-BP-<
	     ED-FORWARD-LIST-BP  ED-FORWARD-SEXP-BP 
	     ED-BACKWARD-LIST-BP ED-BACKWARD-SEXP-BP
;	     ;ED-FORWARD-UP-LIST-BP
	     ED-COM-FORWARD-LIST ED-COM-BACKWARD-LIST ED-COM-FORWARD-SEXP 
	     ED-COM-BACKWARD-SEXP IO-READ-CURSORPOS IO-SET-CURSORPOS ED-SAVE-BETWEEN 
	     ED-COM-EVAL-BUFFER ED-COM-YANK ED-KILL-AND-SAVE-BETWEEN 
	     ED-COM-KILL-WORD ED-COM-BACKWARD-KILL-WORD 
	     ED-MARK-PDL-PUSH ED-MARK-PDL-POP ED-DELETE-LAST-ELEMENT
	     ED-COM-FORWARD-UP-LIST ED-COM-NUMBERS ED-COM-KILL-SEXP
	     ED-COM-BACKWARD-KILL-SEXP 
	     ED-FORWARD-OVER-BLANK ED-BACKWARD-OVER-BLANK ED-DELETE-BLANK-AROUND
	     ED-DELETE-BLANK-FORWARD ED-DELETE-BLANK-BACKWARD ED-STRING-BLANK-P
	     (SPECIAL-PROCESSING (LOAD-TIME-SETQ ED-BLANK-LIST '(40 211)))
	     ED-COM-BACK-TO-INDENTATION 


  ;$$$$$$$$$$$$$$$$$$
 (SPECIAL-PROCESSING
  (LOAD-TIME-SETQ
   ED-LIST-OPEN 1 
   ED-LIST-CLOSE 2 
   ED-LIST-SINGLE-QUOTE 3 
   ED-LIST-DOUBLE-QUOTE 4 
   ED-LIST-SLASH 5 
   ED-LIST-ALPHABETIC 6 
   ED-LIST-DELIMITER 7
   ED-WORD-ALPHABETIC 0
   ED-WORD-DELIMITER 1 
   )) ))

(SETQ RMED1 ED1)					;REAL MACHINE VERSION

;EDITOR special variables.

(SPECIAL 

; This group of 6 special variables are for the open buffer.
; If you change any of these, find all functions which lambda-bind
; the open buffer or line and add whatever new variable will alos need to be bound.
 ED-OPEN-BUFFER			     ;THE CURRENTLY OPEN BUFFER.
 ED-POINT			     ;THE POINT FOR THE OPEN BUFFER
 ED-MARK			     ;THE "MARK" FOR THE OPEN BUFFER.
 ED-MARK-PDL
 ED-OPEN-LINE			     ;THE OPEN LINE
 ED-OPEN-LINE-NUMBER		     ;THE LINE NUMBER OF THE OPEN LINE
 ED-MARK-PDL			     ;THE PDL FOR THE MARK USED BY ED-COM-SET-POP-MARK.

 ED-WINDOW			     ;THE WINDOW OF THE OPEN BUFFER
				     ;IS THIS NEEDED?
 ED-DISPLAY-TOP-LINE		     ;THE LINE NUMBER OF THE TOP LINE DISPLAYED IN
				     ;     THE PEN BUFFER'S WINDOW.
 ED-SEARCH-STRING		     ;THE LAST STRING SEARCHED FOR
 ED-KILLED-BUFFER		     ;TEMPORARY UNTIL I PUT IN META-Y ETC.
 ED-LAST-COMMAND-CHAR		     ;THE LAST CHARACTER USED AS A COMMAND
 ED-RESET-LIST			     ;ALIST OF VARIABLES AND WHAT THEY SHOULD BE RESET TO.

 ED-LINE-BUFFER-AREA		     ;AREA IN WHICH LINES LIVE.
 ED-EDITOR-ARRAYS-AREA		     ;AREA IN WHICH ALL OTHER EDITOR ARRAYS LIVE.
 ED-LINE-AREA			     ;NAMES FOR THESE AREAS IN LMI.  TO BE FLUSHED?
 ED-ARRAYS-AREA			     ;     MAY BE USEFUL TO HAVE TWO NAMES FOR A LEVEL
				     ;     OF INDIRECTION FOR SWITCHING.


 ED-MAGIC-BUFFER		     ;THESE ARE USED BY THE ED-BUFFER-IO STREAM
 ED-MAGIC-LINE			     ;     FOR SAVING OUR PLACE IN THE BUFFER.
 ED-MAGIC-CHAR-POS 


 ED-DEBUGP			     ;ARE WE IN DEBUG MODE?  DEBUG MODE CAUSES EXTRA
				     ;     CRUFT IN THE DEBUG PC-PPR...
 ED-INTERACTIVE-P		     ;BIND THIS TO T IF THE USER IS DOING "^R" EDITING
				     ;     RATER THAT JUST USING EDITOR FUNCTIONS.


 CONSOLE-IO-PC-PPR		     ;THE PC-PPR USED BY READ AND PRINT.
 ED-PC-PPR			     ;**TEMP** USED BY RMIO.  THIS WILL BE FLUSHED
				     ;     WHEN REAL WINDOWING IS SUPPORTED.
 ED-DEBUG-PC-PPR		     ;THE AUXILIARY PC-PPR FOR DISPLAYING ERROR MESSAGES.
 ED-AUX-PC-PPR 
 TVFONT				     ;THE TV FONT.
 ED-BUFFER-IO-UNRCHF 
 ED-KEYBOARD-IO-UNRCHF

 ED-COMMAND-DISPATCH-TABLE	     ;THE TABLE OF FUNCTIONS ON EACH KEY IN "^R MODE"
 ED-WORD-SYNTAX-TABLE		     ;SYNTAX OF EACH LETTER FOR WORD AND LIST COMMANDS,
 ED-LIST-SYNTAX-TABLE		     ;    LIKE ..D IN TECO.
 ED-INITIAL-COMMAND-DISPATCH-TABLE   ;THESE ARE LISTS FROM WHICH TO INITIALIZE
 ED-INITIAL-WORD-SYNTAX-LIST	     ;    THE ABOVE TABLES.  THERE WILL EVENTUALLY BE
 ED-INITIAL-LIST-SYNTAX-LIST	     ;     AN "EDIT ..D" FEATURE LIKE THE ONE EMACS HAS.
 ED-RPCNT			     ;USED FOR SETTING UP THESE TABLES.
 ED-BLANK-LIST			     ;LIST OF LETTERS WHICH THE EDITOR CONSIDERS
				     ;   "BLANKS".  USUALLY SPACES AND TABS.

 ED-METER-LINE			     ;TOTAL NUMBER OF LINES AND BUFFERS CREATED.
 ED-METER-BUFFER		     ;     THIS IS FOR METERING PURPOSES.


   ;THESE ARE THE SYMBOLIC NAMES FOR THE POSSIBILITIES FOR EACH LETTER IN
   ;     ED-WORD-SYNTAX-TABLE AND ED-LIST-SYNTAX-TABLE.  THEIR MEANINGS
   ;     SHOULD BE PRETTY MUCH SELF-EXPLANITORY.
 ED-LIST-OPEN ED-LIST-CLOSE ED-LIST-SINGLE-QUOTE ED-LIST-DOUBLE-QUOTE 
 ED-LIST-SLASH ED-LIST-ALPHABETIC ED-LIST-DELIMITER ED-WORD-ALPHABETIC ED-WORD-DELIMITER
)

(SETQ ED-STORAGE-AREAS '(ED-LINE-BUFFER-AREA ED-EDITOR-ARRAYS-AREA)) ;Does anything use this?

; Declarations for the basic editor data structures.

; The array leader of a buffer

(DEFSTRUCT ED-OPEN-BUFFER ARRAY-LEADER
	ED-BUFFER-FILL-POINTER		; FILL POINTER
	ED-BUFFER-POINT			; THE "POINT"
	ED-BUFFER-MARK			; THE MARK
	ED-BUFFER-MARK-PDL		; THE MARK PDL
	ED-BUFFER-FILENAME-DEFAULT
	ED-BUFFER-WRITTEN-P
		; NOT CURRENTLY USED, BUT DON'T FORGET:
;	ED-BUFFER-ASCENDING-LINE-NUMBER-COUNT
;	ED-BUFFER-STRUCTURE-DESCRIPTION-LIST
;	ED-BUFFER-HISTORY-LIST
;	ED-BUFFER-OPTIONS-AND-MODES
;	ED-BUFFER-OLD-COPY-OLD-LINE
        )

; Array leader of a line

(DEFSTRUCT ED-OPEN-LINE ARRAY-LEADER
	ED-LINE-FILL-POINTER		; THE FILL POINTER
	ED-LINE-NUMBER                  ; THE LINE NUMBER OF THIS LINE IN THE BUFFER
	ED-LINE-#-PHYSICAL-LINES
	ED-LINE-BUFFER-POINTER-LIST     ; THE LIST OF BUFFER POINTERS
	ED-LINE-MUNGED   	        ; NEWDISPLAY! LAST TIME MUNGED.
		; SLIGHTLY IN:
	ED-LINE-STRUCTURE-DESCRIPTION-LIST
		; NOT IN YET:
;	ED-LINE-NET-OPENS-LESS-CLOSES
;	ED-LINE-LEFT-CLOSE-DEPTH
;	ED-LINE-RIGHT-OPEN-DEPTH
		; NOT USED:
;	ED-LINE-IDENTITY-NUMBER
;	ED-LINE-INCARNATION-NUMBER
        )
; Array leader of a display window

(DEFSTRUCT ED-WINDOW ARRAY-LEADER
	ED-WINDOW-FILL-POINTER		; THE FILL POINTER
	ED-WINDOW-HEIGHT		; (FIXNUM, IN LINES)
	ED-WINDOW-WIDTH			; (FIXNUM, IN CHARS)
	ED-WINDOW-HORIZONTAL-OFFSET	; THE POSITION OF THIS WINDOW
	ED-WINDOW-VERTICAL-OFFSET	;   ON THE SCREEN
	ED-WINDOW-MIN-CURSORPOS		; THESE DEFINE THE "ACCEPATBLE LIMITS"
	ED-WINDOW-MAX-CURSORPOS		;   FOR THE CURSOR, IN PLINES
	ED-WINDOW-MIN-RESET-CURSORPOS	; PLINE ON WHICH TO PUT US WHEN WE
	ED-WINDOW-MAX-RESET-CURSORPOS	;   EXCEED THOSE LIMITS
	ED-WINDOW-CENTER-CURSORPOS	        ; PLINE TO PUT IN CENTER OF SCREEN ON REDISPLAY
	ED-WINDOW-TOP-LINE-DISPLAYED	; THE LINE AT THE TOP OF THE WINDOW
	ED-WINDOW-UNMUNGED              ; ED-TICK AT THE LAST REDISPLAY OF THIS WINDOW.
	; NOT IN YET
	ED-WINDOW-LOGICAL-CURSORPOS-V	; THIS IS THE CURSOR ASSOCIATED WITH THE
	ED-WINDOW-LOGICAL-CURSORPOS-H	;   PDP10 "ECHO AREA"
	ED-WINDOW-CLEAR-WITH-FORM-FEED	; HUH?
	ED-WINDOW-USE-SYSTEM-HORIZONTAL-WRAPAROUND)

; Basic functions for creation, opening, and closing.
(DEFUN ED-CREATE-BUFFER (&OPTIONAL (SIZE 100) &AUX LINE BUFFER POINT MARK)
   (COND ((NOT (BOUNDP 'ED-EDITOR-ARRAYS-AREA))
	  (ED-INITIALIZE)))
   (SETQ LINE (ED-CREATE-LINE))				; MUST START WITH ONE LINE, SO POINT 
							; AND MARK CAN EXIST
   (SETF (ED-LINE-NUMBER LINE) 0)			;
   (SETQ POINT (ED-BP 0 LINE))				; SET UP POINT
   (SETQ MARK (ED-BP 0 LINE))				;    AND MARK
   (SETF (ED-LINE-BUFFER-POINTER-LIST LINE)		; INSTALL THEM SO THEY'LL GET UPDATED
	 (LIST POINT MARK))
   (SETQ BUFFER (MAKE-ARRAY-BLOCK ED-EDITOR-ARRAYS-AREA 'ART-Q-LIST
				  (LIST SIZE) NIL
			 (NREVERSE
			  (LIST
			   0         ;ED-BUFFER-FILL-POINTER
			   POINT     ;ED-BUFFER-POINT
			   MARK      ;ED-BUFFER-MARK
			   "DLW;TEST >" ;ED-BUFFER-FILENAME-DEFAULT
			   T	     ;ED-BUFFER-WRITTEN-P
			   ; NOT CURRENTLY USED, BUT DON'T FORGET:
;			   0         ;ED-BUFFER-ASCENDING-LINE-NUMBER-COUNT
;			   NIL       ;ED-BUFFER-STRUCTURE-DESCRIPTION-LIST
;			   NIL       ;ED-BUFFER-HISTORY-LIST
;			   NIL       ;ED-BUFFER-OPTIONS-AND-MODES
;			   NIL       ;ED-BUFFER-OLD-COPY-OLD-LINE
			   ))))
   (FILL-ARRAY BUFFER LINE)				; AND INSTALL THE LINE
   BUFFER)


(DEFUN ED-CREATE-LINE (&OPTIONAL (SIZE 120.))
       (MAKE-ARRAY-BLOCK ED-LINE-BUFFER-AREA 'ART-STRING (LIST SIZE) NIL
			 (NREVERSE
			  (LIST
			   0         ;ED-LINE-FILL-POINTER
			   -1        ;ED-LINE-NUMBER
			   -1        ;ED-LINE-#-PHYSICAL-LINES
			   NIL       ;ED-LINE-BUFFER-POINTER-LIST
			   ED-TICK   ;ED-LINE-MUNGED NEWDISPLAY!
			   NIL       ;ED-LINE-STRUCTURE-DESCRIPTION-LIST
			   ; NOT IN YET
;			   NIL       ;ED-LINE-NET-OPENS-LESS-CLOSES
;			   NIL       ;ED-LINE-LEFT-CLOSE-DEPTH
;			   NIL       ;ED-LINE-RIGHT-OPEN-DEPTH
			   ; NOT USED
;			   0         ;ED-LINE-IDENTITY-NUMBER
;			   0         ;ED-LINE-INCARNATION-NUMBER
			   ))))

(DEFUN ED-CREATE-WINDOW (CLEAR-WITH-FF-P USE-SYS-HORIZ-WRAP-P
						 HEIGHT WIDTH
				       &OPTIONAL (VERTICAL-OFFSET 0)
				                 (HORIZONTAL-OFFSET 0))
       (MAKE-ARRAY-BLOCK ED-EDITOR-ARRAYS-AREA 'ART-Q-LIST
			 (LIST HEIGHT)
			 NIL
			 (NREVERSE
			  (LIST
			   HEIGHT    ;ED-WINDOW-FILL-POINTER  PERMANENT HACK
			   HEIGHT    ;ED-WINDOW-HEIGHT
			   WIDTH     ;ED-WINDOW-WIDTH
			   VERTICAL-OFFSET ;ED-WINDOW-HORIZONTAL-OFFSET
			   HORIZONTAL-OFFSET ;ED-WINDOW-VERTICAL-OFFSET
			   2         ;ED-WINDOW-MIN-CURSORPOS
			   (- HEIGHT 3)  ;ED-WINDOW-MAX-CURSORPOS
			   (- HEIGHT 10) ;ED-WINDOW-MIN-RESET-CURSORPOS
			   10        ;ED-WINDOW-MAX-RESET-CURSORPOS
			   (// HEIGHT 2) ;ED-WINDOW-CENTER-CURSORPOS
			   0         ;ED-WINDOW-TOP-LINE-DISPLAYED
			   ED-TICK   ;ED-INDOW-UNMUNGED
   		; NOT IN YET
			   0         ;ED-WINDOW-LOGICAL-CURSORPOS-V
			   0         ;ED-WINDOW-LOGICAL-CURSORPOS-H
			   CLEAR-WITH-FF-P ;ED-WINDOW-CLEAR-WITH-FORM-FEED
			   USE-SYS-HORIZ-WRAP-P ;ED-WINDOW-USE-SYSTEM-HORIZONTAL-WRAPAROUND
			   ))))


(DEFUN ED-OPEN-BUFFER (BUFFER)
       (COND ((EQ ED-OPEN-BUFFER BUFFER) T)		; ALREADY OPEN?
	     (T 
	      (ED-CLOSE-OPEN-BUFFER)
	      (SETQ ED-OPEN-BUFFER BUFFER)
	      (SETQ ED-POINT (ED-BUFFER-POINT BUFFER))
	      (SETQ ED-MARK (ED-BUFFER-MARK BUFFER))
	      (SETQ ED-MARK-PDL (ED-BUFFER-MARK-PDL)))))

(DEFUN ED-CLOSE-OPEN-BUFFER NIL
       (COND ((NULL ED-OPEN-BUFFER) NIL)		; ALREADY CLOSED?
	     (T (ED-CLOSE-OPEN-LINE)
		(SETF (ED-BUFFER-POINT) ED-POINT)
		(SETF (ED-BUFFER-MARK) ED-MARK)
		(SETF (ED-BUFFER-MARK-PDL) ED-MARK-PDL)
		(SETQ ED-OPEN-BUFFER NIL
		      ED-POINT NIL			; (FOR CLEANLINESS)
		      ED-MARK NIL)
		T)))

(DEFUN ED-OPEN-LINE (LINE-NUM)       ; ONLY FOR AN EXISTING LINE.
       (COND ((= LINE-NUM ED-OPEN-LINE-NUMBER)		; ALREADY OPEN?
	      T)
	     ((NULL ED-OPEN-BUFFER)
	      (ED-BARF "No open buffer -- ED-OPEN-LINE"))
	     ((OR (< LINE-NUM 0)
		  (> LINE-NUM (ED-BUFFER-FILL-POINTER)))
	      (ED-BARF "Nonexistent line -- ED-OPEN-LINE"))
	     (T (ED-CLOSE-OPEN-LINE)
		(SETQ ED-OPEN-LINE-NUMBER LINE-NUM
		      ED-OPEN-LINE
;		      (ED-EXPAND-LINE                  ; NEWDISPLAY!
		       (AR-1 ED-OPEN-BUFFER LINE-NUM)
;		       )                               ; NEWDISPLAY!
		      )
;		(ED-INSERT-LINE-INTO-OPEN-BUFFER ED-OPEN-LINE ED-OPEN-LINE-NUMBER) ; NEW HACK!
;not needed with new EXPAND-LINE (nor with NEWDISPLAY)
		T)))


(DEFUN ED-CLOSE-OPEN-LINE NIL
       (COND ((NULL ED-OPEN-LINE) T)
	     ((NULL ED-OPEN-LINE-NUMBER)		; A NEW LINE IS OPEN
	      (ADJUST-ARRAY-SIZE ED-OPEN-LINE (ED-LINE-FILL-POINTER))
	      (SETQ ED-OPEN-LINE NIL)
	      T)
	     (T (ADJUST-ARRAY-SIZE ED-OPEN-LINE (ED-LINE-FILL-POINTER))
		(SETQ ED-OPEN-LINE NIL			; with new hack, it is ALREADY 
		      ED-OPEN-LINE-NUMBER NIL)		; in the buffer!
		T)))

;Initialization and i/o functions.

(DEFUN ED-INITIALIZE NIL

;-- Sophisticated editor storage allocation system.
       (SETQ ED-EDITOR-ARRAYS-AREA WORKING-STORAGE-AREA
	     ED-LINE-BUFFER-AREA   WORKING-STORAGE-AREA
	     ED-ARRAYS-AREA        WORKING-STORAGE-AREA
	     ED-LINE-AREA          WORKING-STORAGE-AREA)

;-- Set up all of the tables.
       (ED-SETUP-INITIAL-COMMAND-DISPATCH-TABLE)	;***** HACK *****
       (ED-SETUP-OTHER-INITIAL-TABLES)			;***** HACK *****
       (SETQ ED-COMMAND-DISPATCH-TABLE
	     (MAKE-ARRAY-BLOCK ED-EDITOR-ARRAYS-AREA 'ART-Q '(4 220)))
       (SETQ ED-LIST-SYNTAX-TABLE
	     (MAKE-ARRAY-BLOCK ED-EDITOR-ARRAYS-AREA 'ART-4B '(400)))
       (SETQ ED-WORD-SYNTAX-TABLE
	     (MAKE-ARRAY-BLOCK ED-EDITOR-ARRAYS-AREA 'ART-1B '(400)))
       (ED-SET-UP-DISPATCH-TABLE ED-INITIAL-COMMAND-DISPATCH-TABLE)
       (ED-SETUP-TABLE ED-LIST-SYNTAX-TABLE ED-INITIAL-LIST-SYNTAX-LIST)
       (ED-SETUP-TABLE ED-WORD-SYNTAX-TABLE ED-INITIAL-WORD-SYNTAX-LIST)

;-- Initialize the I/O stuff
       (SETQ ED-BUFFER-IO-UNRCHF NIL			;RESET UNRCHFS FOR OUR STREAMS
	     ED-KEYBOARD-IO-UNRCHF NIL)  

       (SETQ ED-PC-PPR					;26. lines
	     (TV-DEFINE-PC-PPR 'ED-PC-PPR (LIST TVFONT)
			       'TOP 000. 'BOTTOM 312. 'MORE-P NIL))
       (TV-DEACTIVATE-PC-PPR ED-PC-PPR)
       (SETQ ED-AUX-PC-PPR				;4 lines
	     (TV-DEFINE-PC-PPR 'ED-AUX-PC-PPR (LIST TVFONT)
				'TOP 312. 'BOTTOM 360. 'MORE-P NIL))
       (TV-DEACTIVATE-PC-PPR ED-AUX-PC-PPR)
       (SETQ ED-DEBUG-PC-PPR				;7 lines
	     (TV-DEFINE-PC-PPR 'ED-DEBUG-PC-PPR (LIST TVFONT)
			       'TOP 360. 'BOTTOM 444. 'MORE-P NIL))
       (TV-DEACTIVATE-PC-PPR ED-DEBUG-PC-PPR)

       (SETQ ED-WINDOW
	     (ED-CREATE-WINDOW T T 26. 95.))
;THE TV IS 37. HIGH BY 95. WIDE = 45 BY 137

       (ED-COMMAND-RESET)
       (SETQ ED-OPEN-BUFFER        NIL
	     ED-OPEN-LINE          NIL
	     ED-OPEN-LINE-NUMBER   NIL
	     ED-DISPLAY-TOP-LINE   NIL
	     ED-DEBUGP             NIL
	     ED-SEARCH-STRING      NIL
	     ED-METER-LINE         0
	     ED-METER-BUFFER       0
	     ED-INTERACTIVE-P      NIL)
       )

(DEFUN ED-RECOVER NIL
   (TV-ACTIVATE-PC-PPR CONSOLE-IO-PC-PPR)
   (TV-DEACTIVATE-PC-PPR ED-PC-PPR)
   (TV-DEACTIVATE-PC-PPR ED-AUX-PC-PPR)
   (SETQ ED-BUFFER-IO-UNRCHF NIL
	 ED-KEYBOARD-IO-UNRCHF NIL)
   (SETQ ED-INTERACTIVE-P NIL))

(DEFUN IO-READ-CURSORPOS NIL
   (PROG NIL
	 (RETURN (// (PC-PPR-CURRENT-Y ED-PC-PPR) (PC-PPR-LINE-HEIGHT ED-PC-PPR))
		 (// (PC-PPR-CURRENT-X ED-PC-PPR) (PC-PPR-CHAR-WIDTH ED-PC-PPR)))))

(DEFUN IO-SET-CURSORPOS (Y X)
   (TV-SET-CURSORPOS ED-PC-PPR
		     (* X (PC-PPR-CHAR-WIDTH ED-PC-PPR))
		     (* Y (PC-PPR-LINE-HEIGHT ED-PC-PPR))))

(DEFUN ED-DEBUG-IO (OP &OPTIONAL ARG1)
   (COND ((EQ OP 'TYO)
	  (TV-TYO ED-DEBUG-PC-PPR ARG1))
	 (T (ERROR "Undefined operation -- ED-DEBUG-IO" OP))))

(DEFUN ED-KEYBOARD-IO (OP &OPTIONAL ARG1) 
   (COND ((EQ OP 'TYI)
	  (COND (ED-KEYBOARD-IO-UNRCHF
		 (PROG1 ED-KEYBOARD-IO-UNRCHF (SETQ ED-KEYBOARD-IO-UNRCHF NIL)))
		(T (KBD-TYI))))
	 (T (ERROR "Undefined operation -- ED-KEYBOARD-IO" OP))))



; SOME RANDOM MACROS

(DEFMACRO PROG1 BODY
    `(PROG2 NIL ,,BODY))

(DEFMACRO ED-BP BODY
    `(CONS ,,BODY))

(DEFMACRO ED-BP-LINE-NUM (BP)
     `(ED-LINE-NUMBER (CDR ,BP)))

(DEFMACRO ED-BP-CHAR-POS (BP)
    `(CAR ,BP))

(DEFMACRO ED-BP-LINE (BP)
    `(CDR ,BP))

(DEFUN ED-BP-LINE-NUM-SET (BP VALUE &AUX LINE)
       (COND ((= VALUE (ED-BP-LINE-NUM BP)) VALUE)
	     (T (SETF (ED-LINE-BUFFER-POINTER-LIST (CDR BP))
		      (DELQ BP (ED-LINE-BUFFER-POINTER-LIST (CDR BP))))
		(SETQ LINE (AR-1 ED-OPEN-BUFFER VALUE))
		(SETF (ED-LINE-BUFFER-POINTER-LIST LINE)
		      (CONS BP (ED-LINE-BUFFER-POINTER-LIST LINE)))
		(RPLACD BP LINE)
		VALUE)))

(DEFMACRO ED-BP-CHAR-POS-SET BODY
    `(RPLACA ,,BODY))

(DEFMACRO ED-BP-LINE-SET BODY
    `(RPLACD ,,BODY))

(MACRO LOCAL-MAPC (X)
       (SUBLIS (LIST (CONS 'FCN (CADADR X)) ;CADADR TO UNWRAP (FUNCTION --)
		     (CONS 'LIS (CADDR X)))
	       '(DO L LIS (CDR L) (NULL L)
		  (FCN (CAR L)))))

;(DEFMACRO LOCAL-MAPC ((IGNORED FCTN) LIST)  ;DEBUG THIS SOME TIME.  NEVER TRIED.
;     `(DO L ,LIST (CDR L) (NULL L)
;	  (,FCTN (CAR L))))

(DEFUN ED-BP-SET (TO FROM)
       (ED-BP-CHAR-POS-SET TO (ED-BP-CHAR-POS FROM))
       (ED-BP-LINE-SET TO (ED-BP-LINE FROM)))

(DEFUN ED-BOB-P (BP)
    (AND (= (ED-BP-LINE BP) (AR-1 ED-OPEN-BUFFER 0))
	 (= (ED-BP-CHAR-POS BP) 0)))

(DEFUN ED-EOB-P (BP &AUX LINE)
   (SETQ LINE (AR-1 ED-OPEN-BUFFER (1- (ED-BUFFER-FILL-POINTER))))
   (AND (= (ED-BP-LINE BP) LINE)
	(= (ED-BP-CHAR-POS BP) (ED-LINE-FILL-POINTER LINE))))

;Random useful functions.

; ED-LINE-COPY returns a new line which is a copy of the first arg, a line.
;    It is suitable for insertion in any buffer; no BPs are copied, etc.
; ED-EXPAND-LINE is used to copy the line AND put it back where it came from
;   in the open buffer, fixing up all the data structures.

(DEFUN ED-LINE-COPY (LINE &OPTIONAL LINE-LENGTH &AUX NEW-LINE)
       (SETQ NEW-LINE (COND (LINE-LENGTH (ED-CREATE-LINE LINE-LENGTH))
			    (T (ED-CREATE-LINE (MAX 100
						    (ED-LINE-FILL-POINTER LINE))))))
       (%COPY-ARRAY-CONTENTS LINE NEW-LINE)
       (SETF (ED-LINE-#-PHYSICAL-LINES NEW-LINE) (ED-LINE-#-PHYSICAL-LINES LINE))
       (SETF (ED-LINE-FILL-POINTER NEW-LINE) (ED-LINE-FILL-POINTER LINE))
       NEW-LINE)

(DEFUN ED-EXPAND-LINE (LINE &OPTIONAL LINE-LENGTH &AUX NEW-LINE)
    (SETQ NEW-LINE (ED-LINE-COPY LINE LINE-LENGTH))
    (SETF (ED-LINE-DISPLAYED NEW-LINE) (ED-LINE-DISPLAYED LINE))
    (ED-INSERT-LINE-INTO-OPEN-BUFFER NEW-LINE (ED-LINE-NUMBER LINE))
    (SETF (ED-LINE-BUFFER-POINTER-LIST NEW-LINE)
	  (APPEND (ED-LINE-BUFFER-POINTER-LIST LINE) NIL))	;??? DOES THIS HAVE TO COPY?
    (LOCAL-MAPC (FUNCTION
		 (LAMBDA (BP)
			 (ED-BP-LINE-SET BP NEW-LINE)))
		(ED-LINE-BUFFER-POINTER-LIST LINE))       
    NEW-LINE)

(DEFUN ED-BARF (&REST &EVAL X)
   (COND (ED-INTERACTIVE-P
	  (TV-BEEP)					;REAL MACHINE
	  (DO L X (CDR L) (NULL L)
	    (PRINC (CAR L) 'ED-DEBUG-IO))
	  (TV-CRLF ED-DEBUG-PC-PPR)
	  (%THROW 'ED-TOP-LEVEL 0))
	 (T					  ;SOMEONE USING EDITOR FUNCTIONS HAS LOST
	  (BREAK EDITOR-LOSSAGE))))

; Random string hacking functions.  These should all support single-fixnum "strings."

(DEFUN ED-STRING-LENGTH (STRING)
       (COND ((NUMBERP STRING) 1)
	     (T (%ARRAY-ACTIVE-INDEX-LENGTH STRING))))

(DEFUN ED-STRING-MEMQ (CHAR STRING &OPTIONAL (FROM 0) &AUX LENGTH)
       (COND ((NUMBERP STRING)
	      (COND ((> FROM 0) NIL)
	            ((= CHAR STRING) 0)
		    (T NIL)))
	     (T 
	      (SETQ LENGTH (ED-STRING-LENGTH STRING))
	      (DO ((I FROM (1+ I)))
		  ((>= I LENGTH) NIL)
		  (AND (= CHAR (AR-1 STRING I))
		       (RETURN I))))))

(DEFUN ED-FILL-LINE (TO FROM &AUX LENGTH)
   (ED-MUNG TO)						;NEWDISPLAY!
   (COND ((NUMBERP FROM)
	  (SETQ TO (ED-ASSURE-ROOM-IN-LINE TO 1))
	  (FILL-ARRAY TO FROM)
	  TO)
	 (T (SETQ LENGTH (ED-STRING-LENGTH FROM))
	    (SETQ TO (ED-ASSURE-ROOM-IN-LINE TO LENGTH))
	    (DO I 0 (1+ I) (>= I LENGTH)
		(FILL-ARRAY TO (AR-1 FROM I)))
	    TO)))

(DEFUN ED-ASSURE-ROOM-IN-LINE (LINE ROOM &AUX SIZE)
       (SETQ SIZE (ARRAY-DIMENSION-N 1 LINE))
       (COND ((< SIZE (+ ROOM (ED-STRING-LENGTH LINE)))
	      (ED-EXPAND-LINE LINE (+ SIZE (MAX ROOM 100.))))
	     (T LINE)))

(DEFUN ED-COUNT-CHARS (CHAR STRING)
   (COND ((NUMBERP STRING) (COND ((= CHAR STRING) 1)
				 (T 0)))
	 (T (DO ((I 0 (1+ I))
		 (N 0)
		 (LENGTH (ED-STRING-LENGTH STRING)))
		((>= I LENGTH) N)
	      (AND (= (AR-1 STRING I) CHAR) (SETQ N (1+ N)))))))

; ED-SUBSTRING creates a substring of a given string.  The first
; arg is the string, the second is the FROM char-pos, and the third is the
; TO char-pos.  The substring is an index-offset array, so clobbering
; the original string will also clobber the substring.  Taking
; a substring of a substring will not produce a long chain; it
; will look at the given substring and create a new pointer to the
;  original array.

; At the moment this does not really work well with single character strings...

(DEFUN ED-SUBSTRING (STRING FROM TO &AUX LENGTH DIMLIST)
	(SETQ LENGTH (- TO FROM))
	(SETQ DIMLIST (NCONS LENGTH))
	(COND ((NOT (ARRAY-INDEXED-P STRING))
	       (MAKE-ARRAY-BLOCK ED-EDITOR-ARRAYS-AREA 'ART-STRING
				 DIMLIST		;ARRAY LENGTH
				 STRING			;DISPLACED
				 DIMLIST		;LEADER (FILL POINTER)
				 FROM))			;INDEX OFFSET
		; OTHERWISE, PROBABLY A SUBSTRING OF A SUBSTRING
	      (T
	       (MAKE-ARRAY-BLOCK ED-EDITOR-ARRAYS-AREA 'ART-STRING
				 DIMLIST		;ARRAY LENGTH
				 (%OFFSET-MEM-REF 1 STRING) ;POINT TO ARRAY POINTED
							;TO ORIGINALLY
				 DIMLIST		;LEADER (FILL POINTER)
				 (+ FROM
				    (%OFFSET-MEM-REF 3 STRING))))))

; Functions for DELETEing and RELOCATING buffer pointers.

; The top-level deletion function is ED-DELETE-CHARS which takes a buffer pointer
;   and a number of chars to delete.  It opens the line, stores the changes, etc.
;   It has only one auxiliary, ED-DELETE-CHARS-IN-OPEN-LINE which does the actual
;   BLTing, etc.

(DEFUN ED-DELETE-CHARS (BP NUM &AUX LINE-NUM CHAR-POS TEM BEGINNING-LINE-NUM LINE-LENGTH)
    (SETQ LINE-NUM (ED-BP-LINE-NUM BP))
    (SETQ CHAR-POS (ED-BP-CHAR-POS BP))
    (SETQ BEGINNING-LINE-NUM LINE-NUM)			;SAVE FOR LATER
    (ED-OPEN-LINE LINE-NUM)
    (SETQ TEM (- (ED-LINE-FILL-POINTER) CHAR-POS))
    (COND ((<= NUM TEM)
	   (ED-DELETE-CHARS-WITHIN-OPEN-LINE CHAR-POS NUM))
	  (T
	   (PROG NIL
	         (ED-TRUNCATE-LINE CHAR-POS)
	         (SETQ NUM (- NUM TEM))
AT-END-OF-LINE   (COND ((ZEROP NUM)
			(GO X)))
                 (SETQ LINE-NUM (1+ LINE-NUM))
		 (SETQ NUM (1- NUM))
AT-BEGIN-OF-LINE (SETQ LINE-LENGTH (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER LINE-NUM)))
                 (COND ((>= NUM LINE-LENGTH)
			(SETQ NUM (- NUM LINE-LENGTH))
			(GO AT-END-OF-LINE)))
      		 (ED-OPEN-LINE LINE-NUM)
		 (ED-DELETE-CHARS-WITHIN-OPEN-LINE 0 NUM)
		 (ED-GLUE-LINE ED-OPEN-LINE BEGINNING-LINE-NUM)
	       X (ED-TAKE-ROOM-FROM-BUFFER BEGINNING-LINE-NUM
					   (- LINE-NUM BEGINNING-LINE-NUM)))))
    BP)


(DEFUN ED-DELETE-BETWEEN (BP1 BP2 &AUX LINE-NUM1 LINE-NUM2)
   (MULTIPLE-VALUE (BP1 BP2)
		   (ED-ORDER-BPS BP1 BP2))
   (SETQ LINE-NUM1 (ED-BP-LINE-NUM BP1))
   (SETQ LINE-NUM2 (ED-BP-LINE-NUM BP2))
   (COND ((= LINE-NUM1 LINE-NUM2)
	  (ED-DELETE-CHARS BP1 (- (ED-BP-CHAR-POS BP2)
				  (ED-BP-CHAR-POS BP1)))
	  (ED-MOVE-BP-FROM-BP BP2 BP1))
	 (T
	  (ED-OPEN-LINE LINE-NUM2)
	  (ED-DELETE-CHARS-WITHIN-OPEN-LINE 0 (ED-BP-CHAR-POS BP2))
	  (ED-OPEN-LINE LINE-NUM1)
	  (ED-TRUNCATE-LINE (ED-BP-CHAR-POS BP1))
	  (DO I (1+ LINE-NUM1) (1+ I) (>= I LINE-NUM2)
	    (LOCAL-MAPC (FUNCTION (LAMBDA (BP)
					  (ED-MOVE-BP-FROM-BP BP BP1)))
			(ED-LINE-BUFFER-POINTER-LIST (AR-1 ED-OPEN-BUFFER I))))
	  (ED-GLUE-LINE (ED-BP-LINE BP2))
	  (ED-TAKE-ROOM-FROM-BUFFER LINE-NUM1 (- LINE-NUM2 LINE-NUM1))))
   BP1)

(DEFUN ED-DELETE-CHARS-WITHIN-OPEN-LINE (CHAR-POS NUMBER &AUX TEM REAL-END LINE-LENGTH)
       (SETQ REAL-END (+ CHAR-POS NUMBER))
       (SETQ LINE-LENGTH (ED-LINE-FILL-POINTER))
       (DO ((FROM REAL-END (1+ FROM))
	    (TO CHAR-POS (1+ TO)))
	   ((>= FROM LINE-LENGTH) T)
	   (AS-1 (AR-1 ED-OPEN-LINE FROM) ED-OPEN-LINE TO))
       (SETF (ED-LINE-FILL-POINTER) (- (ED-LINE-FILL-POINTER) NUMBER))
       (ED-MUNG ED-OPEN-LINE)				;NEWDISPLAY!
       (ED-NOTE-LINE-CHANGE 'DELETE CHAR-POS NUMBER))


; RELOCATE buffer pointers:  when inserting and deleting, buffer pointers
; must get updated in order to stay correct.  Fortunately, due to the new data 
; structures, only the open line's buffer pointers need be hacked.
; ED-NOTE-LINE-CHANGE takes as its first arg the type of change which was
; made, either INSERT or DELETE.  The second is the position of the change,
; and the third the number of characters inserted or deleted.


(DEFUN ED-NOTE-LINE-CHANGE (TYPE POSITION AMOUNT &AUX CHAR-POS)
       (LOCAL-MAPC
	(FUNCTION (LAMBDA (BP)
			  (SETQ CHAR-POS (ED-BP-CHAR-POS BP))
			  (COND ((EQ TYPE 'INSERT)
				 (AND (> CHAR-POS POSITION)
				      (SETQ CHAR-POS (+ CHAR-POS AMOUNT))))
				((EQ TYPE 'DELETE)
				 (COND ((< CHAR-POS POSITION))	;DO NOTHING
				       ((< CHAR-POS (+ AMOUNT POSITION))  ;IT WAS DELETED
					(SETQ CHAR-POS POSITION))
				       (T
					(SETQ CHAR-POS (- CHAR-POS AMOUNT)))))
				(T (ED-BARF "Unknown line change " TYPE
					    " -- ED-NOTE-LINE-CHANGE")))
			  (ED-BP-CHAR-POS-SET BP CHAR-POS)))
	(ED-LINE-BUFFER-POINTER-LIST)))

(DEFUN ED-TAKE-ROOM-FROM-BUFFER (LINE-NUM ROOM &AUX (LIM (ED-BUFFER-FILL-POINTER)))
    (COND ((> ROOM 0)
	   (ED-CLOSE-OPEN-LINE)
	   (DO ((FROM (1+ (+ LINE-NUM ROOM)) (1+ FROM))
		(TO (1+ LINE-NUM) (1+ TO)))
	       ((>= FROM LIM) NIL)
	    (SETQ TEM (AR-1 ED-OPEN-BUFFER FROM))
	    (ED-INSERT-LINE-INTO-OPEN-BUFFER TEM TO))
	   (SETF (ED-BUFFER-FILL-POINTER) (- LIM ROOM)))))

; ED-TRUNCATE-LINE deletes off the end of a line.  The first arg is the
; CHAR-POS after which to truncate, and there is a optional second arg
; which is a line-number to open. 

(DEFUN ED-TRUNCATE-LINE (CHAR-POS &OPTIONAL LINE-NUM &AUX TEM)
       (AND LINE-NUM (ED-OPEN-LINE LINE-NUM))
       (SETQ TEM (ED-LINE-FILL-POINTER))
       (COND ((> CHAR-POS TEM)
	      (ED-BARF "Truncate past end of line " LINE-NUM " --- ED-TRUNCATE-LINE"))
	     (T 
	      (SETF (ED-LINE-FILL-POINTER) CHAR-POS)
	      (ED-MUNG ED-OPEN-LINE)			;NEWDISPLAY!
	      (ED-NOTE-LINE-CHANGE 'DELETE CHAR-POS (- TEM CHAR-POS)))))


; ED-GLUE-LINE is the opposite of ED-BREAK-LINE; it takes as its first argument
; a line, which it glues onto the end of the open line.  There is an optional
; second arg, which is a line-number to open before the gluing.  The buffer pointers
; are all changed to be correct.  The glued line is of course useless, so
; it should be flushed.  the new open line is returned.

(DEFUN ED-GLUE-LINE (LINE &OPTIONAL LINE1-NUM
			      &AUX OLD-BP-LIST BP-LIST LENGTH)
       (AND LINE1-NUM (ED-OPEN-LINE LINE1-NUM))
       (SETF (ED-LINE-DISPLAYED) NIL)
       (SETQ LENGTH (ED-LINE-FILL-POINTER))
       (SETQ ED-OPEN-LINE (ED-FILL-LINE ED-OPEN-LINE LINE))
       (SETQ BP-LIST (ED-LINE-BUFFER-POINTER-LIST))
       (SETQ OLD-BP-LIST (ED-LINE-BUFFER-POINTER-LIST LINE))
       (LOCAL-MAPC
	(FUNCTION (LAMBDA (BP)
			  (ED-BP-LINE-SET BP ED-OPEN-LINE)
			  (ED-BP-CHAR-POS-SET BP (+ LENGTH (ED-BP-CHAR-POS BP)))
			  (SETQ BP-LIST (CONS BP BP-LIST))))
	OLD-BP-LIST)
       (SETF (ED-LINE-BUFFER-POINTER-LIST) BP-LIST)
       (SETF (ED-LINE-BUFFER-POINTER-LIST LINE) NIL)	;PROBABLY SUPERFLUOUS, BUT...
       ED-OPEN-LINE)

; Insertion functions:  The top level insertion function is ED-INSERT-CHARS
;   which takes a buffer pointer and a string to insert.  It hands the work off
;   to either ED-INSERT-CR-FREE-STRING or ED-INSERT-CR-FULL-STRING, both of
;   which are suitably toplevel (open lines and hack open-line-changes).
;   ED-INSERT-STRING-IN-OPEN-LINE is a primitive which does the actual
;   insertion; it must be passed a CR free string, which it will insert in the
;   open line; it never closes nor opens any lines.

(DEFUN ED-INSERT-CHARS (BP STRING)
       (COND 
;	     ((ZEROP (ED-STRING-LENGTH STRING))   ;THIS IS PRETTY RANDOM.
;	      T)
	     ((ED-STRING-MEMQ 215 STRING)
	      (ED-INSERT-CR-FULL-STRING BP STRING))
	     (T
	      (ED-INSERT-CR-FREE-STRING BP STRING))))

; An alternative top level function (which, in fact, calls ED-INSERT-CHARS)
; is ED-INSERT-CHARS-MOVING, which is the same but moving the buffer pointer
; (i.e., it clobbers the buffer pointer to point at the end of the inserted
; text.)  This is the type of insertion used in TECO.

(DEFUN ED-INSERT-CHARS-MOVING (BP STRING)
       (ED-BP-SET BP (ED-INSERT-CHARS BP STRING)))


(DEFUN ED-INSERT-CR-FREE-STRING (BP STRING &AUX RETURNED-BP)
       (ED-OPEN-LINE (ED-BP-LINE-NUM BP))
       (SETQ RETURNED-BP (ED-INSERT-STRING-IN-OPEN-LINE (ED-BP-CHAR-POS BP) STRING))
       (ED-NOTE-LINE-CHANGE 'INSERT (ED-BP-CHAR-POS BP) (ED-STRING-LENGTH STRING))
       RETURNED-BP)

;AS OF ED1 365, THIS IS ONLY CALLED BY INSERT-CR-FREE-STRING!!!
(DEFUN ED-INSERT-STRING-IN-OPEN-LINE (CHAR-POS STRING &AUX LINE-LENGTH STRING-LENGTH
					       GAP-START TEM RETURNED-BP)
       (ED-MUNG ED-OPEN-LINE)				;NEWDISPLAY!
       (SETQ LINE-LENGTH (ED-LINE-FILL-POINTER))
       (SETQ STRING-LENGTH (ED-STRING-LENGTH STRING))
       (COND ((> CHAR-POS LINE-LENGTH)
	      (ED-BARF "Insert beyond end of line -- ED-INSERT-STRING-IN-OPEN-LINE " CHAR-POS)
	      (SETQ TEM (- CHAR-POS LINE-LENGTH))   ; NUMBER OF BLANKS NEEDED
	      (SETQ ED-OPEN-LINE (ED-ASSURE-ROOM-IN-LINE ED-OPEN-LINE (+ TEM STRING-LENGTH)))
							;*****THAT IS A SLIGHT CROCK...
	      (DO I 0 (1+ I) (>= I TEM)   (FILL-ARRAY ED-OPEN-LINE 40))
	      (SETQ ED-OPEN-LINE (ED-FILL-LINE ED-OPEN-LINE STRING))
	      (ED-BP (ED-LINE-FILL-POINTER) ED-OPEN-LINE))	;RETURNED BP
	     ((= CHAR-POS LINE-LENGTH)
	      (SETQ ED-OPEN-LINE (ED-FILL-LINE ED-OPEN-LINE STRING))
	      (ED-BP (ED-LINE-FILL-POINTER) ED-OPEN-LINE))	;RETURNED BP
	     (T (SETQ ED-OPEN-LINE (ED-ASSURE-ROOM-IN-LINE ED-OPEN-LINE STRING-LENGTH))
		(DO ((FROM (1- LINE-LENGTH) (1- FROM))
		     (TO (1- (+ LINE-LENGTH STRING-LENGTH)) (1- TO)))
		    ((< FROM CHAR-POS) NIL)
		    (AS-1 (AR-1 ED-OPEN-LINE FROM) ED-OPEN-LINE TO))
		(COND ((NUMBERP STRING) (AS-1 STRING ED-OPEN-LINE CHAR-POS))
		      (T (DO ((I CHAR-POS (1+ I))
			      (J 0 (1+ J)))
			     ((>= J STRING-LENGTH) NIL)
			     (AS-1 (AR-1 STRING J) ED-OPEN-LINE I))))
		(SETF (ED-LINE-FILL-POINTER) (+ (ED-LINE-FILL-POINTER) STRING-LENGTH))
		(ED-BP (+ CHAR-POS STRING-LENGTH) ED-OPEN-LINE))))



(DEFUN ED-INSERT-CR-FULL-STRING (BP STRING &AUX		;STRING MAY NOT BE A FIXNUM
				    LINE-NUM CHAR-POS TEM)
       (SETQ LINE-NUM (ED-BP-LINE-NUM BP))
       (SETQ CHAR-POS (ED-BP-CHAR-POS BP))
       (SETQ TEM (ED-COUNT-CHARS 215 STRING))
       (ED-MAKE-ROOM-IN-BUFFER LINE-NUM TEM)
       (ED-INSERT-LINE-INTO-OPEN-BUFFER
	(ED-BREAK-LINE CHAR-POS LINE-NUM)
	(+ LINE-NUM TEM))
       (DO ((LINE-NUM LINE-NUM (1+ LINE-NUM))
	    (CHAR-POS CHAR-POS 0)
	    (FROM 0 (1+ TO))
	    (TO (ED-STRING-MEMQ 215 STRING)
		(ED-STRING-MEMQ 215 STRING (1+ TO))))
	   ((NULL TO)
	       (ED-OPEN-LINE LINE-NUM)
	       (ED-INSERT-CR-FREE-STRING
		(ED-BP CHAR-POS ED-OPEN-LINE)	;AND THIS IS WHAT WE RETURN
		(ED-SUBSTRING STRING FROM (%ARRAY-ACTIVE-INDEX-LENGTH STRING))))

	 (ED-OPEN-LINE LINE-NUM)
	 (ED-INSERT-CR-FREE-STRING (ED-BP CHAR-POS ED-OPEN-LINE)
				   (ED-SUBSTRING STRING FROM TO))))


;(DEFUN ED-INSERT-CR-FULL-STRING (BP STRING &AUX TEM)
;       (SETQ TEM (ED-CONVERT-STRING-TO-BUFFER STRING))
;       (COND ((ZEROP (ED-BUFFER-FILL-POINTER))		;THIS IS ACTUALLY COMMON; IT HAPPENS
;	      (ED-OPEN-BUFFER TEM)			;   WHEN WE READ IN A FILE TO EDIT.
;	      ED-POINT)
;     (T (ED-INSERT-BUFFER BP TEM))))


(DEFUN ED-CONVERT-STRING-TO-BUFFER (STRING &AUX OLD-BUFFER TEM SIZE
					   ED-OPEN-BUFFER ED-POINT ED-MARK ED-OPEN-LINE
					   ED-OPEN-LINE-NUMBER)
       (ED-OPEN-BUFFER (ED-CREATE-BUFFER))		; OPEN THE NEW BUFFER
       (SETQ TEM (ED-STRING-MEMQ 215 STRING))
       (COND ((NULL TEM)				; IF NO CR'S, EASY
	      (ED-INSERT-CR-FREE-STRING ED-POINT STRING)
	      (SETQ SIZE 1))
	     ((NUMBERP STRING)				; THE CHARACTER 215 (NEWLINE)
	      (ED-ADD-LINE-TO-BUFFER)
	      (SETQ SIZE 2))
	     (T (ED-INSERT-CR-FREE-STRING		; PUT IN THE FIRST LINE
		 ED-POINT (ED-SUBSTRING STRING 0 TEM))
		(DO ((S (ED-SUBSTRING STRING (1+ TEM) (ED-STRING-LENGTH STRING))
			(ED-SUBSTRING S (1+ CRLOC) (ED-STRING-LENGTH S)))
		     (I 1 (1+ I))			; S IS SUCCESIVE SUBSTRINGS, I THE
		     (CRLOC))				; INDEX INTO THE BUFFER
		    ((NULL (SETQ CRLOC (ED-STRING-MEMQ 215 S)))
		     (ED-INSERT-LINE-INTO-OPEN-BUFFER
		      (ED-FILL-LINE (ED-CREATE-LINE) S)
		      I)
		     (SETQ SIZE (1+ SIZE)))
							
		    (ED-INSERT-LINE-INTO-OPEN-BUFFER	; NOW, THE DO BODY:
		     (ED-FILL-LINE (ED-CREATE-LINE) (ED-SUBSTRING S 0 CRLOC))
		     I)
		    (SETQ SIZE (1+ SIZE)))))
       (SETF (ED-BUFFER-FILL-POINTER) SIZE)
       ED-OPEN-BUFFER)					; AND RETURN THE BUFFER

; More insertion functions.

; ED-INSERT-LINE-INTO-OPEN-BUFFER is used to put lines into the open buffer;
; it makes sure the ED-LINE-NUMBER is set up right too.  The first arg
; is the line to be inserted, and the second arg is the index into the
; open buffer.

(DEFUN ED-INSERT-LINE-INTO-OPEN-BUFFER (LINE WHERE)
   (SETF (ED-LINE-NUMBER LINE) WHERE)
   (AS-1 LINE ED-OPEN-BUFFER WHERE))

; ED-ADD-LINE-TO-BUFFER adds a new line to the end of the open buffer.
; *** Rewrite this to dynamically expand buffer...

(DEFUN ED-ADD-LINE-TO-BUFFER (&AUX LENGTH)
   (SETQ LENGTH (ED-BUFFER-FILL-POINTER))
   (ED-INSERT-LINE-INTO-OPEN-BUFFER (ED-CREATE-LINE) LENGTH)
   (1- (SETF (ED-BUFFER-FILL-POINTER) (1+ LENGTH))))

; ED-MAKE-ROOM-IN-BUFFER opens up some space in the buffer, keeping
; the LINE-NUMBERS straight.  The first arg is the LINE-NUM of the last unmoved line,
; the second is the number of lines the caller wants opened.
; Be careful, it closes the open line.

(DEFUN ED-MAKE-ROOM-IN-BUFFER (LINE-NUM ROOM &AUX LIM TEM)
       (COND ((> ROOM 0)
	      (ED-CLOSE-OPEN-LINE)
	      (DO ((FROM (1- (ED-BUFFER-FILL-POINTER)) (1- FROM))
		   (TO (1- (+ (ED-BUFFER-FILL-POINTER) ROOM)) (1- TO)))
		  ((<= FROM LINE-NUM) NIL)
		(SETQ TEM (AR-1 ED-OPEN-BUFFER FROM))
		(ED-INSERT-LINE-INTO-OPEN-BUFFER TEM TO))
	      (SETQ LIM (+ LINE-NUM ROOM))
	      (DO I (1+ LINE-NUM) (1+ I) (> I LIM)
		  (AS-1 NIL ED-OPEN-BUFFER I))
	      (SETF (ED-BUFFER-FILL-POINTER) (+ (ED-BUFFER-FILL-POINTER) ROOM)))))

; ED-INSERT-BUFFER inserts a buffer into the open buffer.  The first arg
; is a buffer-pointer into the open buffer indicating where the new buffer should be
; inserted, and the second is the buffer to insert.   This is useful
; for inserting CR-FULL strings, and the equivalent of yanking a Q-register
; in TECO.  Any buffer pointers into the buffer stay put and are not transferred
; to the open buffer.  It returnd a buffer pointer to the end of the inserted text.

(DEFUN ED-INSERT-BUFFER (BP BUFFER &AUX BUFFER-LENGTH LINE-NUM CHAR-POS RETURNED-BP)
       (SETQ BUFFER-LENGTH (ED-BUFFER-FILL-POINTER BUFFER))
       (COND ((= BUFFER-LENGTH 0)			;NOTHING TO BE DONE.
	      BP)
	     ((= BUFFER-LENGTH 1)			;SIMPLE STRING INSERTION.
	      (ED-INSERT-CR-FREE-STRING BP (AR-1 BUFFER 0)))
	     (T 
	      ; This is the difficult case; the line must have its end broken, and glued
	      ; onto the last line being inserted.
	      (SETQ LINE-NUM (ED-BP-LINE-NUM BP))
	      (SETQ CHAR-POS (ED-BP-CHAR-POS BP))
	      (ED-MAKE-ROOM-IN-BUFFER			;MAKE ROOM FOR THE NEW LINES
	       LINE-NUM (1- BUFFER-LENGTH))		; {THIS MUST BE DONE BEFORE 
							; HACKING WHICH LINE IS OPEN}
	      (ED-OPEN-LINE LINE-NUM)
	      (ED-INSERT-LINE-INTO-OPEN-BUFFER			;SPLIT THIS LINE
	       (ED-BREAK-LINE CHAR-POS)
	       (1- (+ LINE-NUM BUFFER-LENGTH)))		;THE LAST OF THE NEW LINES
	      (ED-INSERT-CR-FREE-STRING			;THE FIRST LINE IN THE BUFFER
	       (ED-BP (ED-LINE-FILL-POINTER) ED-OPEN-LINE)
	       (AR-1 BUFFER 0))
	      (ED-OPEN-LINE (1- (+ LINE-NUM BUFFER-LENGTH)))
	      (SETQ RETURNED-BP
		    (ED-INSERT-CR-FREE-STRING		;THE LAST LINE IN THE BUFFER
		     (ED-BP 0 ED-OPEN-LINE)
		     (AR-1 BUFFER (1- BUFFER-LENGTH))))
	      (DO ((I (1+ LINE-NUM) (1+ I))		;INDEX INTO OPEN BUFFER
		   (J 1 (1+ J)))			;INDEX INTO BUFFER TO BE INSERTED
		  ((>= J (1- BUFFER-LENGTH)))
		  (ED-INSERT-LINE-INTO-OPEN-BUFFER
		   (ED-LINE-COPY (AR-1 BUFFER J))
		   I))
	      RETURNED-BP)
	      ))

; Yet more insertion functions.
; ED-BREAK-LINE is used to separate the open line into two separate lines.
; all the buffer pointers must be shuffled into the right places.
; The first arg is the CHAR-POS at which to break it, and there is an optional
; second arg which is a line-number which will be opened.  The open line gets clobbered,
; and the new one (the end part of the original line) is returned, with its
; LINE-NUMBER set to NIL (uninserted line).

(DEFUN ED-BREAK-LINE (CHAR-POS &OPTIONAL LINE-NUM
				  &AUX TEM OLD-BP-LIST NEW-BP-LIST
				  OLD-LINE-NUM NEW-LINE OLD-LINE)
       (SETQ OLD-LINE-NUM
	     (COND (LINE-NUM)
		   (T ED-OPEN-LINE-NUMBER)))
       (ED-CLOSE-OPEN-LINE)
       (SETQ OLD-LINE (AR-1 ED-OPEN-BUFFER OLD-LINE-NUM))
       (SETQ NEW-LINE (ED-FILL-LINE (ED-CREATE-LINE)
				    (ED-SUBSTRING OLD-LINE CHAR-POS (ED-STRING-LENGTH
								     OLD-LINE))))
       (ED-OPEN-LINE OLD-LINE-NUM)
       (SETF (ED-LINE-FILL-POINTER) CHAR-POS)		; TRUNCATE THE LINE
       (ED-MUNG ED-OPEN-LINE)				; NEWDISPLAY!
       (SETQ OLD-BP-LIST (ED-LINE-BUFFER-POINTER-LIST))
       (SETQ NEW-BP-LIST NIL)				; THIS WILL BE THE BP LIST OF 
							; THE NEW LINE
       (LOCAL-MAPC
	(FUNCTION (LAMBDA (BP)
			  (SETQ TEM (ED-BP-CHAR-POS BP))
			  (COND ((> TEM CHAR-POS)
				 (SETQ OLD-BP-LIST
				       (DELQ BP OLD-BP-LIST 1))	; NO LONGER VALID FOR THIS LINE
				 (ED-BP-LINE-SET BP NEW-LINE)
				 (ED-BP-CHAR-POS-SET BP (- TEM CHAR-POS))
				 (SETQ NEW-BP-LIST	; PUT IT ONTO THE NEW LINE
				       (CONS BP NEW-BP-LIST))))))
	OLD-BP-LIST)
       (SETF (ED-LINE-BUFFER-POINTER-LIST NEW-LINE) NEW-BP-LIST) ; INSTALL THE NEW BPL
       NEW-LINE)



(DEFUN ED-INSERT-CRS-MOVING (BP NUMBER)
   (ED-MOVE-BP-FROM-BP BP (ED-INSERT-CRS BP NUMBER)))

(DEFUN ED-INSERT-CRS (BP NUMBER &AUX LINE-NUM TEM)
  (SETQ LINE-NUM (ED-BP-LINE-NUM BP))
  (SETQ TEM (+ LINE-NUM NUMBER))

  (ED-MAKE-ROOM-IN-BUFFER LINE-NUM NUMBER)
  (ED-INSERT-LINE-INTO-OPEN-BUFFER
   (ED-BREAK-LINE (ED-BP-CHAR-POS BP) LINE-NUM)
   TEM)
  (DO I (1+ LINE-NUM) (1+ I) (>= I TEM)
     (ED-INSERT-LINE-INTO-OPEN-BUFFER (ED-CREATE-LINE) I))
  (ED-BP 0 (AR-1 ED-OPEN-BUFFER TEM)))


(DEFUN ED-SAVE-BETWEEN (BP1 BP2 &AUX OLD-BUFFER NEW-BUFFER LINE-NUM1 LINE-NUM2 TEM)
    (MULTIPLE-VALUE (BP1 BP2)
		    (ED-ORDER-BPS BP1 BP2))    
    (SETQ LINE-NUM1 (ED-BP-LINE-NUM BP1)
	  LINE-NUM2 (ED-BP-LINE-NUM BP2))
    (SETQ NEW-BUFFER (ED-CREATE-BUFFER (+ 3 (- LINE-NUM2 LINE-NUM1)))
	  OLD-BUFFER ED-OPEN-BUFFER)
    (ED-OPEN-BUFFER NEW-BUFFER)
    (COND ((= LINE-NUM1 LINE-NUM2)
	   (ED-INSERT-CHARS ED-POINT (ED-SUBSTRING (ED-BP-LINE BP1)
						   (ED-BP-CHAR-POS BP1)
						   (ED-BP-CHAR-POS BP2)))
	   (SETF (ED-BUFFER-FILL-POINTER ED-OPEN-BUFFER) 1))
	  (T
	   (ED-INSERT-CHARS ED-POINT (ED-SUBSTRING (ED-BP-LINE BP1)
						   (ED-BP-CHAR-POS BP1)
						   (ED-STRING-LENGTH (ED-BP-LINE BP1))))
	   (DO ((I (1+ LINE-NUM1) (1+ I))
		(J 1 (1+ J)))
	       ((>= I LINE-NUM2) NIL)
	     (ED-INSERT-LINE-INTO-OPEN-BUFFER
	      (ED-LINE-COPY (AR-1 OLD-BUFFER I))
	      J))
	   (SETQ TEM (- LINE-NUM2 LINE-NUM1))
	   (ED-FILL-LINE (AS-1 (ED-CREATE-LINE) NEW-BUFFER TEM)
			 (ED-SUBSTRING (ED-BP-LINE BP2)
				       0
				       (ED-BP-CHAR-POS BP2)))
	   (SETF (ED-BUFFER-FILL-POINTER ED-OPEN-BUFFER) (1+ TEM))))
    (ED-OPEN-BUFFER OLD-BUFFER)
    NEW-BUFFER)

; ED-MOVE-BP takes a buffer pointer, a line number and a char pos, and
;causes the buffer pointer to point there.  The bp is assumed to be permanent
;will be delqed and installed as appropriate.

(DEFUN ED-MOVE-BP (BP LINE-NUM CHAR-POS &AUX LINE)
       (COND ((>= LINE-NUM (ED-BUFFER-FILL-POINTER))
	      (ED-BARF LINE-NUM "is not a valid line number -- ED-MOVE-BP")))
       (SETQ LINE (ED-BP-LINE BP))
       (COND ((> CHAR-POS (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER LINE-NUM)))
	      (ED-BARF CHAR-POS "is not a valid character position --  ED-MOVE-BP"))
	     ((= LINE-NUM (ED-BP-LINE-NUM BP))		; ARE WE ALREADY ON THAT LINE?
	      (ED-BP-CHAR-POS-SET BP CHAR-POS))		;   YES, EASY
	     (T
	      (SETF (ED-LINE-BUFFER-POINTER-LIST LINE)
		    (DELQ BP (ED-LINE-BUFFER-POINTER-LIST LINE)))
	      (SETQ LINE (AR-1 ED-OPEN-BUFFER LINE-NUM))
	      (SETF (ED-LINE-BUFFER-POINTER-LIST LINE)
		    (CONS BP (ED-LINE-BUFFER-POINTER-LIST LINE)))
	      (ED-BP-LINE-SET BP LINE)
	      (ED-BP-CHAR-POS-SET BP CHAR-POS))))

(DEFMACRO ED-MOVE-POINT X
    `(ED-MOVE-BP ED-POINT ,,X))

(DEFUN ED-MOVE-BP-FROM-BP (BP TO-BP)
   (ED-MOVE-BP BP (ED-BP-LINE-NUM TO-BP) (ED-BP-CHAR-POS TO-BP)))

(DEFUN ED-COPY-BP (BP)
   (ED-BP (ED-BP-CHAR-POS BP) (ED-BP-LINE BP)))

; Search functions

; ED-STRING-SEARCH searches for the its first arg within its second.
; Both args must be strings.  It returns the position +-1 or NIL if not found.

;(DEFUN ED-STRING-SEARCH (FOR IN &OPTIONAL (START 0) &AUX LENGTH LIMIT)
;   (SETQ LENGTH (%ARRAY-ACTIVE-INDEX-LENGTH FOR)
;	 LIMIT (- (%ARRAY-ACTIVE-INDEX-LENGTH IN) LENGTH))
;   (DO I START (1+ I) (>= I LIMIT)
;     (AND (DO ((J 0 (1+ J))
;	       (K I (1+ K)))
;	      ((>= J LENGTH) T)
;	    (OR (= (AR-1 IN K) (AR-1 FOR J))
;		(RETURN NIL)))
;	  (RETURN I))))

(DEFUN ED-CHAR-SEARCH (BP CHAR &AUX WINP)
   (MULTIPLE-VALUE (BP WINP)
      (%CATCH 'ED-EOB
	      (DO NIL (NIL)
		  (AND (= (ED-ILDB BP) CHAR)
		       (RETURN BP)))))
   (COND (WINP BP)
	 (T (ED-BARF))))

(DEFUN ED-CHARS-SEARCH (BP &REST CHARS &AUX WINP)
   (MULTIPLE-VALUE (BP WINP)
      (%CATCH 'ED-EOB
	      (DO NIL (NIL)
		  (AND (MEMQ (ED-ILDB BP) CHARS)
		       (RETURN BP)))))
   (COND (WINP BP)
	 (T (ED-BARF))))



(DEFUN EVAL-PRINT (OBJECT &OPTIONAL (STREAM PRINT-DEFAULT-OUTPUT-DESTINATION)
			  &AUX TEM)			;RETURNS WHAT TO SET * TO.
    (PROG NIL
       (DO VALL (MULTIPLE-VALUE-LIST (EVAL OBJECT))
	   (CDR VALL)
	   (NULL VALL)
	   (PRINT (SETQ TEM (CAR VALL))))
       (RETURN TEM OBJECT)))

(DEFUN ED-BP-CHAR (BP)
   (COND ((= (ED-BP-CHAR-POS BP) (ED-STRING-LENGTH (ED-BP-LINE BP)))
	  215)
	 (T
	  (AR-1 (ED-BP-LINE BP) (ED-BP-CHAR-POS BP)))))

(DEFUN ED-BP-CHAR-BEFORE (BP)
   (COND ((ZEROP (ED-BP-CHAR-POS BP))
	  215)
	 (T
	  (AR-1 (ED-BP-LINE BP) (1- (ED-BP-CHAR-POS BP))))))

(DEFUN ED-IBP (BP &AUX LINE-NUM)			;INCREMENT BUFFER POINTER
    (COND ((>= (ED-BP-CHAR-POS BP)			;THROWS TO ED-EOB ON EOB ERROR
	       (ED-STRING-LENGTH (ED-BP-LINE BP)))
	   (SETQ LINE-NUM (ED-LINE-NUMBER (ED-BP-LINE BP)))
	   (AND (>= (SETQ LINE-NUM (1+ LINE-NUM))
		    (ED-BUFFER-FILL-POINTER ED-OPEN-BUFFER))
		(%THROW 'ED-EOB 0))
	   (ED-BP-CHAR-POS-SET BP 0)
	   (ED-BP-LINE-SET BP (AR-1 ED-OPEN-BUFFER LINE-NUM)))
	  (T
	   (ED-BP-CHAR-POS-SET BP (1+ (ED-BP-CHAR-POS BP)))))
    BP)

(DEFUN ED-DBP (BP &AUX LINE-NUM)			;DECREMENT BUFFER POINTER
    (COND ((<= (ED-BP-CHAR-POS BP) 0)			;THROWS TO ED-BOB ON EOB ERROR
	   (SETQ LINE-NUM (ED-LINE-NUMBER (ED-BP-LINE BP)))
	   (AND (ZEROP LINE-NUM)
		(%THROW 'ED-BOB 0))
	   (ED-BP-LINE-SET BP (AR-1 ED-OPEN-BUFFER (1- LINE-NUM)))
	   (ED-BP-CHAR-POS-SET BP (ED-STRING-LENGTH (ED-BP-LINE BP))))
	  (T
	   (ED-BP-CHAR-POS-SET BP (1- (ED-BP-CHAR-POS BP)))))
    BP)

(DEFMACRO ED-ILDB (BP)
   `(ED-BP-CHAR (ED-IBP ,BP)))

(DEFMACRO ED-DLDB (BP)
   `(ED-BP-CHAR-BEFORE (ED-DBP ,BP)))

(DEFMACRO ED-COPY-BP (BP)
   `(ED-BP (ED-BP-CHAR-POS ,BP) (ED-BP-LINE ,BP)))


;**********************************
;*****  WORD EDITING COMMANDS *****
;**********************************

(DEFUN ED-FORWARD-WORD-BP (START-BP TIMES &AUX BP)	;RETURN A BP TO THE END OF THE
   (SETQ BP (ED-COPY-BP START-BP))
   (%CATCH 'ED-EOB
      (DO I 0 (1+ I) (OR (= I TIMES)				;  NEXT WORD AFTER ITS BP ARG.
			 (ED-EOB-P BP))
	  (AND (= (AR-1 ED-WORD-SYNTAX-TABLE (ED-BP-CHAR BP))
		  ED-WORD-ALPHABETIC)
	       (GO MOVE-OVER-ALPHABETICS))
    MOVE-OVER-INITIAL-DELIMITERS
          (AND (= (AR-1 ED-WORD-SYNTAX-TABLE (ED-ILDB BP))
		  ED-WORD-DELIMITER)
	       (GO MOVE-OVER-INITIAL-DELIMITERS))
    MOVE-OVER-ALPHABETICS
          (AND (= (AR-1 ED-WORD-SYNTAX-TABLE (ED-ILDB BP))
		  ED-WORD-ALPHABETIC)
	       (GO MOVE-OVER-ALPHABETICS))
	  ))
   BP)

(DEFUN ED-BACKWARD-WORD-BP (START-BP TIMES &AUX BP)	;RETURN A BP TO THE END OF THE
   (SETQ BP (ED-COPY-BP START-BP))
   (%CATCH 'ED-BOB
	   (DO I 0 (1+ I) (OR (= I TIMES)		;  NEXT WORD AFTER ITS BP ARG.
			      (ED-BOB-P BP))
	       (AND (= (AR-1 ED-WORD-SYNTAX-TABLE (ED-BP-CHAR-BEFORE BP))
		       ED-WORD-ALPHABETIC)
		    (GO MOVE-OVER-ALPHABETICS))
    MOVE-OVER-INITIAL-DELIMITERS
               (AND (= (AR-1 ED-WORD-SYNTAX-TABLE (ED-DLDB BP))
		       ED-WORD-DELIMITER)
		    (GO MOVE-OVER-INITIAL-DELIMITERS))
    MOVE-OVER-ALPHABETICS
    (AND (= (AR-1 ED-WORD-SYNTAX-TABLE (ED-DLDB BP))
	    ED-WORD-ALPHABETIC)
	 (GO MOVE-OVER-ALPHABETICS))))
   BP)

;**********************************
;*****  LISP EDITING COMMANDS *****
;**********************************

; COMMANDS FOR MOVING OVER LISTS AND S-EXPRESSIONS.

(DEFUN ED-FORWARD-SEXP-BP (START-BP TIMES &AUX BP TEM (LEVEL 0))
   (SETQ BP (ED-COPY-BP START-BP))
   (%CATCH 'ED-EOB
      (DO I 0 (1+ I) (OR (>= I TIMES) (ED-EOB-P BP))
	  MAIN (SELECT (AR-1 ED-LIST-SYNTAX-TABLE (ED-BP-CHAR BP))
		       (ED-LIST-DELIMITER
			(ED-IBP BP)
			(GO MAIN))
		       (ED-LIST-ALPHABETIC
			(GO HACK-ALPHABETIC))
		       (ED-LIST-SLASH
			(ED-IBP BP)
			(GO HACK-ALPHABETIC))
		       (ED-LIST-DOUBLE-QUOTE
			(GO HACK-STRING))
		       (ED-LIST-SINGLE-QUOTE
			(ED-IBP BP)
			(GO MAIN))
		       (ED-LIST-CLOSE
			(ED-IBP BP)
			(AND (> (SETQ LEVEL (1- LEVEL)) 0)
			     (GO MAIN))
			(RETURN T))
		       (ED-LIST-OPEN
			(ED-IBP BP)
			(SETQ LEVEL (1+ LEVEL))
			(GO MAIN)))

     HACK-ALPHABETIC
	  (SELECT (AR-1 ED-LIST-SYNTAX-TABLE (ED-ILDB BP))
		  (ED-LIST-ALPHABETIC
		   (GO HACK-ALPHABETIC))
		  (ED-LIST-SLASH
		   (ED-IBP BP)
		   (GO HACK-ALPHABETIC))
		  (OTHERWISE
		   (COND ((> LEVEL 0)
			  (GO MAIN))
			 (T (RETURN NIL)))))

     HACK-STRING   
	  (SELECT (AR-1 ED-LIST-SYNTAX-TABLE (ED-ILDB BP))
		  (ED-LIST-DOUBLE-QUOTE
		   (ED-IBP BP)
		   (COND ((> LEVEL 0)
			  (GO MAIN))
			 (T (RETURN NIL))))
		  (ED-LIST-SLASH
		   (ED-IBP BP)
		   (GO HACK-STRING))
		  (OTHERWISE
		   (GO HACK-STRING)))  ))
   BP)

(DEFUN ED-FORWARD-LIST-BP (START-BP TIMES &AUX BP TEM (LEVEL 0))
   (SETQ BP (ED-COPY-BP START-BP))
   (%CATCH 'ED-EOB
      (DO I 0 (1+ I) (OR (>= I TIMES) (ED-EOB-P BP))
	  MAIN (SELECT (AR-1 ED-LIST-SYNTAX-TABLE (ED-BP-CHAR BP))
		        (ED-LIST-CLOSE
			(ED-IBP BP)
			(AND (> (SETQ LEVEL (1- LEVEL)) 0)
			     (GO MAIN))
			(RETURN T))
		       (ED-LIST-OPEN
			(ED-IBP BP)
			(SETQ LEVEL (1+ LEVEL))
			(GO MAIN))
		       (ED-LIST-DOUBLE-QUOTE
			(GO HACK-STRING))
		       (OTHERWISE
			(ED-IBP BP)
			(GO MAIN)))

     HACK-STRING   
	  (SELECT (AR-1 ED-LIST-SYNTAX-TABLE (ED-ILDB BP))
		  (ED-LIST-DOUBLE-QUOTE
		   (ED-IBP BP)
		   (GO MAIN))
		  (ED-LIST-SLASH
		   (ED-IBP BP)
		   (GO HACK-STRING))
		  (OTHERWISE
		   (GO HACK-STRING)))  ))
   BP)

(DEFUN ED-BACKWARD-SEXP-BP (START-BP TIMES &AUX BP TEM (LEVEL 0))
   (SETQ BP (ED-COPY-BP START-BP))
   (%CATCH 'ED-BOB
      (DO I 0 (1+ I) (OR (>= I TIMES) (ED-BOB-P BP))
	  MAIN (SELECT (AR-1 ED-LIST-SYNTAX-TABLE (ED-BP-CHAR-BEFORE BP))
		       (ED-LIST-DELIMITER
			(ED-DBP BP)
			(GO MAIN))
		       (ED-LIST-ALPHABETIC
			(GO HACK-ALPHABETIC))
		       (ED-LIST-SLASH
			(ED-DBP BP)
			(GO MAIN))
		       (ED-LIST-DOUBLE-QUOTE
			(GO HACK-STRING))
		       (ED-LIST-SINGLE-QUOTE
			(ED-DBP BP)
			(GO MAIN))
		       (ED-LIST-OPEN
			(ED-DBP BP)
			(AND (= (AR-1 ED-LIST-SYNTAX-TABLE (ED-BP-CHAR-BEFORE BP))
				 ED-LIST-SINGLE-QUOTE)
			     (ED-DBP BP))
			(AND (> (SETQ LEVEL (1- LEVEL)) 0)
			     (GO MAIN))
			(RETURN T))
		       (ED-LIST-CLOSE
			(ED-DBP BP)
			(SETQ LEVEL (1+ LEVEL))
			(GO MAIN)))

     HACK-ALPHABETIC
	  (SELECT (AR-1 ED-LIST-SYNTAX-TABLE (ED-DLDB BP))
		  (ED-LIST-ALPHABETIC
		   (GO HACK-ALPHABETIC))
		  (OTHERWISE
		   (COND ((> LEVEL 0)
			  (GO MAIN))
			 (T (RETURN NIL)))))

     HACK-STRING   
	  (SELECT (AR-1 ED-LIST-SYNTAX-TABLE (ED-DLDB BP))
		  (ED-LIST-DOUBLE-QUOTE
		   (ED-DBP BP)
		   (COND ((> LEVEL 0)
			  (GO MAIN))
			 (T (RETURN NIL))))
		  (OTHERWISE
		   (GO HACK-STRING)))  ))
   BP)

(DEFUN ED-BACKWARD-LIST-BP (START-BP TIMES &AUX BP TEM (LEVEL 0))
   (SETQ BP (ED-COPY-BP START-BP))
   (%CATCH 'ED-BOB
      (DO I 0 (1+ I) (OR (>= I TIMES) (ED-BOB-P BP))
	  MAIN (SELECT (AR-1 ED-LIST-SYNTAX-TABLE (ED-BP-CHAR-BEFORE BP))
		       (ED-LIST-DOUBLE-QUOTE
			(GO HACK-STRING))
		       (ED-LIST-OPEN
			(ED-DBP BP)
			(AND (= (AR-1 ED-LIST-SYNTAX-TABLE (ED-BP-CHAR-BEFORE BP))
				 ED-LIST-SINGLE-QUOTE)
			     (ED-DBP BP))
			(AND (> (SETQ LEVEL (1- LEVEL)) 0)
			     (GO MAIN))
			(RETURN T))
		       (ED-LIST-CLOSE
			(ED-DBP BP)
			(SETQ LEVEL (1+ LEVEL))
			(GO MAIN)))
     HACK-STRING   
	  (SELECT (AR-1 ED-LIST-SYNTAX-TABLE (ED-DLDB BP))
		  (ED-LIST-DOUBLE-QUOTE
		   (ED-DBP BP)
			  (GO MAIN))
		  (OTHERWISE
		   (GO HACK-STRING)))  ))
   BP)


;(DEFUN ED-FORWARD-UP-LIST-BP (START-BP TIMES &AUX BP TEM)
;    (SETQ BP (ED-COPY-BP START-BP))
;    (%CATCH 'ED-EOB
;	    (DO I 0 (1+ I) (OR (= I TIMES)
;			       (ED-EOB-P BP))
;	      (DO NIL ((= (AR-1 ED-LIST-SYNTAX-TABLE (ED-BP-CHAR BP)) ED-LIST-CLOSE) T)
;		  (ED-FORWARD-LIST-BP BP 1))
;	      (ED-IBP BP)))
;    BP)


;*******************************
;***** BLANK SPACE HACKING *****
;*******************************

(DEFUN ED-FORWARD-OVER-BLANK (BP)
   (DO NIL ((NOT (MEMQ (ED-BP-CHAR BP) ED-BLANK-LIST)))
     (ED-IBP BP))
   BP)

(DEFUN ED-BACKWARD-OVER-BLANK (BP)
   (DO NIL ((NOT (MEMQ (ED-BP-CHAR-BEFORE BP) ED-BLANK-LIST)))
     (ED-DBP BP))
   BP)

(DEFUN ED-DELETE-BLANK-AROUND (BP)
   (ED-MOVE-BP-FROM-BP BP (ED-BACKWARD-OVER-BLANK BP))
   (ED-DELETE-BLANK-FORWARD BP))

(DEFUN ED-DELETE-BLANK-FORWARD (BP)
   (ED-DELETE-BETWEEN BP (ED-FORWARD-OVER-BLANK (ED-COPY-BP BP))))

(DEFUN ED-DELETE-BLANK-BACKWARD (BP)
   (ED-DELETE-BETWEEN BP (ED-BACKWARD-OVER-BLANK (ED-COPY-BP BP))))

(DEFUN ED-STRING-BLANK-P (STRING &AUX LIM)
   (COND ((NUMBERP STRING)
	  (MEMQ STRING ED-BLANK-LIST))
	 (T
	  (SETQ LIM (ED-STRING-LENGTH STRING))
	  (DO ((I 0 (1+ I)))
	      ((>= I LIM) T)
	      (OR (MEMQ (AR-1 STRING I) ED-BLANK-LIST)
		  (RETURN NIL))))))

(DEFUN ED-ORDER-BPS (BP1 BP2)
   (PROG NIL
	 (COND ((ED-BP-< BP1 BP2)
		(RETURN BP1 BP2))
	       (T
		(RETURN BP2 BP1)))))

;TAKES TWO BPS, AND RETURNS T IF THE FIRST IS PREVIOUS TO THE SECOND IN THE BUFFER
(DEFUN ED-BP-< (BP1 BP2 &AUX TEM1 TEM2)
    (SETQ TEM1 (ED-BP-LINE-NUM BP1)
	  TEM2 (ED-BP-LINE-NUM BP2))
    (COND ((< TEM1 TEM2) T)
	  ((> TEM1 TEM2) NIL)
	  (T
	   (< (ED-BP-CHAR-POS BP1) (ED-BP-CHAR-POS BP2)))))

(DEFUN ED-MARK-PDL-PUSH (BP)
    (SETQ ED-MARK-PDL (CONS (ED-COPY-BP BP) ED-MARK-PDL))
    (AND (> (LENGTH ED-MARK-PDL) 10)
	 (ED-DELETE-LAST-ELEMENT ED-MARK-PDL)))

(DEFUN ED-MARK-PDL-POP NIL
   (COND ((NULL ED-MARK-PDL)
	  (ED-BARF))
	 (T
	  (PROG1 (CAR ED-MARK-PDL)
		 (SETQ ED-MARK-PDL
		       (NCONC (CDR ED-MARK-PDL) (RPLACD ED-MARK-PDL NIL)))))))

(DEFUN ED-DELETE-LAST-ELEMENT (LIST)
    (AND (> (LENGTH LIST) 1)				;PREVENT LOSSAGE
	 (DO ((L LIST (CDR L)))
	     ((NULL (CDDR L))
	      (RPLACD L NIL)))))
;##############################

; DISPLAY UPDATE functions.

; ED-WINDOW-UPDATE-1 takes two args, a line-num and the number of physical lines
; which the user would like it to apper on.  It tries its best, though it may be
; impossible to meet the request because it may result in empty space above the 
; top of the buffer in the window, or because it would force a continuation line
; to be at the first physical line (which is illegal).
; No continuation line stuff will be in until the editor is converted to use the
; real machine.

(DEFUN ED-WINDOW-UPDATE-1 (BP PLINES-ABOVE)
    (ED-WINDOW-UPDATE (MIN (MAX (- (ED-BP-LINE-NUM BP) PLINES-ABOVE)
				0)
			   (1- (ED-BUFFER-FILL-POINTER)))
		      BP))


; ED-WINDOW-UPDATE takes the LINE-NUM of the line you want at the top of the screen
;   and does it.  The line-num had better be a real line-num, or els eit will go out of 
;   bounds...


;(DEFUN ED-WINDOW-UPDATE (TOP-LINE-NUM BP)
;   (SETF (ED-WINDOW-TOP-LINE-DISPLAYED) TOP-LINE-NUM)
;   (PROG (WINDOW-SIZE BUFFER-SIZE PLINE LINE-NUM)
;	 (SETQ WINDOW-SIZE (ED-WINDOW-FILL-POINTER)
;	       BUFFER-SIZE (ED-BUFFER-FILL-POINTER)
;	       PLINE       0
;	       LINE-NUM    TOP-LINE-NUM)
;    LOOP (COND ((>= PLINE WINDOW-SIZE)
;	        (GO DONE))
;	       ((>= LINE-NUM BUFFER-SIZE)
;		(GO CLEAR-REST-OF-WINDOW))
;	       ((AND (EQ (AR-1 ED-WINDOW PLINE)		;IF THE LINE IS ALREADY THERE
;			 (AR-1 ED-OPEN-BUFFER LINE-NUM))
;		     (NEQ LINE-NUM ED-OPEN-LINE-NUMBER))	;  BUT NOT THE OPEN LINE
;		(GO SKIP-FOLLOWING-CLINES))
;	       ((NOT (NULL (AR-1 ED-OPEN-BUFFER LINE-NUM)))
;		(SETQ PLINE (ED-OUTPUT-LINE LINE-NUM PLINE)))
;	       (T (ED-CLEAR-LINE PLINE)))
;    NEXT (SETQ PLINE (1+ PLINE)
;	       LINE-NUM (1+ LINE-NUM))
;         (GO LOOP)
;
;CLEAR-REST-OF-WINDOW
;         (DO I PLINE (1+ I) (>= I WINDOW-SIZE)
;	     (AND (AR-1 ED-WINDOW I)			;IF NOT NIL
;		  (ED-CLEAR-LINE I)))
;	 (GO DONE)
;
;SKIP-FOLLOWING-CLINES
;         (DO I (1+ PLINE) (1+ PLINE) (OR (>= I WINDOW-SIZE)
;					 (NEQ -1 (AR-1 ED-WINDOW I)))
;	     (SETQ PLINE I))
;	 (GO NEXT)
;
;    DONE (ED-DISPLAY-CURSORPOS BP)
;         (RETURN T)
;))

; THIS IS THE NEWDISPLAY VERSION.  THIS WHOLE FUNCTION IS EXTREMELY MUNGED.

(DEFUN ED-WINDOW-UPDATE (TOP-LINE-NUM BP)
   (SETF (ED-WINDOW-TOP-LINE-DISPLAYED) TOP-LINE-NUM)
   (PROG (WINDOW-SIZE BUFFER-SIZE PLINE LINE-NUM)
	 (SETQ WINDOW-SIZE (ED-WINDOW-FILL-POINTER)
	       BUFFER-SIZE (ED-BUFFER-FILL-POINTER)
	       PLINE       0
	       LINE-NUM    TOP-LINE-NUM)
    LOOP (COND ((>= PLINE WINDOW-SIZE)
	        (GO DONE))
	       ((>= LINE-NUM BUFFER-SIZE)
		(GO CLEAR-REST-OF-WINDOW))
	       ((AND (EQ (AR-1 ED-WINDOW PLINE)		;IF THE LINE IS ALREADY THERE
			 (AR-1 ED-OPEN-BUFFER LINE-NUM))
		     (NEQ LINE-NUM ED-OPEN-LINE-NUMBER))	;  BUT NOT THE OPEN LINE
		(GO SKIP-FOLLOWING-CLINES))
	       ((NOT (NULL (AR-1 ED-OPEN-BUFFER LINE-NUM)))
		(SETQ PLINE (ED-OUTPUT-LINE LINE-NUM PLINE)))
	       (T (ED-CLEAR-LINE PLINE)))
    NEXT (SETQ PLINE (1+ PLINE)
	       LINE-NUM (1+ LINE-NUM))
         (GO LOOP)

CLEAR-REST-OF-WINDOW
         (DO I PLINE (1+ I) (>= I WINDOW-SIZE)
	     (AND (AR-1 ED-WINDOW I)			;IF NOT NIL
		  (ED-CLEAR-LINE I)))
	 (GO DONE)

SKIP-FOLLOWING-CLINES
         (DO I (1+ PLINE) (1+ PLINE) (OR (>= I WINDOW-SIZE)
					 (NEQ -1 (AR-1 ED-WINDOW I)))
	     (SETQ PLINE I))
	 (GO NEXT)

    DONE (ED-DISPLAY-CURSORPOS BP)
         (RETURN T)
))



; ED-OUTPUT-LINE takes a LINE-NUM and a PLINE.  It does the outputting, updating
;   the display window including continuation line hacking.  It returns the
;   number of the last PLINE it used.

(DEFUN ED-OUTPUT-LINE (LINE-NUM PLINE &AUX LINE CLINES VPOS)
       (SETQ LINE (AR-1 ED-OPEN-BUFFER LINE-NUM))
       (IO-SET-CURSORPOS PLINE 0)
       (TV-CLEAR-EOL ED-PC-PPR)
       (TV-STRING-OUT ED-PC-PPR LINE)
       (SETQ VPOS (IO-READ-CURSORPOS))
       (AS-1 LINE ED-WINDOW PLINE)		   ; UPDATE WINDOW
       (SETQ CLINES (- VPOS PLINE))		   ; CONTINUATION LINES
       (SETF (ED-LINE-#-PHYSICAL-LINES LINE) (1+ CLINES))  ; AS LONG AS WE KNOW, SAVE IT
       (DO I CLINES (1- I)				   ; FOR EACH CLINE,
	   (OR (ZEROP I)
	       (>= PLINE (ED-WINDOW-FILL-POINTER)))
	   (SETQ PLINE (1+ PLINE))
	   (AS-1 -1 ED-WINDOW PLINE)		   ; NOT THE CONTINUATION LINE 
	   )
       PLINE)						   ; RETURN LAST PLINE USED

(DEFUN ED-#-PLINES (LINE-NUM)
       (COND ((ED-LINE-#-PHYSICAL-LINES)))
       (ED-BARF "ED-#-PLINES is not in yet!!!"))	;FOO, DEPENDS ON TABS AND STUFF

; ED-DISPLAY-CURSORPOS takes as its arg a buffer pointer, and moves the cursor to
; that position in the window.  If the position is out of bounds, it redisplays
; the window.

; ** For now it will lose on backspaces and tabs; I will wait for the real machine
; before trying to make them work **

(DEFUN ED-DISPLAY-CURSORPOS (BP &AUX TEM LINE PLINE LINE-NUM)
   (SETQ LINE (ED-BP-LINE BP))
   (SETQ LINE-NUM (ED-LINE-NUMBER LINE))
   (SETQ TEM (ED-WINDOW-FILL-POINTER))
   (SETQ PLINE (DO I 0 (1+ I) (= I TEM)			;SCAN WHOLE WINDOW FOR THE LINE
		 (AND (= (AR-1 ED-WINDOW I) LINE)
		      (RETURN I))))
   (COND ((NULL PLINE)					;IF LINE NOT ON SCREEN,
	  (ED-WINDOW-UPDATE-1 BP (ED-WINDOW-CENTER-CURSORPOS)))  ;RECURSION!!
	 ((AND
	   (< PLINE (ED-WINDOW-MIN-CURSORPOS))		;IF BEFORE TOP
	   (NEQ (AR-1 ED-WINDOW 0)
		(AR-1 ED-OPEN-BUFFER 0)))		; BUT NOT IF WERE AT THE TOP
	  (ED-WINDOW-UPDATE-1 BP (ED-WINDOW-MIN-RESET-CURSORPOS)))
	 ((> PLINE (ED-WINDOW-MAX-CURSORPOS))
	  (ED-WINDOW-UPDATE-1 BP (ED-WINDOW-MAX-RESET-CURSORPOS)))
	 (T
	  (IO-SET-CURSORPOS PLINE (ED-BP-CHAR-POS BP)))))

(DEFUN ED-CLEAN-WIPE (BP PLINES-ABOVE-LINE)
    (ED-CLEAR-WINDOW)
    (ED-WINDOW-UPDATE-1 BP PLINES-ABOVE-LINE))

;NEWDISPLAY??????
;(DEFUN ED-CLEAR-WINDOW (&AUX TEM)			; SAVE HAIR FOR REAL MACHINE WHERE
;   (TV-CLEAR-PC-PPR ED-PC-PPR)				; IT CAN BE DONE EASILY.
;   (SETQ TEM (ED-WINDOW-FILL-POINTER ED-WINDOW))
;   (DO I 0 (1+ I) (>= I TEM)
;      (AS-1 NIL ED-WINDOW I)))
;
;(DEFUN ED-CLEAR-LINE (PLINE)
;    (IO-SET-CURSORPOS PLINE 0)
;    (TV-CLEAR-EOL ED-PC-PPR)
;     (AS-1 NIL ED-WINDOW PLINE))


; EDITOR COMMAND HANDLER:  All editor commands are passed one argument, the 
;   character wich was typed to get them (actually a number from 0 to 1000 octal)
;   They are expected to return a value explaining how much redisplay is needed.
;   If it passes a second value of T, this means that the special ARGs should
;   not be reset.  There are several special variables used for communication
;   between the editor commands.  These are:

(SPECIAL ED-NUMERIC-ARG ED-POINTER-ARG-1 ED-POINTER-ARG-2 ED-STRING-ARG
	 ED-MODIFIER-FLAG ED-EXIT-FLAG ED-NUMERIC-ARG-P)

; If a function leaves ED-EXIT-FLAG set, then the editor loop will be exited.
;   The numeric arg will be used in generally the same way as in TECO macro packages.
;   Naming conventions:  all editor command functions should begin with ED-COM-,
;   and other "mode" flags should be named ED-FS-mumble, maybe.

; The function ED is the top-level command loop.  It takes an 
;   optional arg which is the name function or the buffer to edit.
; It looks for an ED-BUFFER property and uses that if the
;   function has not been redefined; then it looks
;   for a list in the function cell and uses PRINT of that.


(DEFUN ED (&OPTIONAL VICTIM ED-DEBUGP 
	      &AUX TEM FCTN (ED-INTERACTIVE-P T))
       (OR (BOUNDP 'ED-EDITOR-ARRAYS-AREA)		;INITIALIZE, IF NOT YET
	   (ED-INITIALIZE))

;-- Set up a buffer to edit.
       (SETQ FCTN (CAR (FUNCTION-CELL-LOCATION VICTIM)))
       (COND (VICTIM
	      (COND ((AND (SETQ TEM (GET VICTIM 'ED-BUFFER))
			  (EQ (GET VICTIM 'ED-OLD-FUNCTION)
			      (CAR (FUNCTION-CELL-LOCATION VICTIM))))
		     (ED-OPEN-BUFFER TEM))
		    ((LISTP FCTN)
		     (ED-OPEN-BUFFER (ED-GRINDEF-FCTN-INTO-BUFFER VICTIM)))
		    ((= DTP-NULL (%DATTP FCTN))
		     (ED-OPEN-BUFFER (ED-CREATE-BUFFER)))
		    (T
		     (ERROR "You can't edit a non-interpreted function." FCTN)
		     NIL)))
	     ((NULL ED-OPEN-BUFFER)
	      (ED-OPEN-BUFFER (ED-CREATE-BUFFER))))

       (ED-COMMAND-RESET)				;RESET THINGS
       (SETQ ED-EXIT-FLAG NIL)

;--- Set up I/O stuff
       (ED-CLEAN-WIPE ED-POINT 0)
       (TV-CLEAR-PC-PPR ED-DEBUG-PC-PPR)
       (TV-CLEAR-PC-PPR ED-AUX-PC-PPR)
       (TV-DEACTIVATE-PC-PPR CONSOLE-IO-PC-PPR)
       (TV-ACTIVATE-PC-PPR ED-PC-PPR)

       (DO NIL
	   (ED-EXIT-FLAG
	    (ED-RECOVER)
	    ED-EXIT-FLAG)
	 (%CATCH 'ED-TOP-LEVEL
		 (ED-COMMAND-EXECUTE (SETQ ED-LAST-COMMAND-CHAR (ED-COMMAND-GET))))))


;Default source of commands.

(DEFUN ED-COMMAND-GET NIL
   (ED-KEYBOARD-IO 'TYI))

;ED-COMMAND-RESET resets the special variables used by ED and associated functions

(DEFUN ED-COMMAND-RESET NIL
   (LOCAL-MAPC '(LAMBDA (PAIR) (SET (CAR PAIR) (CDR PAIR)))
	       ED-RESET-LIST))

(SETQ ED1 (CONS '(SPECIAL-PROCESSING
		  (LOAD-TIME-SETQ ED-RESET-LIST
				  '((ED-NUMERIC-ARG   . 1)
				    (ED-POINTER-ARG-1 . NIL)
				    (ED-POINTER-ARG-2 . NIL)
				    (ED-STRING-ARG    . NIL)
				    (ED-MODIFIER-FLAG . NIL)
				    (ED-NUMERIC-ARG-P . NIL))))
		ED1))


; The realtime edit commands are kept in an array called ED-COMMAND-DISPATCH-TABLE
;   which is initialized from ED-INITIAL-COMMAND-DISPATCH-TABLE.  The array is
;  two dimensional, 4 by 220.  The first dimension is the meta-control bits,
;  and the second is the charcter typed in the standard LISP machine character set
; (see LMDOC;CHAR >)

(DEFUN ED-COMMAND-EXECUTE (CHAR)
   (PROG (TEM VAL1 VAL2)
       (SETQ VAL1 (LSH CHAR -10)
	     VAL2 (LOGAND CHAR 377))
    L  (SETQ TEM
	     (AR-2 ED-COMMAND-DISPATCH-TABLE VAL1 VAL2))
       (COND ((NULL TEM)
	      (ED-BARF "Undefined command character -- ED-COMMAND-EXECUTE " CHAR)
	      (RETURN NIL))
	     ((LISTP TEM)
	      (SETQ VAL1 (FIRST TEM)
		    VAL2 (SECOND TEM))
	      (GO L))
	     ((NOT (SYMBOLP TEM))
	      (ED-BARF "Meaningless command -- ED-COMMAND-EXECUTE" TEM))
	     ((= (%DATTP (CAR (FUNCTION-CELL-LOCATION TEM))) DTP-NULL)
	      (ED-BARF TEM "Undefined function -- ED-COMMAND-EXECUTE"))
	     (T
	      (SETQ VAL2 NIL)				;in case of catch, make it default
	      (SETQ VAL1				;    to NIL.
		    (MULTIPLE-VALUE (VAL1 VAL2)
				    (FUNCALL TEM CHAR)))
	      (RETURN (ED-COMMAND-INTERPRET VAL1 VAL2 CHAR))))))

; ED-COMMAND-INTERPRET takes the one or two values returned by an ED-COM-,
;   and figures out the needed redisplay and resettage of arguments.
;   The way they are interpreted is:
;     ****** THIS IS TEMPORARY ******
;     0 or NIL mean no update at all
;     1 means ED-WINDOW-UPDATE
;     5 means only the cursor position has changed.
;
; If the second arg is T, the argument special variables should be left alone;
;   if there is none or it is NIL, ED-COMMAND-RESET.
; The third arg is the char which was used, for the error message to be
; more useful.

(DEFUN ED-COMMAND-INTERPRET (VAL1 VAL2 CHAR)
       (COND ((= VAL1 0))
	     ((NULL VAL1))
	     ((= VAL1 1) (ED-WINDOW-UPDATE (ED-WINDOW-TOP-LINE-DISPLAYED) ED-POINT))
	     ((= VAL1 5) (ED-DISPLAY-CURSORPOS ED-POINT))
	     (T (ED-BARF "Illegal returned arg " VAL1 " from realtime command "
			  CHAR " -- ED-COMMAND-INTERPRET")))
       (OR VAL2 (ED-COMMAND-RESET)))



; ED-BUFFER-IO is a stream used for getting text in and out of buffers.
;    It supports UNTYO and UNTYO-MARK for the grinder.

(DEFUN ED-BUFFER-IO (MESSAGE &OPTIONAL ARG1)
    (COND ((EQ MESSAGE 'TYI)
	   (COND (ED-BUFFER-IO-UNRCHF
		  (PROG1 ED-BUFFER-IO-UNRCHF (SETQ ED-BUFFER-IO-UNRCHF NIL)))
		 ((< ED-MAGIC-CHAR-POS (ED-LINE-FILL-POINTER ED-MAGIC-LINE))
		  (PROG1
		   (AR-1 ED-MAGIC-LINE ED-MAGIC-CHAR-POS)
		   (SETQ ED-MAGIC-CHAR-POS (1+ ED-MAGIC-CHAR-POS))))
		 ((< (1+ (ED-LINE-NUMBER ED-MAGIC-LINE))
		     (ED-BUFFER-FILL-POINTER ED-MAGIC-BUFFER))
		  (SETQ ED-MAGIC-LINE (AR-1 ED-MAGIC-BUFFER
					    (1+ (ED-LINE-NUMBER ED-MAGIC-LINE))))
		  (SETQ ED-MAGIC-CHAR-POS 0)
		  215)
		 (T
		  (AND ARG1 (ERROR ARG1)))))
	  
	  ((EQ MESSAGE 'UNTYI)
	   (SETQ ED-BUFFER-IO-UNRCHF ARG1))

	  ((EQ MESSAGE 'TYO)
	   (COND ((= ARG1 215)
		  (ED-INSERT-CRS-MOVING ED-POINT 1))
		 (T
		  (ED-INSERT-CHARS-MOVING ED-POINT ARG1))))

	  ((EQ MESSAGE 'UNTYO-MARK)
	   (ED-COPY-BP ED-POINT))

	  ((EQ MESSAGE 'UNTYO)
	   (ED-MOVE-BP-FROM-BP ED-POINT
			       (ED-DELETE-BETWEEN ARG1 ED-POINT)))

	  (T
	   (ERROR "UNKNOWN MESSAGE TO ED-BUFFER-IO") )))

(DEFUN ED-READ-SEXP-FROM-BUFFER (BUFFER &OPTIONAL (STREAM 'ED-BUFFER-IO)
				 &AUX ED-MAGIC-BUFFER ED-MAGIC-LINE
					ED-MAGIC-CHAR-POS)

    (SETQ ED-MAGIC-BUFFER BUFFER
	  ED-MAGIC-LINE (AR-1 BUFFER 0)
	  ED-MAGIC-CHAR-POS 0
	  ED-BUFFER-IO-UNRCHF NIL)
    (READ T STREAM))

(DEFUN ED-GRINDEF-FCTN-INTO-BUFFER (FCTN &OPTIONAL (STREAM 'ED-BUFFER-IO))
    (ED-OPEN-BUFFER (ED-CREATE-BUFFER))
    ED-OPEN-BUFFER
    (FUNCALL 'GRINDEF FCTN (- (ED-WINDOW-WIDTH) 3) STREAM NIL)
    (ED-MOVE-POINT 0 0)
    ED-OPEN-BUFFER)

; Temporary debugging functionsa.

(DEFUN V (&OPTIONAL BUFFER)
       (PROG NIL
	     (OR BUFFER (SETQ BUFFER ED-OPEN-BUFFER))
	     (OR (ARRAY-HAS-LEADER-P BUFFER)
		 (EQ (GET-ARRAY-TYPE BUFFER) ART-Q-LIST)
		 (GO NOT-BUFFER))
	     (OR (V-BP-P (ED-BUFFER-POINT BUFFER) BUFFER)
		 (PRINT 'POINT-NOT-A-BUFFER-POINTER))
	     (OR (V-BP-P (ED-BUFFER-MARK BUFFER) BUFFER)
		 (PRINT 'MARK-NOT-A-BUFFER-POINTER))
	     (DO I 0 (1+ I) (>= I (ED-BUFFER-FILL-POINTER BUFFER))
		 (OR (= I ED-OPEN-LINE-NUMBER) (V-LINE (AR-1 BUFFER I) I)))
	     (RETURN T)
  NOT-BUFFER (PRINT 'THIS-IS-NOT-A-BUFFER)
             (RETURN NIL)))

(DEFUN V-LINE (LINE LINE-NUM)
       (PROG NIL
	     (COND ((OR (NOT (ARRAY-HAS-LEADER-P LINE))
			(NEQ (GET-ARRAY-TYPE LINE) ART-STRING))
		    (PRINT 'BUFFER-ENTRY-NOT-LINE)
		    (RETURN NIL))
		   ((NEQ LINE-NUM (ED-LINE-NUMBER LINE))
		    (PRINT 'LINE-NUMBER-WRONG) (PRINT LINE-NUM) (PRINT LINE)))
	     (V-BPL (ED-LINE-BUFFER-POINTER-LIST LINE) LINE)
	     (RETURN NIL)))

(DEFUN V-BPL (BPL LINE &AUX BP)
       (COND ((NULL BPL) NIL)
	     (T (SETQ BP (CAR BPL))
		(COND ((NOT (NUMBERP (CAR BP)))
		       (PRINT 'BP-CAR-NOT-NUMBER) (PRINT BP)
		       (PRINT 'IN-LINE) (PRINT LINE))
		      ((> (CAR BP) (ED-LINE-FILL-POINTER LINE))
		       (PRINT 'BP-OUT-OF-RANGE) (PRINT BP)
		       (PRINT 'IN-LINE) (PRINT LINE)))
		(COND ((NEQ (CDR BP) LINE)
		       (PRINT 'BP-CDR-NOT-LINE) (PRINT BP)
		       (PRINT 'IN-LINE) (PRINT LINE))))))

(DEFUN V-BP-P (BP BUFFER &AUX LINE)
       (SETQ LINE (ED-BP-LINE BP))
       (AND (NUMBERP (CAR BP))
	    (EQ (AR-1 BUFFER (ED-LINE-NUMBER LINE)) LINE)))

(DEFUN LOC (&QUOTE FN)
       (MICRO-CODE-ENTRY-AREA (%SDATTP
			       (CAR (FUNCTION-CELL-LOCATION FN))
			       DTP-FIX)))

(DEFUN SHOW (&AUX STOP)
       (SETQ STOP (ED-BUFFER-FILL-POINTER))
       (TERPRI) (PRINC "THE OPEN BUFFER:")
       (DO ((IDX 0 (1+ IDX)))
	   ((= IDX STOP) NIL)
	   (PRINT (COND ((= IDX ED-OPEN-LINE-NUMBER)
			 ED-OPEN-LINE)
			(T
			 (AR-1 ED-OPEN-BUFFER IDX)))))
       (TERPRI) (PRINC "THE WINDOW (FIRST 10 ENTRIES):")
       (DO IDX 0 (1+ IDX) (= IDX 10)
	   (PRINT (AR-1 ED-WINDOW IDX))))


(DEFUN I NIL
   (ED-INITIALIZE)
   (ED-OPEN-BUFFER (ED-CREATE-BUFFER))
   (ED-INSERT-CHARS ED-POINT "107 FOOBAR: THE QUICK BROWN FOX ETC."))


; Random utility functions.


(DEFUN Q-BOUNDP (X) (NEQ (%DATTP (CAR (VALUE-CELL-LOCATION X)))
			 DTP-NULL))

(DEFUN BITTEST (A B)
       (NOT (ZEROP (LOGAND (%SDATTP A DTP-FIX)
			   (%SDATTP B DTP-FIX)))))

(DEFUN ARRAY-DISPLACED-P (ARRAY)
       (BITTEST (%OFFSET-MEM-REF ARRAY 0) ARRAY-DISPLACED-BIT))

(DEFUN ARRAY-INDEXED-P (ARRAY &AUX HEADER FIRST-ELEMENT-LOC)
       (SETQ HEADER (%OFFSET-MEM-REF ARRAY 0))
       (SETQ FIRST-ELEMENT-LOC
	     (%SDATTP (+ (%SDATTP ARRAY DTP-FIX)
			 (COND ((BITTEST HEADER ARRAY-LONG-LENGTH-FLAG) 2)
			       (T 1))) DTP-LOCATIVE-INTO-STRUCTURE))
       (AND (BITTEST HEADER ARRAY-DISPLACED-BIT)	; THE HEADER
	    (= (%P-DATTP FIRST-ELEMENT-LOC) DTP-ARRAY-POINTER)
	    (= (%P-USRCB FIRST-ELEMENT-LOC) 1)))


;;; Editor realtime commands.

; All should start with ED-COM-

(DEFUN ED-COM-FORWARD (CHR &AUX LINE-NUM CHAR-POS NUM EOB-LINE-NUM EOB-CHAR-POS)
   (SETQ LINE-NUM (ED-BP-LINE-NUM ED-POINT))
   (SETQ CHAR-POS (ED-BP-CHAR-POS ED-POINT))
   (SETQ NUM ED-NUMERIC-ARG)
   (SETQ EOB-LINE-NUM (1- (ED-BUFFER-FILL-POINTER)))
   (SETQ EOB-CHAR-POS (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER EOB-LINE-NUM)))

   (COND ((AND (= LINE-NUM EOB-LINE-NUM)		     ; IF WE START AT THE END
	       (= CHAR-POS EOB-CHAR-POS))
	  (ED-BARF) 0)
	 ((ZEROP NUM) 0)
	 (T
	  (PROG (LINE-LENGTH DEST-CHAR-POS)
	   LOOP (SETQ LINE-LENGTH (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER LINE-NUM)))
		(SETQ DEST-CHAR-POS (+ CHAR-POS NUM))
	        (COND ((<= DEST-CHAR-POS LINE-LENGTH)     ;IF WE CAN DO IT ON THIS LINE
		       (ED-MOVE-POINT LINE-NUM DEST-CHAR-POS)
		       (RETURN 5)))
		
		(SETQ NUM (- NUM (1+ (- LINE-LENGTH CHAR-POS))))   ;TAKE OFF ONE FOR "NEWLINE"
		
		(SETQ LINE-NUM (1+ LINE-NUM))
		(AND (> LINE-NUM EOB-LINE-NUM)
		     (GO EOB))
		(SETQ CHAR-POS 0)
		(GO LOOP)

	    EOB (ED-MOVE-POINT EOB-LINE-NUM EOB-CHAR-POS)    ;GOTO END OF BUFFER
	        (RETURN 5)))))

(DEFUN ED-COM-BACKWARD (CHR &AUX LINE-NUM CHAR-POS NUM)
   (SETQ LINE-NUM (ED-BP-LINE-NUM ED-POINT))
   (SETQ CHAR-POS (ED-BP-CHAR-POS ED-POINT))
   (SETQ NUM ED-NUMERIC-ARG)

   (COND ((AND (= LINE-NUM 0)				; IF WE START AT THE BEGINNING
	       (= CHAR-POS 0))
	  (ED-BARF) 0)
	 ((ZEROP NUM) 0)
	 (T
	  (PROG (DEST-CHAR-POS)
	   LOOP (SETQ DEST-CHAR-POS (- CHAR-POS NUM))
		(COND ((>= DEST-CHAR-POS 0)		;IF WE CAN DO IT ON THIS LINE
		       (ED-MOVE-POINT LINE-NUM DEST-CHAR-POS)
		       (RETURN 5)))

		(SETQ NUM (- NUM (1+ CHAR-POS)))	;TAKE OFF ONE FOR "NEWLINE"

		(SETQ LINE-NUM (1- LINE-NUM))
		(AND (< LINE-NUM 0)
		     (GO BOB))				; (BEGINNING OF BUFFER)
		(SETQ CHAR-POS (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER LINE-NUM)))
		(GO LOOP)

	    BOB (ED-MOVE-POINT 0 0)
	        (RETURN 5)))))


(DEFUN ED-COM-DOWN (CHR &AUX DEST BUFFER-LENGTH)
    (SETQ DEST (+ (ED-BP-LINE-NUM ED-POINT) ED-NUMERIC-ARG)
	  BUFFER-LENGTH (1- (ED-BUFFER-FILL-POINTER)))
    (COND ((> DEST BUFFER-LENGTH)			; ARE WE TRYING TO GO OFF THE END?
	   (COND ((> ED-NUMERIC-ARG 1)			; ARG > 1?
		  (ED-MOVE-POINT BUFFER-LENGTH 0))	; YES, GOTO END.
		 (T					; NO, MAKE NEW LINE.
		  (ED-MOVE-POINT (ED-ADD-LINE-TO-BUFFER) 0))))
	  (T (ED-MOVE-POINT DEST 0)))
    5)
	   
(DEFUN ED-COM-UP (CHR &AUX DEST)
   (SETQ DEST (- (ED-BP-LINE-NUM ED-POINT) ED-NUMERIC-ARG))
   (COND ((MINUSP DEST)
	  (AND (= ED-NUMERIC-ARG 1) (ED-BARF))
	  (ED-MOVE-POINT 0 0))
	 (T (ED-MOVE-POINT DEST 0)))
   5)

(DEFUN ED-COM-BOL (CHR)
   (ED-BP-CHAR-POS-SET ED-POINT 0)
   5)

(DEFUN ED-COM-EOL (CHR)
   (ED-BP-CHAR-POS-SET ED-POINT (ED-LINE-FILL-POINTER (ED-BP-LINE ED-POINT)))
   5)

; fix these to take args!!!

;This is haired up so that if a character is typed at the end of
;   a physical line, it will simply output that character and do no other redisplay.
;This will lose for continuation lines, but were not hacking them yet.

(DEFUN ED-COM-SELF-INSERT (CHR &AUX TEM LINE)
    (SETQ LINE (ED-BP-LINE ED-POINT))
    (ED-INSERT-CHARS-MOVING ED-POINT CHR)
    (COND ((= (ED-BP-CHAR-POS ED-POINT)
	      (ED-STRING-LENGTH LINE))
	   (TV-TYO ED-PC-PPR CHR)
	   (SETF (ED-WINDOW-UNMUNGED) ED-TICK)		;NEWDISPLAY!
	   0)
	  (T 1)))

;THIS HAS TO BE FIXED TO LOOK IN ALL WINDOWS IN WHICH THIS LINE IS BEING DISPLAYED,
;   AND REDISPLAY THERE TOO.

(DEFUN ED-COM-INSERT-CRS (CHR)
    (ED-INSERT-CRS-MOVING ED-POINT ED-NUMERIC-ARG)
    1)

(DEFUN ED-COM-MAKE-ROOM (CHR)
    (ED-INSERT-CRS ED-POINT ED-NUMERIC-ARG)
     1)

(DEFUN ED-COM-COMPLETE-REDISPLAY (CHR)
    (ED-CLEAN-WIPE ED-POINT (ED-WINDOW-CENTER-CURSORPOS))
    (TV-CLEAR-PC-PPR ED-DEBUG-PC-PPR)
    0)

(DEFUN ED-COM-QUIT (CHR)
    (SETQ ED-EXIT-FLAG "YOU MADE IT OUT ALIVE!")
    0)

(DEFUN ED-COM-BEEP (CHR) (ED-BARF) 0)

(DEFUN ED-COM-DELETE-FORWARD (CHR)
    (ED-DELETE-CHARS ED-POINT ED-NUMERIC-ARG)
    1)


(DEFUN ED-KILL-AND-SAVE-BETWEEN (BP1 BP2)
   (SETQ ED-KILLED-BUFFER (ED-SAVE-BETWEEN BP1 BP2))
   (ED-MOVE-BP-FROM-BP ED-POINT (ED-DELETE-BETWEEN BP1 BP2)))

(DEFUN ED-COM-KILL (CHR &AUX LINE-NUM CHAR-POS LINE)
   (COND ((ED-EOB-P ED-POINT)
	  (ED-BARF "Kill off end of buffer --- ED-COM-KILL")
	  5)
	 (T
	  (SETQ LINE-NUM (ED-BP-LINE-NUM ED-POINT))
	  (SETQ CHAR-POS (ED-BP-CHAR-POS ED-POINT))
	  (SETQ LINE (ED-BP-LINE ED-POINT))
	  (COND ((= CHAR-POS (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER LINE-NUM)))
		 (ED-DELETE-CHARS ED-POINT 1))		;DELETE THE "NEWLINE"
		(T
		 (ED-KILL-AND-SAVE-BETWEEN ED-POINT
					   (ED-BP (ED-STRING-LENGTH LINE) LINE))))
	  1)))

(DEFUN ED-COM-RUBOUT (CHR)
    (ED-COM-BACKWARD CHR)
    (ED-COM-DELETE-FORWARD CHR))

(DEFUN ED-COM-QUADRUPLE-NUMERIC-ARG (CHR)
   (PROG NIL
       (SETQ ED-NUMERIC-ARG (* ED-NUMERIC-ARG 4))
       (SETQ ED-NUMERIC-ARG-P T)
       (RETURN 0 T)))

(DEFUN ED-COM-NUMBERS (CHR)
   (PROG NIL
	 (SETQ CHR (LOGAND 77 CHR))
         (COND (ED-NUMERIC-ARG-P
		(SETQ ED-NUMERIC-ARG (+ (* 10. ED-NUMERIC-ARG)
					(- CHR 60))))	;FIX THIS WHEN READTABLE IS FIXED???
	       (T
		(SETQ ED-NUMERIC-ARG (- CHR 60))))
	 (SETQ ED-NUMERIC-ARG-P T)
	 (RETURN 0 T)))

(DEFUN ED-COM-BOB (CHR)	      ;BEGINNING OF BUFFER
   (ED-MOVE-POINT 0 0)
   5)

(DEFUN ED-COM-MARK-BOB (CHR)
   (ED-MOVE-BP ED-MARK 0 0)
   0)

(DEFUN ED-COM-EOB (CHR &AUX BUFFER-SIZE)
   (SETQ BUFFER-SIZE (ED-BUFFER-FILL-POINTER))
   (ED-MOVE-POINT (1- BUFFER-SIZE)
		  (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER (1- BUFFER-SIZE))))
   5)

(DEFUN ED-COM-MARK-EOB (CHR &AUX BUFFER-SIZE)
   (SETQ BUFFER-SIZE (ED-BUFFER-FILL-POINTER))
   (ED-MOVE-BP ED-MARK (1- BUFFER-SIZE)
	       (ED-LINE-FILL-POINTER (AR-1 ED-OPEN-BUFFER (1- BUFFER-SIZE))))
   5)

(DEFUN ED-COM-FORWARD-WORD (CHR)
   (ED-MOVE-BP-FROM-BP ED-POINT
		       (ED-FORWARD-WORD-BP ED-POINT ED-NUMERIC-ARG))
   5)

(DEFUN ED-COM-BACKWARD-WORD (CHR)
   (ED-MOVE-BP-FROM-BP ED-POINT
		       (ED-BACKWARD-WORD-BP ED-POINT ED-NUMERIC-ARG))
   5)

(DEFUN ED-COM-FORWARD-SEXP (CHR)
   (ED-MOVE-BP-FROM-BP ED-POINT
		       (ED-FORWARD-SEXP-BP ED-POINT ED-NUMERIC-ARG))
   5)

(DEFUN ED-COM-FORWARD-LIST (CHR)
   (ED-MOVE-BP-FROM-BP ED-POINT
		       (ED-FORWARD-LIST-BP ED-POINT ED-NUMERIC-ARG))
   5)

(DEFUN ED-COM-BACKWARD-SEXP (CHR)
   (ED-MOVE-BP-FROM-BP ED-POINT
		       (ED-BACKWARD-SEXP-BP ED-POINT ED-NUMERIC-ARG))
   5)

(DEFUN ED-COM-BACKWARD-LIST (CHR)
   (ED-MOVE-BP-FROM-BP ED-POINT
		       (ED-BACKWARD-LIST-BP ED-POINT ED-NUMERIC-ARG))
   5)

(DEFUN ED-COM-KILL-WORD (CHR)
   (ED-KILL-AND-SAVE-BETWEEN ED-POINT
			    (ED-FORWARD-WORD-BP ED-POINT ED-NUMERIC-ARG))
   1)

(DEFUN ED-COM-BACKWARD-KILL-WORD (CHR)
   (ED-KILL-AND-SAVE-BETWEEN ED-POINT
			    (ED-BACKWARD-WORD-BP ED-POINT ED-NUMERIC-ARG))
   1)

(DEFUN ED-COM-KILL-SEXP (CHR)
    (ED-KILL-AND-SAVE-BETWEEN ED-POINT
			     (ED-FORWARD-SEXP-BP ED-POINT ED-NUMERIC-ARG))
    1)

(DEFUN ED-COM-BACKWARD-KILL-SEXP (CHR)
    (ED-KILL-AND-SAVE-BETWEEN ED-POINT
			     (ED-BACKWARD-SEXP-BP ED-POINT ED-NUMERIC-ARG))
    1)

(DEFUN ED-COM-FORWARD-UP-LIST (CHR)
    (ED-MOVE-BP-FROM-BP ED-POINT
			(ED-FORWARD-UP-LIST-BP ED-POINT ED-NUMERIC-ARG)))

(DEFUN ED-COM-KILL-REGION (CHR &AUX TEM TEM1)		;TEMP!
   (ED-KILL-AND-SAVE-BETWEEN ED-POINT ED-MARK)
   1)

(DEFUN ED-COM-YANK (CHR)
   (ED-MOVE-BP-FROM-BP ED-POINT
		       (ED-INSERT-BUFFER ED-POINT ED-KILLED-BUFFER))
   1)


;MARK PDL MUST STILL GET INITED TO NIL SOMEHOW.
; NEXT PASS, ADD ED-INITIALIZE-1 SO WE CAN WIN.

(DEFUN ED-COM-SET-POP-MARK (CHR)
   (COND ((<= ED-NUMERIC-ARG 3)
	  (ED-MARK-PDL-PUSH ED-POINT)
	  (ED-MOVE-BP-FROM-BP ED-MARK ED-POINT)
	  0)
	 ((<= ED-NUMERIC-ARG 17)
	  (ED-MOVE-BP-FROM-BP ED-POINT (ED-MARK-PDL-POP))
	  5)
	 (T (ED-MARK-PDL-POP)
	    0)))

(DEFUN ED-COM-EVAL-BUFFER (CHR &AUX FORM VICTIM)
    (SETQ FORM (ED-READ-SEXP-FROM-BUFFER ED-OPEN-BUFFER))
    (EVAL-PRINT FORM)
    (COND ((EQ (CAR FORM) 'DEFUN)
	   (SETQ VICTIM (CADR FORM))
	   (PUTPROP VICTIM  ED-OPEN-BUFFER 'ED-BUFFER)
	   (PUTPROP VICTIM (CAR (FUNCTION-CELL-LOCATION VICTIM)) 'ED-OLD-FUNCTION)))
    (SETQ ED-EXIT-FLAG "Buffer has been evaluated, back to LISP")
    0)


(DEFUN ED-COM-DELETE-HORIZONTAL-SPACE (CHR)
    (ED-DELETE-BLANK-AROUND ED-POINT)
    1)

(DEFUN ED-COM-BACK-TO-INDENTATION (CHR)
    (ED-BP-CHAR-POS-SET ED-POINT 0)
    (ED-FORWARD-OVER-BLANK ED-POINT)
    5)
  ;@@@

 ;;;;    FUNCTION TO SET UP THE COMMAND DISPATCH TABLE:

; The table is set up from a list of four elements, called rows: one for each
; setting of the buckey bits, as follows: 0 = none, 1 = control, 2 = meta, 3 = control-meta.
; Each row is walked down, and as each element is reached, it is stored in the array, unless
; its car is recognized as a special function.
; Currently implemented special functions are:
;     (*REPEAT <times> <thing) --  <thing> is stored <times> times.
;     (*REPEAT-EVAL <times> <thing>) -- like *REPEAT except that <thing> gets EVALed
;                              before being stored.  The special variable ED-RPCNT will
;                              be set to 0 on the first iteration and incremented by 1
;                              throughout, like a MIDAS repeat loop.


(DEFUN ED-SET-UP-DISPATCH-TABLE (TABLE &AUX ENTRY TEM)
   (DO ((TABLE1 TABLE (CDR TABLE1))
	(IDX1 0 (1+ IDX1)))
       ((NULL TABLE1))
     (DO ((LIST (CAR TABLE1) (CDR LIST))
	  (IDX2 0))				  ;THE AMOUNT THIS IS INCREMENTED DEPENDS!!
	 ((NULL LIST) (COND ((NEQ IDX2 220)
			     (MAPC (FUNCTION PRINC)
				   (LIST "ROW WRONG SIZE: "
					 IDX1 " " IDX2 " --- ED-SET-UP-DISPATCH-TABLE"))
			     (TERPRI))))
       (SETQ ENTRY (CAR LIST))
       (COND ((ATOM ENTRY)
	      (AS-2 ENTRY ED-COMMAND-DISPATCH-TABLE IDX1 IDX2)
	      (SETQ IDX2 (1+ IDX2)))
	     ((EQ (FIRST ENTRY) '*REPEAT)
	      (SETQ TEM (SECOND ENTRY))
	      (SETQ ENTRY (THIRD ENTRY))
	      (DO I 0 (1+ I) (= I TEM)
		(AS-2 ENTRY ED-COMMAND-DISPATCH-TABLE IDX1 IDX2)
		(SETQ IDX2 (1+ IDX2))))
	     ((EQ (FIRST ENTRY) '*REPEAT-EVAL)
	      (SETQ TEM (SECOND ENTRY))
	      (SETQ ENTRY (THIRD ENTRY))
	      (DO ED-RPCNT 0 (1+ ED-RPCNT) (= ED-RPCNT TEM)
		(AS-2 (EVAL ENTRY) ED-COMMAND-DISPATCH-TABLE IDX1 IDX2)
		(SETQ IDX2 (1+ IDX2))))
	     (T
	      (AS-2 ENTRY ED-COMMAND-DISPATCH-TABLE IDX1 IDX2)
	      (SETQ IDX2 (1+ IDX2)))))))
		  

;;; The initial command dispatch table:


(DEFUN ED-SETUP-INITIAL-COMMAND-DISPATCH-TABLE NIL
(SETQ ED-INITIAL-COMMAND-DISPATCH-TABLE '(
   (		   ; UNSHIFTED CHARACTERS
      (*REPEAT 200 ED-COM-SELF-INSERT)	    ; ALL PRINTING CHARACTERS.
      (*REPEAT 7 NIL)			    ; RANDOM...
      ED-COM-RUBOUT			    ; RUBOUT.
      NIL				    ; NO BACKSPACES YET.
      NIL				    ; NO TABS YET
      NIL				    ; LINEFEED
      NIL				    ; VT
      ED-COM-COMPLETE-REDISPLAY		    ; FORM FEED
      ED-COM-INSERT-CRS                     ; CARRIAGE RETURN
      (*REPEAT 2 NIL)			    ; UNUSED CODES
      )
   (		   ; CONTROL CHARACTERS
      (*REPEAT 40 NIL)
      (*REPEAT 10 NIL)
      ED-COM-MARK-BOB         ;(
      ED-COM-MARK-EOB         ;)
      (*REPEAT 6 NIL)
      (*REPEAT 12 ED-COM-NUMBERS)
      (*REPEAT 2 NIL)

      ED-COM-BOB	      ;<
      NIL		      ;=
      ED-COM-EOB	      ;>
      NIL		      ;?
      NIL		      ;@
      ED-COM-BOL	      ;A
      ED-COM-BACKWARD	      ;B
      NIL		      ;C
      ED-COM-DELETE-FORWARD   ;D
      ED-COM-EOL	      ;E
      ED-COM-FORWARD	      ;F
      ED-COM-BEEP             ;G
      ED-COM-BACKWARD	      ;H
      NIL		      ;I
      NIL		      ;J
      ED-COM-KILL	      ;K
      ED-COM-COMPLETE-REDISPLAY	      ;L
      NIL		      ;M
      ED-COM-DOWN	      ;N
      ED-COM-MAKE-ROOM	      ;O
      ED-COM-UP		      ;P
      NIL		      ;Q
      NIL		      ;R
      NIL		      ;S
      ED-COM-SET-POP-MARK     ;T
      ED-COM-QUADRUPLE-NUMERIC-ARG    ;U
      NIL		      ;V
      ED-COM-KILL-REGION      ;W
      NIL		      ;X
      ED-COM-YANK             ;Y
      ED-COM-QUIT	      ;Z
      (*REPEAT 6 NIL)
      (*REPEAT-EVAL 32 (LIST 1 (+ 101 ED-RPCNT)))      ;MAP LOWER CASE INTO UPPER CASE
      (*REPEAT 5 NIL)
      (*REPEAT 20 NIL))
;DROPS THROUGH


;DROPS IN
   (		     ; META CHARACTERS
      (*REPEAT 40 NIL)
      (*REPEAT 10 NIL)
      ED-COM-BACKWARD-SENTENCE  ;(
      ED-COM-FORWARD-SENTENCE   ;)
      (*REPEAT 6 NIL)
      (*REPEAT 12 ED-COM-NUMBERS)
      (*REPEAT 2 NIL)

      ED-COM-MARK-BOB	      ;<
      NIL		      ;=
      ED-COM-MARK-EOB	      ;>
      NIL		      ;?
      NIL		      ;@
      ED-COM-BACKWARD-SENTENCE	      ;A
      ED-COM-BACKWARD-WORD	      ;B
      NIL		      ;C
      ED-COM-KILL-WORD	      ;D
      NIL		      ;E
      ED-COM-FORWARD-WORD     ;F
      ED-COM-BEEP             ;G
      NIL		      ;H
      NIL		      ;I
      NIL		      ;J
      ED-COM-KILL-WORD	      ;K
      ED-COM-LOWERCASE-WORD   ;L
      ED-COM-BACK-TO-INDENTATION      ;M
      NIL		      ;N
      NIL		      ;O
      NIL		      ;P
      NIL		      ;Q
      NIL		      ;R
      NIL		      ;S
      NIL		      ;T
      ED-COM-UPPERCASE-WORD   ;U
      NIL		      ;V
      NIL		      ;W
      NIL		      ;X
      NIL		      ;Y
      NIL		      ;Z
      ED-COM-BACKWARD-PARAGRAPH         ;[
      ED-COM-DELETE-HORIZONTAL-SPACE	;\
      ED-COM-FORWARD-PARAGRAPH	        ;[
      (*REPEAT 3 NIL)
      (*REPEAT-EVAL 32 (LIST 2 (+ 101 ED-RPCNT)))      ;MAP LOWER CASE INTO UPPER CASE
      (*REPEAT 5 NIL)
      (*REPEAT 7 NIL)
      ED-COM-BACKWARD-KILL-WORD
      (*REPEAT 5 NIL)
      ED-COM-BACK-TO-INDENTATION
      (*REPEAT 2 NIL))

   (							; CONTROL-META CHRACTERS
      (*REPEAT 40 NIL)
      (*REPEAT 10 NIL)
      ED-COM-FORWARD-UP-LIST  ;(
      ED-COM-BACKWARD-UP-LIST  ;)
      (*REPEAT 6 NIL)
      (*REPEAT 12 ED-COM-NUMBERS)
      (*REPEAT 2 NIL)

      NIL		      ;<
      NIL		      ;=
      NIL		      ;>
      NIL		      ;?
      NIL		      ;@
      ED-COM-BACKWARD-OUTERMOST-LIST  ;A
      ED-COM-BACKWARD-SEXP    ;B
      NIL		      ;C
      NIL		      ;D
      ED-COM-FORWARD-OUTERMOST-LIST   ;E
      ED-COM-FORWARD-SEXP     ;F
      ED-COM-FORMAT-CODE      ;G
      NIL		      ;H
      NIL		      ;I
      NIL		      ;J
      ED-COM-KILL-SEXP	      ;K
      NIL		      ;L
      ED-COM-BACK-TO-INDENTATION      ;M
      NIL		      ;N
      NIL		      ;O
      NIL		      ;P
      NIL		      ;Q
      NIL		      ;R
      NIL		      ;S
      NIL		      ;T
      NIL		      ;U
      NIL		      ;V
      NIL		      ;W
      NIL		      ;X
      NIL		      ;Y
      ED-COM-EVAL-BUFFER      ;Z
      (*REPEAT 6 NIL)
      (*REPEAT-EVAL 32 (LIST 3 (+ 101 ED-RPCNT)))      ;MAP LOWER CASE INTO UPPER CASE
      (*REPEAT 5 NIL)
      (*REPEAT 7 NIL)
      ED-COM-BACKWARD-KILL-SEXP
      (*REPEAT 5 NIL)
      ED-COM-BACK-TO-INDENTATION
      (*REPEAT 2 NIL))
)))


(DEFUN ED-SETUP-TABLE (ARRAY LIST &AUX I E LIMIT)
    (SETQ I 0)
    (DO LIST LIST (CDR LIST) (NULL LIST)
      (SETQ E (CAR LIST))
      (COND ((ATOM E)
	     (AS-1 (SYMEVAL E) ARRAY I)
	     (SETQ I (1+ I)))
	    ((EQ (CAR E) '*REPEAT)
	     (SETQ LIMIT (SECOND E))
	     (SETQ E (THIRD E))
	     (DO J 0 (1+ J) (= J LIMIT)
	       (AS-1 E ARRAY (+ J I)))
	     (SETQ I (+ I LIMIT)))
	    ((EQ (CAR E) '*REPEAT-EVAL)
	     (SETQ LIMIT (SECOND E))
	     (SETQ E (THIRD E))
	     (DO J 0 (1+ J) (= J LIMIT)
	       (AS-1 (EVAL E) ARRAY (+ J I)))
	     (SETQ I (+ I LIMIT)))
	    (T
	     (AS-1 E ARRAY I)
	     (SETQ I (1+ I))))))


(DEFUN ED-SETUP-OTHER-INITIAL-TABLES NIL 
  (SETQ ED-INITIAL-LIST-SYNTAX-LIST
    '(
      (*REPEAT-EVAL 40 ED-LIST-ALPHABETIC)
      
      ED-LIST-DELIMITER		;040 space
      ED-LIST-ALPHABETIC	;041 !
      ED-LIST-DOUBLE-QUOTE	;042 "
      ED-LIST-ALPHABETIC	;043 #
      ED-LIST-ALPHABETIC	;044 $
      ED-LIST-ALPHABETIC	;045 %
      ED-LIST-ALPHABETIC	;046 &
      ED-LIST-SINGLE-QUOTE	;047 '
      ED-LIST-OPEN		;050 (
      ED-LIST-CLOSE		;051 )
      ED-LIST-ALPHABETIC	;052 *
      ED-LIST-ALPHABETIC	;053 +
      ED-LIST-DELIMITER		;054 ,
      ED-LIST-ALPHABETIC	;055 -
      ED-LIST-ALPHABETIC	;056 .
      ED-LIST-SLASH		;057 /
      (*REPEAT-EVAL 10. ED-LIST-ALPHABETIC)			;DIGITS
      ED-LIST-ALPHABETIC	;072 :
      ED-LIST-ALPHABETIC	;073 ;
      ED-LIST-ALPHABETIC	;074 <
      ED-LIST-ALPHABETIC	;075 =
      ED-LIST-ALPHABETIC	;076 >
      ED-LIST-ALPHABETIC	;077 ?
      ED-LIST-ALPHABETIC	;100 @
      (*REPEAT-EVAL 26. ED-LIST-ALPHABETIC)			;LETTERS
      ED-LIST-ALPHABETIC	;133 [
      ED-LIST-ALPHABETIC	;134 \
      ED-LIST-ALPHABETIC	;135 ]
      ED-LIST-ALPHABETIC	;136 ^
      ED-LIST-ALPHABETIC	;137 _
      ED-LIST-SINGLE-QUOTE	;140 ` STANDARD MACRO
      (*REPEAT-EVAL 26. ED-LIST-ALPHABETIC)			;MORE LETTERS
      ED-LIST-ALPHABETIC	;173 {
      ED-LIST-ALPHABETIC	;174 |            |
      ED-LIST-ALPHABETIC	;175 }
      ED-LIST-ALPHABETIC	;176 ~
      ED-LIST-ALPHABETIC	;177 integral ???
      
      ED-LIST-ALPHABETIC	;200 null character
      ED-LIST-DELIMITER		;201 break
      ED-LIST-DELIMITER		;202 clear
      ED-LIST-DELIMITER		;203 call
      ED-LIST-DELIMITER		;204 escape (NOT altmode!)
      ED-LIST-DELIMITER		;205 backnext
      ED-LIST-DELIMITER		;206 help
      ED-LIST-DELIMITER		;207 rubout
      ED-LIST-ALPHABETIC	;210 bs
      ED-LIST-DELIMITER		;211 tab
      ED-LIST-DELIMITER		;212 line
      ED-LIST-DELIMITER		;213 vt
      ED-LIST-DELIMITER		;214 form = newpage
      ED-LIST-DELIMITER		;215 return = newline
      (*REPEAT-EVAL 162 ED-LIST-ALPHABETIC)))
;DROPS THROUGH


;DROPS IN
;  ED-WORD-ALPHABETIC 0
;  ED-WORD-DELIMITER 1

  (SETQ  ED-INITIAL-WORD-SYNTAX-LIST
  '( 
  (*REPEAT-EVAL 40 ED-LIST-ALPHABETIC)
  ED-WORD-DELIMITER	;040 space
  ED-WORD-DELIMITER	;041 !
  ED-WORD-DELIMITER	;042 "
  ED-WORD-DELIMITER	;043 #
  ED-WORD-ALPHABETIC	;044 $
  ED-WORD-ALPHABETIC	;045 %
  ED-WORD-DELIMITER	;046 &
  ED-WORD-DELIMITER	;047 '
  ED-WORD-DELIMITER	;050 (
  ED-WORD-DELIMITER	;051 )
  ED-WORD-DELIMITER	;052 *
  ED-WORD-DELIMITER	;053 +
  ED-WORD-DELIMITER	;054 ,
  ED-WORD-DELIMITER	;055 -
  ED-WORD-ALPHABETIC	;056 .
  ED-WORD-DELIMITER	;057 /
  (*REPEAT-EVAL 10. ED-WORD-ALPHABETIC)			;DIGITS
  ED-WORD-DELIMITER	;072 :
  ED-WORD-DELIMITER	;073 ;
  ED-WORD-DELIMITER	;074 <
  ED-WORD-DELIMITER	;075 =
  ED-WORD-DELIMITER	;076 >
  ED-WORD-DELIMITER	;077 ?
  ED-WORD-DELIMITER	;100 @
  (*REPEAT-EVAL 26. ED-WORD-ALPHABETIC)			;LETTERS
  ED-WORD-DELIMITER	;133 [
  ED-WORD-DELIMITER	;134 \
  ED-WORD-DELIMITER	;135 ]
  ED-WORD-DELIMITER	;136 ^
  ED-WORD-DELIMITER	;137 _
  ED-WORD-DELIMITER	;140 `
  (*REPEAT-EVAL 26. ED-WORD-ALPHABETIC)			;LETTERS
  (*REPEAT-EVAL 205 ED-WORD-DELIMITER)))
 )

;FUNCTIONS TO BE WRITTEN.
;THESE ARE IN THE COMMAND-DISPATCH-TABLE, JUST WAITING FOR SOME
;KIND SOUL TO MAKE THEM WORK.  WHY NOT CONTRIBUTE?  JUST SEND YOUR
;CONTRIBUTION TO
;	THE LISP MACHINE
;	ROOM 907
;	545 TECHNOLOGY SQUARE
;	CAMBRIDGE, MASS. 02139
; THANK YOU.
	  ;ED-COM-BACKWARD-SENTENCE
	  ;ED-COM-LOWERCASE-WORD
	  ;ED-COM-UPPERCASE-WORD
	  ;ED-COM-BACKWARD-OUTERMOST-LIST
	  ;ED-COM-BACKWARD-PARAGRAPH
	  ;ED-COM-FORWARD-OUTERMOST-LIST
	  ;ED-COM-FORWARD-PARAGRAPH
	  ;ED-COM-FORMAT-CODE

