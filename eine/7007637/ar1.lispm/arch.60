;;;-*-LISP-*-
;;; Instructions:
;; 0) Reload from band 8, (i.e., Make sure TR14 is bound and there is some ROOM.)
;; 1) READFILE TK;ARCH >
;; 2) FASLOAD DLW;TAKE QFASL
;; 3) Set up ARCH-SPEED to something, like maybe (3 . 1)
;; 4) Do ARCH-INIT
;; 5) Make sure the shift-lock key is off.
;; 6) Now you are set up and can do (ARCH 1), (ARCH 2) up to (ARCH 6).


;;; (ARCH 1) through (ARCH 6)
;;; Likewise ARCH-RECORD.
;;; ARCH-SPEED is interpreted as (NUMERATOR . DENOMINATOR)
;;; Load LMFONT; TR14 QFASL before trying to use this.

(SPECIAL ARCH-PC-PPR ARCH-CONSOLE-PC-PPR X-1 Y-1 X-2 Y-2 X-3 Y-3 ARCH-IO-UNRCHF ARCH-FONT-1
	 ARCH-FONT-2 ARCH-FIGURE-X ARCH-FIGURE-Y)
(SPECIAL ARCH-RECORD ARCH-TIME ARCH-SCRIPT-LIST ARCH-SPEED)

(SETQ X-1 0 Y-1 0 X-2 0 Y-2 0 X-3 0 Y-3 0 ARCH-IO-UNRCHF NIL)
(SETQ ARCH-FONT-1 TR14 ARCH-FONT-2 TR14)
(SETQ ARCH-FIGURE-X 0 ARCH-FIGURE-Y -110)
(SETQ ARCH-SPEED '(1 . 1))

(DEFUN ARCH-INIT ()
  (SETQ ARCH-PC-PPR (TV-DEFINE-PC-PPR 'ARCH-PC-PPR (LIST ARCH-FONT-2)
                                      'BLINKER-P NIL
                                      'MORE-P NIL))
  (SETQ ARCH-CONSOLE-PC-PPR (TV-DEFINE-PC-PPR 'ARCH-CONSOLE-PC-PPR (LIST ARCH-FONT-1)
					      'TOP (+ (+ (// TV-SCREEN-HEIGHT 2) 10) 40)
					      'LEFT 145.))
  (TV-DEACTIVATE-PC-PPR CONSOLE-IO-PC-PPR)
  (SETQ CONSOLE-IO-PC-PPR ARCH-CONSOLE-PC-PPR)
  NIL)

(DEFUN ARCH-BOUNDS ()
  (TV-ERASE TV-SCREEN-WIDTH 1 0 (// TV-SCREEN-HEIGHT 2) TV-ALU-XOR)
  (TV-ERASE 1 (// TV-SCREEN-HEIGHT 2) (// TV-SCREEN-WIDTH 2) 0 TV-ALU-XOR)
  NIL)

(DEFUN ARCH-TEXT (X Y STRING)
  (TV-SET-CURSORPOS ARCH-PC-PPR
                    (+ X (// TV-SCREEN-WIDTH 2)) 
                    (- (// TV-SCREEN-HEIGHT 2) Y))
  (TV-STRING-OUT ARCH-PC-PPR STRING))

(DEFUN ARCH-TEXT-CENTERED (X Y STRING &AUX WIDTH)
  (SETQ WIDTH (TV-COMPUTE-MOTION ARCH-PC-PPR 0 0 STRING))
  (ARCH-TEXT (- X (// WIDTH 2)) 
             ;(+ Y (// (PC-PPR-LINE-HEIGHT ARCH-PC-PPR) 2))
             (+ Y 4)
             STRING))

(DEFUN ARCH-TEXT-DISAPPEAR (X Y STRING)
  (SETF (PC-PPR-CHAR-ALUF ARCH-PC-PPR) TV-ALU-ANDCA)
  (ARCH-TEXT X Y STRING)
  (SETF (PC-PPR-CHAR-ALUF ARCH-PC-PPR) TV-ALU-IOR))

(DEFUN ARCH-BLOB (X Y STRING)
  (DRAW-CIRCLE X Y 20.)
  (ARCH-TEXT-CENTERED X Y STRING))

(DEFUN ARCH-LINE-BETWEEN-BLOBS (X1 Y1 X2 Y2 HEAD1 HEAD2
                                &AUX X-CASE Y-CASE (DX 15.))
  (SETQ X-CASE (- X1 X2) Y-CASE (- Y1 Y2))
  (AND (ZEROP Y-CASE) (SETQ DX 25.))
  (SETQ X1 (- X1 (SIGNXFER X-CASE DX))
        X2 (+ X2 (SIGNXFER X-CASE DX))
        Y1 (- Y1 (SIGNXFER Y-CASE 20.))
        Y2 (+ Y2 (SIGNXFER Y-CASE 20.)))
  (DRAW-LINE X1 Y1 X2 Y2)
  (COND ((ZEROP Y-CASE) ;HORIZONTAL
         (COND (HEAD1
                (DRAW-LINE X1 Y1 (- X1 (SIGNXFER X-CASE 5)) (- Y1 5))
                (DRAW-LINE X1 Y1 (- X1 (SIGNXFER X-CASE 5)) (+ Y1 5))))
         (COND (HEAD2
                (DRAW-LINE X2 Y2 (+ X2 (SIGNXFER X-CASE 5)) (- Y2 5))
                (DRAW-LINE X2 Y2 (+ X2 (SIGNXFER X-CASE 5)) (+ Y2 5)))))
        (T              ;SLANTED
         (COND (HEAD1
                (DRAW-LINE X1 Y1 X1 (- Y1 (SIGNXFER Y-CASE 6)))
                (DRAW-LINE X1 Y1 (- X1 (SIGNXFER X-CASE 6)) (- Y1 (SIGNXFER Y-CASE 2)))))
         (COND (HEAD2
                (DRAW-LINE X2 Y2 X2 (+ Y2 (SIGNXFER Y-CASE 6)))
                (DRAW-LINE X2 Y2 (+ X2 (SIGNXFER X-CASE 6)) (+ Y2 (SIGNXFER Y-CASE 2)))))))
         
)

(DEFUN SIGNXFER (SIGN NUM)
  (COND ((MINUSP SIGN) (- NUM))
        ((ZEROP SIGN) 0)
        (T NUM)))

(DEFUN TEST () (ARCH-FIGURE-1 'UP 'DOWN T))

(DEFUN ARCH-FIGURE-2 (X Y Z) (ARCH-FIGURE-1 X Y Z ARCH-FIGURE-X ARCH-FIGURE-Y))

(DEFUN ARCH-FIGURE-1 (B1-B2 B1-B3 B2-B3 &OPTIONAL (DX 0) (DY 0))
  (ARCH-BLOB (+ DX 125.) (+ DY 200.) "B1")
  (ARCH-BLOB (+ DX 50.) (+ DY 100.) "B2")
  (ARCH-BLOB (+ DX 200.) (+ DY 100.) "B3")
  (AND B1-B2 (ARCH-LINE-BETWEEN-BLOBS (+ DX 125.) (+ DY 200.) (+ DX 50.) (+ DY 100.)
				      (EQ B1-B2 'UP) (EQ B1-B2 'DOWN)))
  (AND B1-B3 (ARCH-LINE-BETWEEN-BLOBS (+ DX 125.) (+ DY 200.) (+ DX 200.) (+ DY 100.)
				      (EQ B1-B3 'UP) (EQ B1-B3 'DOWN)))
  (AND B2-B3 (ARCH-LINE-BETWEEN-BLOBS (+ DX 50.) (+ DY 100.) (+ DX 200.) (+ DY 100.) T T))
  (AND B1-B2 (ARCH-TEXT-CENTERED (+ DX 104) (+ DY 230) "ON"))
  (AND B1-B3 (ARCH-TEXT-CENTERED (+ DX 270) (+ DY 230) "ON"))
  (AND B2-B3 (ARCH-TEXT-CENTERED (+ DX 200) (+ DY 130) "TOUCH")))

(DEFUN ARCH-CURSOR (X Y &AUX (Z 4))
    (DRAW-LINE (- X Z) (- Y Z) (+ X Z) (+ Y Z))
    (DRAW-LINE (+ X Z) (- Y Z) (- X Z) (+ Y Z)))

(DEFUN ARCH-SKETCH (&OPTIONAL (INPUT-FUNCTION 'KBD-TYI) &AUX (DRAW-MODE 'XOR))
    (PROG ((X -360) (Y 220) X0 Y0 LINEP (DX 10) (DY 10) 
	     (X-LOW-LIM -430) (X-HIGH-LIM 430) (Y-LOW-LIM -330) (Y-HIGH-LIM 330)
	     CHAR CM-BITS M (BASE-TIME (TIME)) (RECORD NIL) (HIDING-P NIL))
       IN (ARCH-CURSOR X Y)
          (SETQ CHAR (FUNCALL INPUT-FUNCTION))
	  (ARCH-CURSOR X Y)
	  (OR CHAR (RETURN NIL))
          (AND (EQ INPUT-FUNCTION 'KBD-TYI)
	       (NOT HIDING-P)
               (PUSH (CONS CHAR (- (TIME) BASE-TIME)) RECORD))
          (SETQ CM-BITS (LDB 1002 CHAR))
	  (SETQ CHAR (CHAR-UPCASE (LDB 0010 CHAR)))
	  (COND ((MEMQ CHAR '(## [ ## ] ## \ ## / ))
		 (AND LINEP (DRAW-LINE X0 Y0 X Y))
		 (SETQ M (NTH CM-BITS '(1 2 4 10)))
		 (COND ((= CHAR ## [ ) (SETQ X (- X (* M DX))))
		       ((= CHAR ## ] ) (SETQ X (+ X (* M DX))))
		       ((= CHAR ## \ ) (SETQ Y (+ Y (* M DY))))
		       ((= CHAR ## / ) (SETQ Y (- Y (* M DY)))))
		 (SETQ X (MIN X-HIGH-LIM (MAX X-LOW-LIM X))
		       Y (MIN Y-HIGH-LIM (MAX Y-LOW-LIM Y)))
		 (AND LINEP (DRAW-LINE X0 Y0 X Y))
		 )
		((= CHAR ## 1) (SETQ X-1 X Y-1 Y))
		((= CHAR ## 2) (SETQ X-2 X Y-2 Y))
		((= CHAR ## 3) (SETQ X-3 X Y-3 Y))
		((MEMQ CHAR '(## + ## ^ ## ~ ## ;))
		 (SETQ X0 X Y0 Y)
		 (DRAW-LINE X0 Y0 X Y)
		 (SETQ LINEP T))
		((= CHAR ## -)
		 (SETQ LINEP NIL))
		((= CHAR ## H)
		 (SETQ HIDING-P T))
		((= CHAR ## S)
		 (SETQ HIDING-P NIL))
		((= CHAR 201)
		 (RETURN (REVERSE RECORD)))
		)
	  (GO IN)
	  ))

(DEFUN ARCH-LABEL-BLOCKS ()
    (ARCH-TEXT-CENTERED X-1 Y-1 "B1")
    (ARCH-TEXT-CENTERED X-2 Y-2 "B2")
    (ARCH-TEXT-CENTERED X-3 Y-3 "B3"))

(DEFUN ARCH-READLINE ( &AUX TEM)
  (PROG ()
    (OR (BOUNDP 'READLINE-BUFFER)
	(SETQ READLINE-BUFFER (MAKE-ARRAY DEFAULT-ARRAY-AREA 'ART-STRING 200. NIL 1)))
    (STORE-ARRAY-LEADER 0 READLINE-BUFFER 0)
    (DO CHAR (LOGAND 377 (KBD-TYI)) (LOGAND 377 (KBD-TYI)) (= CHAR 215)
      (COND ((= CHAR 207)
	     (COND ((> (ARRAY-LEADER READLINE-BUFFER 0) 0)
		    (STORE-ARRAY-LEADER (1- (ARRAY-LEADER READLINE-BUFFER 0))
					READLINE-BUFFER 0)
		    (MULTIPLE-VALUE (X Y)
				    (TV-READ-CURSORPOS CONSOLE-IO-PC-PPR))
		    (TV-SET-CURSORPOS CONSOLE-IO-PC-PPR 0 Y)
		    (TV-CLEAR-EOL CONSOLE-IO-PC-PPR)
                    (TV-STRING-OUT CONSOLE-IO-PC-PPR "-->  ")
		    (TV-STRING-OUT CONSOLE-IO-PC-PPR READLINE-BUFFER))))
	    (T (TV-TYO CONSOLE-IO-PC-PPR CHAR)
	       (ARRAY-PUSH READLINE-BUFFER CHAR))))
    (SETQ TEM
	  (MAKE-ARRAY DEFAULT-ARRAY-AREA 'ART-STRING (ARRAY-LEADER READLINE-BUFFER 0)))
    (COPY-ARRAY-CONTENTS READLINE-BUFFER TEM)
    (RETURN TEM)))

(DEFUN ARCH-WAIT ()
  (DO L 0 (KBD-TYI) (= L 40)))

(DEFUN ARCH (N &AUX SYM TEM)
    (COND ((OR (< N 1) (> N 6))
	   (ERROR "NO SUCH SCRIPT" N)))
    (SETQ SYM (NTH (1- N) ARCH-SCRIPT-LIST))
    (SETQ TEM (GET SYM 'POSITIONS))
    (SETQ X-1 (FIRST TEM) Y-1 (SECOND TEM) X-2 (THIRD TEM)
	  Y-2 (FOURTH TEM) X-3 (FIFTH TEM) Y-3 (SIXTH TEM))
    (ARCH-DRIVER (SYMEVAL SYM) (GET SYM 'SKETCH)))

(DEFUN ARCH-RECORD (N &AUX SYM)
    (TV-DEACTIVATE-PC-PPR CONSOLE-IO-PC-PPR)
    (SETQ SYM (NTH (1- N) ARCH-SCRIPT-LIST))
    (PUTPROP SYM (GET SYM 'SKETCH) 'OLD-SKETCH)
    (COND ((OR (< N 1) (> N 6))
	   (ERROR "NO SUCH SCRIPT" N)))
    (ARCH-BOUNDS)
    (TV-CLEAR-SCREEN)
    (TV-HOME ARCH-PC-PPR)
    (TV-SET-CURSORPOS ARCH-PC-PPR 120 60)
    (TV-STRING-OUT ARCH-PC-PPR (GET-PNAME (CAR (SYMEVAL SYM))))
    (APPLY 'ARCH-FIGURE-2 (CADR (SYMEVAL SYM)))
    (ARCH-WAIT)
    (PUTPROP SYM (ARCH-SKETCH) 'SKETCH)
    (PUTPROP SYM (LIST X-1 Y-1 X-2 Y-2 X-3 Y-3) 'POSITIONS)
    (TV-ACTIVATE-PC-PPR CONSOLE-IO-PC-PPR)
    "Got it!")


(DEFUN ARCH-DRIVER (SCRIPT SKETCH)
  (TV-DEACTIVATE-PC-PPR CONSOLE-IO-PC-PPR)
  (TV-HOME CONSOLE-IO-PC-PPR)
  (TV-CLEAR-SCREEN)
  (TV-HOME ARCH-PC-PPR)
  (TV-SET-CURSORPOS ARCH-PC-PPR 120 60)
  (TV-STRING-OUT ARCH-PC-PPR (GET-PNAME (CAR SCRIPT)))
  (ARCH-WAIT)
  (ARCH-PLAYBACK SKETCH)
  (ARCH-WAIT)
  (ARCH-LABEL-BLOCKS)
  (ARCH-WAIT)
  (APPLY 'ARCH-FIGURE-2 (CADR SCRIPT))
  (DO ((S (CDDR SCRIPT) (CDR S)))
      ((NULL S))
    (ARCH-WAIT)
    (MAPCAR 'ARCH-STEP (CAR S))
    )
  (DO L 0 (KBD-TYI) (= L 201))
  (TV-ACTIVATE-PC-PPR CONSOLE-IO-PC-PPR)
  NIL)

(DEFUN ARCH-STEP (STEP)
    (SELECTQ (CAR STEP)
	(PRINT (TV-STRING-OUT CONSOLE-IO-PC-PPR (CADR STEP))
	       (TV-CRLF CONSOLE-IO-PC-PPR))
	(PRIN1 (TV-STRING-OUT CONSOLE-IO-PC-PPR (CADR STEP)))
	(READLINE (TV-ACTIVATE-PC-PPR CONSOLE-IO-PC-PPR)
		  (ARCH-READLINE)
		  (TV-DEACTIVATE-PC-PPR CONSOLE-IO-PC-PPR)
		  (TV-CRLF CONSOLE-IO-PC-PPR)
		  (TV-CRLF CONSOLE-IO-PC-PPR))))

(DEFUN ARCH-PLAYBACK (RECORD)
  (SETQ ARCH-RECORD RECORD
        ARCH-TIME (TIME))
  (ARCH-SKETCH 'ARCH-PLAYBACK-FUNCTION))

(DEFUN ARCH-PLAYBACK-FUNCTION ()
  (PROG (STEP TEM)
	(OR ARCH-RECORD (RETURN NIL))
        (SETQ STEP (CAR ARCH-RECORD)
              ARCH-RECORD (CDR ARCH-RECORD))
        (SETQ TEM (CDR STEP))
      L (AND (< TEM (// (* (- (TIME) ARCH-TIME) (CAR ARCH-SPEED)) (CDR ARCH-SPEED)))
             (RETURN (CAR STEP)))
        (GO L)))

(DEFUN ARCH-FASD (FILENAME)
    (SETQ FASD-STREAM (OPEN (FILE-DEFAULT-FN2 FILENAME "QFASL") '(WRITE FIXNUM)))
    (FASD-INITIALIZE)
    (FASD-START-FILE)
    (MAPC 'ARCH-FASD-SCRIPT ARCH-SCRIPT-LIST)
    (FASD-END-FILE)
    (CLOSE FASD-STREAM))

(DEFUN ARCH-FASD-SCRIPT (SYMBOL)
    (FASD-STORE-VALUE-CELL SYMBOL
                           (FASD-CONSTANT (SYMEVAL SYMBOL)))
    (FASD-STORE-PROPERTY-CELL SYMBOL
                              (FASD-CONSTANT (PLIST SYMBOL)))
    (FASD-END-WHACK))

(SETQ ARCH-SCRIPT-LIST '(SCRIPT-1 SCRIPT-2 SCRIPT-3 SCRIPT-4 SCRIPT-5 SCRIPT-6))

(SETQ SCRIPT-1
      '(ANALYZING/:
	(DOWN DOWN NIL)
	((PRINT "B1 IS A BRICK") (PRINT "B2 IS A BRICK") (PRINT "B3 IS A BRICK"))
	((PRINT "B1 IS ON B2") (PRINT "B1 IS ON B3"))
	((PRINT "B1 IS LYING") (PRINT "B2 IS STANDING") (PRINT "B3 IS STANDING"))))

(SETQ SCRIPT-2
      '(LEARNING/:
	(DOWN DOWN T)
	((PRINT "IS DRAWING AN EXAMPLE") (PRINT "OR A NEAR MISS?") (PRIN1 "-->  "))
	((READLINE))
	((PRINT "CONCLUSION:") (PRINT "     B2 MUST NOT TOUCH B3")
			       (PRINT "     B3 MUST NOT TOUCH B2"))))

(SETQ SCRIPT-3
      '(LEARNING/:
	(NIL NIL NIL)
	((PRINT "IS DRAWING AN EXAMPLE") (PRINT "OR A NEAR MISS?") (PRIN1 "-->  "))
	((READLINE))
	((PRINT "CONCLUSION:") (PRINT "     B1 MUST BE ON B2")
			       (PRINT "     B1 MUST BE ON B3"))))

(SETQ SCRIPT-4
      '(RECOGNIZING/:
	(DOWN DOWN NIL)
	((PRIN1 "-->  "))
	((READLINE))
	((PRINT "DRAWING SEEMS TO") (PRINT "BE AN ARCH,") (PRINT "BUT:"))
	((PRINT "   B1 IS A WEDGE"))))

(SETQ SCRIPT-5
      '(RECOGNIZING/:
	(UP UP NIL)
	((PRIN1 "-->  "))
	((READLINE))
	((PRINT "DRAWING IS NOT AN ARCH;") (PRINT "TWO ESSENTIAL RELATIONS")
					   (PRINT "ARE MISSING:"))
	((PRINT "    B1 IS NOT ON B2") (PRINT "    B1 IS NOT ON B3"))))

(SETQ SCRIPT-6
      '(RECOGNIZING/:
	(DOWN DOWN NIL)
	((PRIN1 "-->  "))
	((READLINE))
	((PRINT "DRAWING SEEMS TO") (PRINT "BE AN ARCH,") (PRINT "BUT:"))
	((PRINT "    B2 IS LONGER") (PRINT "    B3 IS LONGER"))))